// Generated from java-escape by ANTLR 4.11.1
package antlr4.mysql;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		ATTRIBUTE=14, BEFORE=15, BETWEEN=16, BOTH=17, BUCKETS=18, BY=19, CALL=20, 
		CASCADE=21, CASE=22, CAST=23, CHANGE=24, CHARACTER=25, CHECK=26, COLLATE=27, 
		COLUMN=28, CONDITION=29, CONSTRAINT=30, CONTINUE=31, CONVERT=32, CREATE=33, 
		CROSS=34, CURRENT=35, CURRENT_ROLE=36, CURRENT_USER=37, CURSOR=38, DATABASE=39, 
		DATABASES=40, DECLARE=41, DEFAULT=42, DELAYED=43, DELETE=44, DESC=45, 
		DESCRIBE=46, DETERMINISTIC=47, DIAGNOSTICS=48, DISTINCT=49, DISTINCTROW=50, 
		DROP=51, EACH=52, ELSE=53, ELSEIF=54, EMPTY=55, ENCLOSED=56, ESCAPED=57, 
		EXCEPT=58, EXISTS=59, EXIT=60, EXPLAIN=61, FALSE=62, FETCH=63, FOR=64, 
		FORCE=65, FOREIGN=66, FROM=67, FULLTEXT=68, GENERATED=69, GET=70, GRANT=71, 
		GROUP=72, HAVING=73, HIGH_PRIORITY=74, HISTOGRAM=75, IF=76, IGNORE=77, 
		IGNORED=78, IN=79, INDEX=80, INFILE=81, INNER=82, INOUT=83, INSERT=84, 
		INTERVAL=85, INTO=86, IS=87, ITERATE=88, JOIN=89, KEY=90, KEYS=91, KILL=92, 
		LATERAL=93, LEADING=94, LEAVE=95, LEFT=96, LIKE=97, LIMIT=98, LINEAR=99, 
		LINES=100, LOAD=101, LOCK=102, LOCKED=103, LOOP=104, LOW_PRIORITY=105, 
		MASTER_BIND=106, MASTER_SSL_VERIFY_SERVER_CERT=107, MATCH=108, MAXVALUE=109, 
		MINVALUE=110, MODIFIES=111, NATURAL=112, NOT=113, NO_WRITE_TO_BINLOG=114, 
		NULL_LITERAL=115, NUMBER=116, ON=117, OPTIMIZE=118, OPTION=119, OPTIONAL=120, 
		OPTIONALLY=121, OR=122, ORDER=123, OUT=124, OUTER=125, OUTFILE=126, OVER=127, 
		PARTITION=128, PRIMARY=129, PROCEDURE=130, PURGE=131, RANGE=132, READ=133, 
		READS=134, REFERENCES=135, REGEXP=136, RELEASE=137, RENAME=138, REPEAT=139, 
		REPLACE=140, REQUIRE=141, RESIGNAL=142, RESTRICT=143, RETAIN=144, RETURN=145, 
		REVOKE=146, RIGHT=147, RLIKE=148, SCHEMA=149, SCHEMAS=150, SELECT=151, 
		SET=152, SEPARATOR=153, SHOW=154, SIGNAL=155, SKIP_=156, SPATIAL=157, 
		SQL=158, SQLEXCEPTION=159, SQLSTATE=160, SQLWARNING=161, SQL_BIG_RESULT=162, 
		SQL_CALC_FOUND_ROWS=163, SQL_SMALL_RESULT=164, SSL=165, STACKED=166, STARTING=167, 
		STATEMENT=168, STRAIGHT_JOIN=169, TABLE=170, TERMINATED=171, THEN=172, 
		TO=173, TRAILING=174, TRIGGER=175, TRUE=176, UNDO=177, UNION=178, UNIQUE=179, 
		UNLOCK=180, UNSIGNED=181, UPDATE=182, USAGE=183, USE=184, USING=185, VALUES=186, 
		WHEN=187, WHERE=188, WHILE=189, WITH=190, WRITE=191, XOR=192, ZEROFILL=193, 
		TINYINT=194, SMALLINT=195, MEDIUMINT=196, MIDDLEINT=197, INT=198, INT1=199, 
		INT2=200, INT3=201, INT4=202, INT8=203, INTEGER=204, BIGINT=205, REAL=206, 
		DOUBLE=207, PRECISION=208, FLOAT=209, FLOAT4=210, FLOAT8=211, DECIMAL=212, 
		DEC=213, NUMERIC=214, DATE=215, TIME=216, TIMESTAMP=217, DATETIME=218, 
		YEAR=219, CHAR=220, VARCHAR=221, NVARCHAR=222, NATIONAL=223, BINARY=224, 
		VARBINARY=225, TINYBLOB=226, BLOB=227, MEDIUMBLOB=228, LONG=229, LONGBLOB=230, 
		TINYTEXT=231, TEXT=232, MEDIUMTEXT=233, LONGTEXT=234, ENUM=235, VARYING=236, 
		SERIAL=237, YEAR_MONTH=238, DAY_HOUR=239, DAY_MINUTE=240, DAY_SECOND=241, 
		HOUR_MINUTE=242, HOUR_SECOND=243, MINUTE_SECOND=244, SECOND_MICROSECOND=245, 
		MINUTE_MICROSECOND=246, HOUR_MICROSECOND=247, DAY_MICROSECOND=248, JSON_ARRAY=249, 
		JSON_ARRAYAGG=250, JSON_ARRAY_APPEND=251, JSON_ARRAY_INSERT=252, JSON_CONTAINS=253, 
		JSON_CONTAINS_PATH=254, JSON_DEPTH=255, JSON_EXTRACT=256, JSON_INSERT=257, 
		JSON_KEYS=258, JSON_LENGTH=259, JSON_MERGE=260, JSON_MERGE_PATCH=261, 
		JSON_MERGE_PRESERVE=262, JSON_OBJECT=263, JSON_OBJECTAGG=264, JSON_OVERLAPS=265, 
		JSON_PRETTY=266, JSON_QUOTE=267, JSON_REMOVE=268, JSON_REPLACE=269, JSON_SCHEMA_VALID=270, 
		JSON_SCHEMA_VALIDATION_REPORT=271, JSON_SEARCH=272, JSON_SET=273, JSON_STORAGE_FREE=274, 
		JSON_STORAGE_SIZE=275, JSON_TABLE=276, JSON_TYPE=277, JSON_UNQUOTE=278, 
		JSON_VALID=279, JSON_VALUE=280, NESTED=281, ORDINALITY=282, PATH=283, 
		AVG=284, BIT_AND=285, BIT_OR=286, BIT_XOR=287, COUNT=288, CUME_DIST=289, 
		DENSE_RANK=290, FIRST_VALUE=291, GROUP_CONCAT=292, LAG=293, LAST_VALUE=294, 
		LEAD=295, MAX=296, MIN=297, NTILE=298, NTH_VALUE=299, PERCENT_RANK=300, 
		RANK=301, ROW_NUMBER=302, STD=303, STDDEV=304, STDDEV_POP=305, STDDEV_SAMP=306, 
		SUM=307, VAR_POP=308, VAR_SAMP=309, VARIANCE=310, CURRENT_DATE=311, CURRENT_TIME=312, 
		CURRENT_TIMESTAMP=313, LOCALTIME=314, CURDATE=315, CURTIME=316, DATE_ADD=317, 
		DATE_SUB=318, EXTRACT=319, LOCALTIMESTAMP=320, NOW=321, POSITION=322, 
		SUBSTR=323, SUBSTRING=324, SYSDATE=325, TRIM=326, UTC_DATE=327, UTC_TIME=328, 
		UTC_TIMESTAMP=329, ACCOUNT=330, ACTION=331, AFTER=332, AGGREGATE=333, 
		ALGORITHM=334, ANY=335, AT=336, AUTHORS=337, AUTOCOMMIT=338, AUTOEXTEND_SIZE=339, 
		AUTO_INCREMENT=340, AVG_ROW_LENGTH=341, BEGIN=342, BINLOG=343, BIT=344, 
		BLOCK=345, BOOL=346, BOOLEAN=347, BTREE=348, CACHE=349, CASCADED=350, 
		CHAIN=351, CHANGED=352, CHANNEL=353, CHECKSUM=354, PAGE_CHECKSUM=355, 
		CIPHER=356, CLASS_ORIGIN=357, CLIENT=358, CLOSE=359, CLUSTERING=360, COALESCE=361, 
		CODE=362, COLUMNS=363, COLUMN_FORMAT=364, COLUMN_NAME=365, COMMENT=366, 
		COMMIT=367, COMPACT=368, COMPLETION=369, COMPRESSED=370, COMPRESSION=371, 
		CONCURRENT=372, CONNECT=373, CONNECTION=374, CONSISTENT=375, CONSTRAINT_CATALOG=376, 
		CONSTRAINT_SCHEMA=377, CONSTRAINT_NAME=378, CONTAINS=379, CONTEXT=380, 
		CONTRIBUTORS=381, COPY=382, CPU=383, CYCLE=384, CURSOR_NAME=385, DATA=386, 
		DATAFILE=387, DEALLOCATE=388, DEFAULT_AUTH=389, DEFINER=390, DELAY_KEY_WRITE=391, 
		DES_KEY_FILE=392, DIRECTORY=393, DISABLE=394, DISCARD=395, DISK=396, DO=397, 
		DUMPFILE=398, DUPLICATE=399, DYNAMIC=400, ENABLE=401, ENCRYPTED=402, ENCRYPTION=403, 
		ENCRYPTION_KEY_ID=404, END=405, ENDS=406, ENGINE=407, ENGINES=408, ERROR=409, 
		ERRORS=410, ESCAPE=411, EVEN=412, EVENT=413, EVENTS=414, EVERY=415, EXCHANGE=416, 
		EXCLUSIVE=417, EXPIRE=418, EXPORT=419, EXTENDED=420, EXTENT_SIZE=421, 
		FAILED_LOGIN_ATTEMPTS=422, FAST=423, FAULTS=424, FIELDS=425, FILE_BLOCK_SIZE=426, 
		FILTER=427, FIRST=428, FIXED=429, FLUSH=430, FOLLOWING=431, FOLLOWS=432, 
		FOUND=433, FULL=434, FUNCTION=435, GENERAL=436, GLOBAL=437, GRANTS=438, 
		GROUP_REPLICATION=439, HANDLER=440, HASH=441, HELP=442, HISTORY=443, HOST=444, 
		HOSTS=445, IDENTIFIED=446, IGNORE_SERVER_IDS=447, IMPORT=448, INCREMENT=449, 
		INDEXES=450, INITIAL_SIZE=451, INPLACE=452, INSERT_METHOD=453, INSTALL=454, 
		INSTANCE=455, INSTANT=456, INVISIBLE=457, INVOKER=458, IO=459, IO_THREAD=460, 
		IPC=461, ISOLATION=462, ISSUER=463, JSON=464, KEY_BLOCK_SIZE=465, LANGUAGE=466, 
		LAST=467, LEAVES=468, LESS=469, LEVEL=470, LIST=471, LOCAL=472, LOGFILE=473, 
		LOGS=474, MASTER=475, MASTER_AUTO_POSITION=476, MASTER_CONNECT_RETRY=477, 
		MASTER_DELAY=478, MASTER_HEARTBEAT_PERIOD=479, MASTER_HOST=480, MASTER_LOG_FILE=481, 
		MASTER_LOG_POS=482, MASTER_PASSWORD=483, MASTER_PORT=484, MASTER_RETRY_COUNT=485, 
		MASTER_SSL=486, MASTER_SSL_CA=487, MASTER_SSL_CAPATH=488, MASTER_SSL_CERT=489, 
		MASTER_SSL_CIPHER=490, MASTER_SSL_CRL=491, MASTER_SSL_CRLPATH=492, MASTER_SSL_KEY=493, 
		MASTER_TLS_VERSION=494, MASTER_USER=495, MAX_CONNECTIONS_PER_HOUR=496, 
		MAX_QUERIES_PER_HOUR=497, MAX_ROWS=498, MAX_SIZE=499, MAX_UPDATES_PER_HOUR=500, 
		MAX_USER_CONNECTIONS=501, MEDIUM=502, MEMBER=503, MERGE=504, MESSAGE_TEXT=505, 
		MID=506, MIGRATE=507, MIN_ROWS=508, MODE=509, MODIFY=510, MUTEX=511, MYSQL=512, 
		MYSQL_ERRNO=513, NAME=514, NAMES=515, NCHAR=516, NEVER=517, NEXT=518, 
		NO=519, NOCACHE=520, NOCOPY=521, NOCYCLE=522, NOMAXVALUE=523, NOMINVALUE=524, 
		NOWAIT=525, NODEGROUP=526, NONE=527, ODBC=528, OFFLINE=529, OFFSET=530, 
		OF=531, OJ=532, OLD_PASSWORD=533, ONE=534, ONLINE=535, ONLY=536, OPEN=537, 
		OPTIMIZER_COSTS=538, OPTIONS=539, OWNER=540, PACK_KEYS=541, PAGE=542, 
		PAGE_COMPRESSED=543, PAGE_COMPRESSION_LEVEL=544, PARSER=545, PARTIAL=546, 
		PARTITIONING=547, PARTITIONS=548, PASSWORD=549, PASSWORD_LOCK_TIME=550, 
		PHASE=551, PLUGIN=552, PLUGIN_DIR=553, PLUGINS=554, PORT=555, PRECEDES=556, 
		PRECEDING=557, PREPARE=558, PRESERVE=559, PREV=560, PROCESSLIST=561, PROFILE=562, 
		PROFILES=563, PROXY=564, QUERY=565, QUICK=566, REBUILD=567, RECOVER=568, 
		RECURSIVE=569, REDO_BUFFER_SIZE=570, REDUNDANT=571, RELAY=572, RELAY_LOG_FILE=573, 
		RELAY_LOG_POS=574, RELAYLOG=575, REMOVE=576, REORGANIZE=577, REPAIR=578, 
		REPLICATE_DO_DB=579, REPLICATE_DO_TABLE=580, REPLICATE_IGNORE_DB=581, 
		REPLICATE_IGNORE_TABLE=582, REPLICATE_REWRITE_DB=583, REPLICATE_WILD_DO_TABLE=584, 
		REPLICATE_WILD_IGNORE_TABLE=585, REPLICATION=586, RESET=587, RESTART=588, 
		RESUME=589, RETURNED_SQLSTATE=590, RETURNING=591, RETURNS=592, REUSE=593, 
		ROLE=594, ROLLBACK=595, ROLLUP=596, ROTATE=597, ROW=598, ROWS=599, ROW_FORMAT=600, 
		RTREE=601, SAVEPOINT=602, SCHEDULE=603, SECURITY=604, SEQUENCE=605, SERVER=606, 
		SESSION=607, SHARE=608, SHARED=609, SIGNED=610, SIMPLE=611, SLAVE=612, 
		SLOW=613, SNAPSHOT=614, SOCKET=615, SOME=616, SONAME=617, SOUNDS=618, 
		SOURCE=619, SQL_AFTER_GTIDS=620, SQL_AFTER_MTS_GAPS=621, SQL_BEFORE_GTIDS=622, 
		SQL_BUFFER_RESULT=623, SQL_CACHE=624, SQL_NO_CACHE=625, SQL_THREAD=626, 
		START=627, STARTS=628, STATS_AUTO_RECALC=629, STATS_PERSISTENT=630, STATS_SAMPLE_PAGES=631, 
		STATUS=632, STOP=633, STORAGE=634, STORED=635, STRING=636, SUBCLASS_ORIGIN=637, 
		SUBJECT=638, SUBPARTITION=639, SUBPARTITIONS=640, SUSPEND=641, SWAPS=642, 
		SWITCHES=643, TABLE_NAME=644, TABLESPACE=645, TABLE_TYPE=646, TEMPORARY=647, 
		TEMPTABLE=648, THAN=649, TRADITIONAL=650, TRANSACTION=651, TRANSACTIONAL=652, 
		TRIGGERS=653, TRUNCATE=654, UNBOUNDED=655, UNDEFINED=656, UNDOFILE=657, 
		UNDO_BUFFER_SIZE=658, UNINSTALL=659, UNKNOWN=660, UNTIL=661, UPGRADE=662, 
		USER=663, USE_FRM=664, USER_RESOURCES=665, VALIDATION=666, VALUE=667, 
		VARIABLES=668, VIEW=669, VIRTUAL=670, VISIBLE=671, WAIT=672, WARNINGS=673, 
		WINDOW=674, WITHOUT=675, WORK=676, WRAPPER=677, X509=678, XA=679, XML=680, 
		YES=681, EUR=682, USA=683, JIS=684, ISO=685, INTERNAL=686, QUARTER=687, 
		MONTH=688, DAY=689, HOUR=690, MINUTE=691, WEEK=692, SECOND=693, MICROSECOND=694, 
		ADMIN=695, APPLICATION_PASSWORD_ADMIN=696, AUDIT_ADMIN=697, BACKUP_ADMIN=698, 
		BINLOG_ADMIN=699, BINLOG_ENCRYPTION_ADMIN=700, CLONE_ADMIN=701, CONNECTION_ADMIN=702, 
		ENCRYPTION_KEY_ADMIN=703, EXECUTE=704, FILE=705, FIREWALL_ADMIN=706, FIREWALL_USER=707, 
		FLUSH_OPTIMIZER_COSTS=708, FLUSH_STATUS=709, FLUSH_TABLES=710, FLUSH_USER_RESOURCES=711, 
		GROUP_REPLICATION_ADMIN=712, INNODB_REDO_LOG_ARCHIVE=713, INNODB_REDO_LOG_ENABLE=714, 
		INVOKE=715, LAMBDA=716, NDB_STORED_USER=717, PASSWORDLESS_USER_ADMIN=718, 
		PERSIST_RO_VARIABLES_ADMIN=719, PRIVILEGES=720, PROCESS=721, RELOAD=722, 
		REPLICATION_APPLIER=723, REPLICATION_SLAVE_ADMIN=724, RESOURCE_GROUP_ADMIN=725, 
		RESOURCE_GROUP_USER=726, ROLE_ADMIN=727, ROUTINE=728, S3=729, SERVICE_CONNECTION_ADMIN=730, 
		SESSION_VARIABLES_ADMIN=731, SET_USER_ID=732, SHOW_ROUTINE=733, SHUTDOWN=734, 
		SUPER=735, SYSTEM_VARIABLES_ADMIN=736, TABLES=737, TABLE_ENCRYPTION_ADMIN=738, 
		VERSION_TOKEN_ADMIN=739, XA_RECOVER_ADMIN=740, ARMSCII8=741, ASCII=742, 
		BIG5=743, CP1250=744, CP1251=745, CP1256=746, CP1257=747, CP850=748, CP852=749, 
		CP866=750, CP932=751, DEC8=752, EUCJPMS=753, EUCKR=754, GB18030=755, GB2312=756, 
		GBK=757, GEOSTD8=758, GREEK=759, HEBREW=760, HP8=761, KEYBCS2=762, KOI8R=763, 
		KOI8U=764, LATIN1=765, LATIN2=766, LATIN5=767, LATIN7=768, MACCE=769, 
		MACROMAN=770, SJIS=771, SWE7=772, TIS620=773, UCS2=774, UJIS=775, UTF16=776, 
		UTF16LE=777, UTF32=778, UTF8=779, UTF8MB3=780, UTF8MB4=781, ARCHIVE=782, 
		BLACKHOLE=783, CSV=784, FEDERATED=785, INNODB=786, MEMORY=787, MRG_MYISAM=788, 
		MYISAM=789, NDB=790, NDBCLUSTER=791, PERFORMANCE_SCHEMA=792, TOKUDB=793, 
		REPEATABLE=794, COMMITTED=795, UNCOMMITTED=796, SERIALIZABLE=797, GEOMETRYCOLLECTION=798, 
		GEOMCOLLECTION=799, GEOMETRY=800, LINESTRING=801, MULTILINESTRING=802, 
		MULTIPOINT=803, MULTIPOLYGON=804, POINT=805, POLYGON=806, ABS=807, ACOS=808, 
		ADDDATE=809, ADDTIME=810, AES_DECRYPT=811, AES_ENCRYPT=812, AREA=813, 
		ASBINARY=814, ASIN=815, ASTEXT=816, ASWKB=817, ASWKT=818, ASYMMETRIC_DECRYPT=819, 
		ASYMMETRIC_DERIVE=820, ASYMMETRIC_ENCRYPT=821, ASYMMETRIC_SIGN=822, ASYMMETRIC_VERIFY=823, 
		ATAN=824, ATAN2=825, BENCHMARK=826, BIN=827, BIT_COUNT=828, BIT_LENGTH=829, 
		BUFFER=830, CATALOG_NAME=831, CEIL=832, CEILING=833, CENTROID=834, CHARACTER_LENGTH=835, 
		CHARSET=836, CHAR_LENGTH=837, COERCIBILITY=838, COLLATION=839, COMPRESS=840, 
		CONCAT=841, CONCAT_WS=842, CONNECTION_ID=843, CONV=844, CONVERT_TZ=845, 
		COS=846, COT=847, CRC32=848, CREATE_ASYMMETRIC_PRIV_KEY=849, CREATE_ASYMMETRIC_PUB_KEY=850, 
		CREATE_DH_PARAMETERS=851, CREATE_DIGEST=852, CROSSES=853, DATEDIFF=854, 
		DATE_FORMAT=855, DAYNAME=856, DAYOFMONTH=857, DAYOFWEEK=858, DAYOFYEAR=859, 
		DECODE=860, DEGREES=861, DES_DECRYPT=862, DES_ENCRYPT=863, DIMENSION=864, 
		DISJOINT=865, ELT=866, ENCODE=867, ENCRYPT=868, ENDPOINT=869, ENGINE_ATTRIBUTE=870, 
		ENVELOPE=871, EQUALS=872, EXP=873, EXPORT_SET=874, EXTERIORRING=875, EXTRACTVALUE=876, 
		FIELD=877, FIND_IN_SET=878, FLOOR=879, FORMAT=880, FOUND_ROWS=881, FROM_BASE64=882, 
		FROM_DAYS=883, FROM_UNIXTIME=884, GEOMCOLLFROMTEXT=885, GEOMCOLLFROMWKB=886, 
		GEOMETRYCOLLECTIONFROMTEXT=887, GEOMETRYCOLLECTIONFROMWKB=888, GEOMETRYFROMTEXT=889, 
		GEOMETRYFROMWKB=890, GEOMETRYN=891, GEOMETRYTYPE=892, GEOMFROMTEXT=893, 
		GEOMFROMWKB=894, GET_FORMAT=895, GET_LOCK=896, GLENGTH=897, GREATEST=898, 
		GTID_SUBSET=899, GTID_SUBTRACT=900, HEX=901, IFNULL=902, INET6_ATON=903, 
		INET6_NTOA=904, INET_ATON=905, INET_NTOA=906, INSTR=907, INTERIORRINGN=908, 
		INTERSECTS=909, ISCLOSED=910, ISEMPTY=911, ISNULL=912, ISSIMPLE=913, IS_FREE_LOCK=914, 
		IS_IPV4=915, IS_IPV4_COMPAT=916, IS_IPV4_MAPPED=917, IS_IPV6=918, IS_USED_LOCK=919, 
		LAST_INSERT_ID=920, LCASE=921, LEAST=922, LENGTH=923, LINEFROMTEXT=924, 
		LINEFROMWKB=925, LINESTRINGFROMTEXT=926, LINESTRINGFROMWKB=927, LN=928, 
		LOAD_FILE=929, LOCATE=930, LOG=931, LOG10=932, LOG2=933, LOWER=934, LPAD=935, 
		LTRIM=936, MAKEDATE=937, MAKETIME=938, MAKE_SET=939, MASTER_POS_WAIT=940, 
		MBRCONTAINS=941, MBRDISJOINT=942, MBREQUAL=943, MBRINTERSECTS=944, MBROVERLAPS=945, 
		MBRTOUCHES=946, MBRWITHIN=947, MD5=948, MLINEFROMTEXT=949, MLINEFROMWKB=950, 
		MONTHNAME=951, MPOINTFROMTEXT=952, MPOINTFROMWKB=953, MPOLYFROMTEXT=954, 
		MPOLYFROMWKB=955, MULTILINESTRINGFROMTEXT=956, MULTILINESTRINGFROMWKB=957, 
		MULTIPOINTFROMTEXT=958, MULTIPOINTFROMWKB=959, MULTIPOLYGONFROMTEXT=960, 
		MULTIPOLYGONFROMWKB=961, NAME_CONST=962, NULLIF=963, NUMGEOMETRIES=964, 
		NUMINTERIORRINGS=965, NUMPOINTS=966, OCT=967, OCTET_LENGTH=968, ORD=969, 
		OVERLAPS=970, PERIOD_ADD=971, PERIOD_DIFF=972, PI=973, POINTFROMTEXT=974, 
		POINTFROMWKB=975, POINTN=976, POLYFROMTEXT=977, POLYFROMWKB=978, POLYGONFROMTEXT=979, 
		POLYGONFROMWKB=980, POW=981, POWER=982, QUOTE=983, RADIANS=984, RAND=985, 
		RANDOM_BYTES=986, RELEASE_LOCK=987, REVERSE=988, ROUND=989, ROW_COUNT=990, 
		RPAD=991, RTRIM=992, SEC_TO_TIME=993, SECONDARY_ENGINE_ATTRIBUTE=994, 
		SESSION_USER=995, SHA=996, SHA1=997, SHA2=998, SCHEMA_NAME=999, SIGN=1000, 
		SIN=1001, SLEEP=1002, SOUNDEX=1003, SQL_THREAD_WAIT_AFTER_GTIDS=1004, 
		SQRT=1005, SRID=1006, STARTPOINT=1007, STRCMP=1008, STR_TO_DATE=1009, 
		ST_AREA=1010, ST_ASBINARY=1011, ST_ASTEXT=1012, ST_ASWKB=1013, ST_ASWKT=1014, 
		ST_BUFFER=1015, ST_CENTROID=1016, ST_CONTAINS=1017, ST_CROSSES=1018, ST_DIFFERENCE=1019, 
		ST_DIMENSION=1020, ST_DISJOINT=1021, ST_DISTANCE=1022, ST_ENDPOINT=1023, 
		ST_ENVELOPE=1024, ST_EQUALS=1025, ST_EXTERIORRING=1026, ST_GEOMCOLLFROMTEXT=1027, 
		ST_GEOMCOLLFROMTXT=1028, ST_GEOMCOLLFROMWKB=1029, ST_GEOMETRYCOLLECTIONFROMTEXT=1030, 
		ST_GEOMETRYCOLLECTIONFROMWKB=1031, ST_GEOMETRYFROMTEXT=1032, ST_GEOMETRYFROMWKB=1033, 
		ST_GEOMETRYN=1034, ST_GEOMETRYTYPE=1035, ST_GEOMFROMTEXT=1036, ST_GEOMFROMWKB=1037, 
		ST_INTERIORRINGN=1038, ST_INTERSECTION=1039, ST_INTERSECTS=1040, ST_ISCLOSED=1041, 
		ST_ISEMPTY=1042, ST_ISSIMPLE=1043, ST_LINEFROMTEXT=1044, ST_LINEFROMWKB=1045, 
		ST_LINESTRINGFROMTEXT=1046, ST_LINESTRINGFROMWKB=1047, ST_NUMGEOMETRIES=1048, 
		ST_NUMINTERIORRING=1049, ST_NUMINTERIORRINGS=1050, ST_NUMPOINTS=1051, 
		ST_OVERLAPS=1052, ST_POINTFROMTEXT=1053, ST_POINTFROMWKB=1054, ST_POINTN=1055, 
		ST_POLYFROMTEXT=1056, ST_POLYFROMWKB=1057, ST_POLYGONFROMTEXT=1058, ST_POLYGONFROMWKB=1059, 
		ST_SRID=1060, ST_STARTPOINT=1061, ST_SYMDIFFERENCE=1062, ST_TOUCHES=1063, 
		ST_UNION=1064, ST_WITHIN=1065, ST_X=1066, ST_Y=1067, SUBDATE=1068, SUBSTRING_INDEX=1069, 
		SUBTIME=1070, SYSTEM_USER=1071, TAN=1072, TIMEDIFF=1073, TIMESTAMPADD=1074, 
		TIMESTAMPDIFF=1075, TIME_FORMAT=1076, TIME_TO_SEC=1077, TOUCHES=1078, 
		TO_BASE64=1079, TO_DAYS=1080, TO_SECONDS=1081, UCASE=1082, UNCOMPRESS=1083, 
		UNCOMPRESSED_LENGTH=1084, UNHEX=1085, UNIX_TIMESTAMP=1086, UPDATEXML=1087, 
		UPPER=1088, UUID=1089, UUID_SHORT=1090, VALIDATE_PASSWORD_STRENGTH=1091, 
		VERSION=1092, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1093, WEEKDAY=1094, WEEKOFYEAR=1095, 
		WEIGHT_STRING=1096, WITHIN=1097, YEARWEEK=1098, Y_FUNCTION=1099, X_FUNCTION=1100, 
		VAR_ASSIGN=1101, PLUS_ASSIGN=1102, MINUS_ASSIGN=1103, MULT_ASSIGN=1104, 
		DIV_ASSIGN=1105, MOD_ASSIGN=1106, AND_ASSIGN=1107, XOR_ASSIGN=1108, OR_ASSIGN=1109, 
		STAR=1110, DIVIDE=1111, MODULE=1112, PLUS=1113, MINUS=1114, DIV=1115, 
		MOD=1116, EQUAL_SYMBOL=1117, GREATER_SYMBOL=1118, LESS_SYMBOL=1119, EXCLAMATION_SYMBOL=1120, 
		BIT_NOT_OP=1121, BIT_OR_OP=1122, BIT_AND_OP=1123, BIT_XOR_OP=1124, DOT=1125, 
		LR_BRACKET=1126, RR_BRACKET=1127, COMMA=1128, SEMI=1129, AT_SIGN=1130, 
		ZERO_DECIMAL=1131, ONE_DECIMAL=1132, TWO_DECIMAL=1133, SINGLE_QUOTE_SYMB=1134, 
		DOUBLE_QUOTE_SYMB=1135, REVERSE_QUOTE_SYMB=1136, COLON_SYMB=1137, CHARSET_REVERSE_QOUTE_STRING=1138, 
		FILESIZE_LITERAL=1139, START_NATIONAL_STRING_LITERAL=1140, STRING_LITERAL=1141, 
		DECIMAL_LITERAL=1142, HEXADECIMAL_LITERAL=1143, REAL_LITERAL=1144, NULL_SPEC_LITERAL=1145, 
		BIT_STRING=1146, STRING_CHARSET_NAME=1147, DOT_ID=1148, ID=1149, REVERSE_QUOTE_ID=1150, 
		STRING_USER_NAME=1151, IP_ADDRESS=1152, LOCAL_ID=1153, GLOBAL_ID=1154, 
		ERROR_RECONGNIGION=1155;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement_ = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createRole = 18, 
		RULE_createServer = 19, RULE_createTable = 20, RULE_createTablespaceInnodb = 21, 
		RULE_createTablespaceNdb = 22, RULE_createTrigger = 23, RULE_withClause = 24, 
		RULE_commonTableExpressions = 25, RULE_cteName = 26, RULE_cteColumnName = 27, 
		RULE_createView = 28, RULE_createDatabaseOption = 29, RULE_charSet = 30, 
		RULE_ownerStatement = 31, RULE_scheduleExpression = 32, RULE_timestampValue = 33, 
		RULE_intervalExpr = 34, RULE_intervalType = 35, RULE_enableType = 36, 
		RULE_indexType = 37, RULE_indexOption = 38, RULE_procedureParameter = 39, 
		RULE_functionParameter = 40, RULE_routineOption = 41, RULE_serverOption = 42, 
		RULE_createDefinitions = 43, RULE_createDefinition = 44, RULE_columnDefinition = 45, 
		RULE_columnConstraint = 46, RULE_tableConstraint = 47, RULE_referenceDefinition = 48, 
		RULE_referenceAction = 49, RULE_referenceControlType = 50, RULE_indexColumnDefinition = 51, 
		RULE_tableOption = 52, RULE_tableType = 53, RULE_tablespaceStorage = 54, 
		RULE_partitionDefinitions = 55, RULE_partitionFunctionDefinition = 56, 
		RULE_subpartitionFunctionDefinition = 57, RULE_partitionDefinition = 58, 
		RULE_partitionDefinerAtom = 59, RULE_partitionDefinerVector = 60, RULE_subpartitionDefinition = 61, 
		RULE_partitionOption = 62, RULE_alterDatabase = 63, RULE_alterEvent = 64, 
		RULE_alterFunction = 65, RULE_alterInstance = 66, RULE_alterLogfileGroup = 67, 
		RULE_alterProcedure = 68, RULE_alterServer = 69, RULE_alterTable = 70, 
		RULE_alterTablespace = 71, RULE_alterView = 72, RULE_alterSpecification = 73, 
		RULE_dropDatabase = 74, RULE_dropEvent = 75, RULE_dropIndex = 76, RULE_dropLogfileGroup = 77, 
		RULE_dropProcedure = 78, RULE_dropFunction = 79, RULE_dropServer = 80, 
		RULE_dropTable = 81, RULE_dropTablespace = 82, RULE_dropTrigger = 83, 
		RULE_dropView = 84, RULE_dropRole = 85, RULE_setRole = 86, RULE_renameTable = 87, 
		RULE_renameTableClause = 88, RULE_truncateTable = 89, RULE_callStatement = 90, 
		RULE_deleteStatement = 91, RULE_doStatement = 92, RULE_handlerStatement = 93, 
		RULE_insertStatement = 94, RULE_loadDataStatement = 95, RULE_loadXmlStatement = 96, 
		RULE_replaceStatement = 97, RULE_selectStatement = 98, RULE_updateStatement = 99, 
		RULE_valuesStatement = 100, RULE_insertStatementValue = 101, RULE_updatedElement = 102, 
		RULE_assignmentField = 103, RULE_lockClause = 104, RULE_singleDeleteStatement = 105, 
		RULE_multipleDeleteStatement = 106, RULE_handlerOpenStatement = 107, RULE_handlerReadIndexStatement = 108, 
		RULE_handlerReadStatement = 109, RULE_handlerCloseStatement = 110, RULE_singleUpdateStatement = 111, 
		RULE_multipleUpdateStatement = 112, RULE_orderByClause = 113, RULE_orderByExpression = 114, 
		RULE_tableSources = 115, RULE_tableSource = 116, RULE_tableSourceItem = 117, 
		RULE_indexHint = 118, RULE_indexHintType = 119, RULE_joinPart = 120, RULE_queryExpression = 121, 
		RULE_queryExpressionNointo = 122, RULE_querySpecification = 123, RULE_querySpecificationNointo = 124, 
		RULE_unionParenthesis = 125, RULE_unionStatement = 126, RULE_lateralStatement = 127, 
		RULE_jsonTable = 128, RULE_jsonColumnList = 129, RULE_jsonColumn = 130, 
		RULE_jsonOnEmpty = 131, RULE_jsonOnError = 132, RULE_selectSpec = 133, 
		RULE_selectElements = 134, RULE_selectElement = 135, RULE_selectIntoExpression = 136, 
		RULE_selectFieldsInto = 137, RULE_selectLinesInto = 138, RULE_fromClause = 139, 
		RULE_groupByClause = 140, RULE_havingClause = 141, RULE_windowClause = 142, 
		RULE_groupByItem = 143, RULE_limitClause = 144, RULE_limitClauseAtom = 145, 
		RULE_startTransaction = 146, RULE_beginWork = 147, RULE_commitWork = 148, 
		RULE_rollbackWork = 149, RULE_savepointStatement = 150, RULE_rollbackStatement = 151, 
		RULE_releaseStatement = 152, RULE_lockTables = 153, RULE_unlockTables = 154, 
		RULE_setAutocommitStatement = 155, RULE_setTransactionStatement = 156, 
		RULE_transactionMode = 157, RULE_lockTableElement = 158, RULE_lockAction = 159, 
		RULE_transactionOption = 160, RULE_transactionLevel = 161, RULE_changeMaster = 162, 
		RULE_changeReplicationFilter = 163, RULE_purgeBinaryLogs = 164, RULE_resetMaster = 165, 
		RULE_resetSlave = 166, RULE_startSlave = 167, RULE_stopSlave = 168, RULE_startGroupReplication = 169, 
		RULE_stopGroupReplication = 170, RULE_masterOption = 171, RULE_stringMasterOption = 172, 
		RULE_decimalMasterOption = 173, RULE_boolMasterOption = 174, RULE_channelOption = 175, 
		RULE_replicationFilter = 176, RULE_tablePair = 177, RULE_threadType = 178, 
		RULE_untilOption = 179, RULE_connectionOption = 180, RULE_gtuidSet = 181, 
		RULE_xaStartTransaction = 182, RULE_xaEndTransaction = 183, RULE_xaPrepareStatement = 184, 
		RULE_xaCommitWork = 185, RULE_xaRollbackWork = 186, RULE_xaRecoverWork = 187, 
		RULE_prepareStatement = 188, RULE_executeStatement = 189, RULE_deallocatePrepare = 190, 
		RULE_routineBody = 191, RULE_blockStatement = 192, RULE_caseStatement = 193, 
		RULE_ifStatement = 194, RULE_iterateStatement = 195, RULE_leaveStatement = 196, 
		RULE_loopStatement = 197, RULE_repeatStatement = 198, RULE_returnStatement = 199, 
		RULE_whileStatement = 200, RULE_cursorStatement = 201, RULE_declareVariable = 202, 
		RULE_declareCondition = 203, RULE_declareCursor = 204, RULE_declareHandler = 205, 
		RULE_handlerConditionValue = 206, RULE_procedureSqlStatement = 207, RULE_caseAlternative = 208, 
		RULE_elifAlternative = 209, RULE_alterUser = 210, RULE_createUser = 211, 
		RULE_dropUser = 212, RULE_grantStatement = 213, RULE_roleOption = 214, 
		RULE_grantProxy = 215, RULE_renameUser = 216, RULE_revokeStatement = 217, 
		RULE_revokeProxy = 218, RULE_setPasswordStatement = 219, RULE_userSpecification = 220, 
		RULE_userAuthOption = 221, RULE_authenticationRule = 222, RULE_tlsOption = 223, 
		RULE_userResourceOption = 224, RULE_userPasswordOption = 225, RULE_userLockOption = 226, 
		RULE_privelegeClause = 227, RULE_privilege = 228, RULE_privilegeLevel = 229, 
		RULE_renameUserClause = 230, RULE_analyzeTable = 231, RULE_checkTable = 232, 
		RULE_checksumTable = 233, RULE_optimizeTable = 234, RULE_repairTable = 235, 
		RULE_checkTableOption = 236, RULE_createUdfunction = 237, RULE_installPlugin = 238, 
		RULE_uninstallPlugin = 239, RULE_setStatement = 240, RULE_showStatement = 241, 
		RULE_variableClause = 242, RULE_showCommonEntity = 243, RULE_showFilter = 244, 
		RULE_showGlobalInfoClause = 245, RULE_showSchemaEntity = 246, RULE_showProfileType = 247, 
		RULE_binlogStatement = 248, RULE_cacheIndexStatement = 249, RULE_flushStatement = 250, 
		RULE_killStatement = 251, RULE_loadIndexIntoCache = 252, RULE_resetStatement = 253, 
		RULE_shutdownStatement = 254, RULE_tableIndexes = 255, RULE_flushOption = 256, 
		RULE_flushTableOption = 257, RULE_loadedTableIndexes = 258, RULE_simpleDescribeStatement = 259, 
		RULE_fullDescribeStatement = 260, RULE_helpStatement = 261, RULE_useStatement = 262, 
		RULE_signalStatement = 263, RULE_resignalStatement = 264, RULE_signalConditionInformation = 265, 
		RULE_diagnosticsStatement = 266, RULE_diagnosticsConditionInformationName = 267, 
		RULE_describeObjectClause = 268, RULE_fullId = 269, RULE_tableName = 270, 
		RULE_roleName = 271, RULE_fullColumnName = 272, RULE_indexColumnName = 273, 
		RULE_userName = 274, RULE_mysqlVariable = 275, RULE_charsetName = 276, 
		RULE_collationName = 277, RULE_engineName = 278, RULE_uuidSet = 279, RULE_xid = 280, 
		RULE_xuidStringId = 281, RULE_authPlugin = 282, RULE_uid = 283, RULE_simpleId = 284, 
		RULE_dottedId = 285, RULE_decimalLiteral = 286, RULE_fileSizeLiteral = 287, 
		RULE_stringLiteral = 288, RULE_booleanLiteral = 289, RULE_hexadecimalLiteral = 290, 
		RULE_nullNotnull = 291, RULE_constant = 292, RULE_dataType = 293, RULE_collectionOptions = 294, 
		RULE_convertedDataType = 295, RULE_lengthOneDimension = 296, RULE_lengthTwoDimension = 297, 
		RULE_lengthTwoOptionalDimension = 298, RULE_uidList = 299, RULE_fullColumnNameList = 300, 
		RULE_tables = 301, RULE_indexColumnNames = 302, RULE_expressions = 303, 
		RULE_expressionsWithDefaults = 304, RULE_constants = 305, RULE_simpleStrings = 306, 
		RULE_userVariables = 307, RULE_defaultValue = 308, RULE_currentTimestamp = 309, 
		RULE_expressionOrDefault = 310, RULE_ifExists = 311, RULE_ifNotExists = 312, 
		RULE_orReplace = 313, RULE_waitNowaitClause = 314, RULE_functionCall = 315, 
		RULE_specificFunction = 316, RULE_caseFuncAlternative = 317, RULE_levelsInWeightString = 318, 
		RULE_levelInWeightListElement = 319, RULE_aggregateWindowedFunction = 320, 
		RULE_nonAggregateWindowedFunction = 321, RULE_overClause = 322, RULE_windowSpec = 323, 
		RULE_windowName = 324, RULE_frameClause = 325, RULE_frameUnits = 326, 
		RULE_frameExtent = 327, RULE_frameBetween = 328, RULE_frameRange = 329, 
		RULE_partitionClause = 330, RULE_scalarFunctionName = 331, RULE_passwordFunctionClause = 332, 
		RULE_functionArgs = 333, RULE_functionArg = 334, RULE_expression = 335, 
		RULE_predicate = 336, RULE_expressionAtom = 337, RULE_unaryOperator = 338, 
		RULE_comparisonOperator = 339, RULE_logicalOperator = 340, RULE_bitOperator = 341, 
		RULE_mathOperator = 342, RULE_jsonOperator = 343, RULE_charsetNameBase = 344, 
		RULE_transactionLevelBase = 345, RULE_privilegesBase = 346, RULE_intervalTypeBase = 347, 
		RULE_dataTypeBase = 348, RULE_keywordsCanBeId = 349, RULE_functionNameBase = 350;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement", 
			"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
			"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
			"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
			"createFunction", "createRole", "createServer", "createTable", "createTablespaceInnodb", 
			"createTablespaceNdb", "createTrigger", "withClause", "commonTableExpressions", 
			"cteName", "cteColumnName", "createView", "createDatabaseOption", "charSet", 
			"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
			"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
			"functionParameter", "routineOption", "serverOption", "createDefinitions", 
			"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
			"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
			"tableOption", "tableType", "tablespaceStorage", "partitionDefinitions", 
			"partitionFunctionDefinition", "subpartitionFunctionDefinition", "partitionDefinition", 
			"partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", 
			"partitionOption", "alterDatabase", "alterEvent", "alterFunction", "alterInstance", 
			"alterLogfileGroup", "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
			"alterView", "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
			"dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable", 
			"dropTablespace", "dropTrigger", "dropView", "dropRole", "setRole", "renameTable", 
			"renameTableClause", "truncateTable", "callStatement", "deleteStatement", 
			"doStatement", "handlerStatement", "insertStatement", "loadDataStatement", 
			"loadXmlStatement", "replaceStatement", "selectStatement", "updateStatement", 
			"valuesStatement", "insertStatementValue", "updatedElement", "assignmentField", 
			"lockClause", "singleDeleteStatement", "multipleDeleteStatement", "handlerOpenStatement", 
			"handlerReadIndexStatement", "handlerReadStatement", "handlerCloseStatement", 
			"singleUpdateStatement", "multipleUpdateStatement", "orderByClause", 
			"orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
			"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
			"querySpecification", "querySpecificationNointo", "unionParenthesis", 
			"unionStatement", "lateralStatement", "jsonTable", "jsonColumnList", 
			"jsonColumn", "jsonOnEmpty", "jsonOnError", "selectSpec", "selectElements", 
			"selectElement", "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
			"fromClause", "groupByClause", "havingClause", "windowClause", "groupByItem", 
			"limitClause", "limitClauseAtom", "startTransaction", "beginWork", "commitWork", 
			"rollbackWork", "savepointStatement", "rollbackStatement", "releaseStatement", 
			"lockTables", "unlockTables", "setAutocommitStatement", "setTransactionStatement", 
			"transactionMode", "lockTableElement", "lockAction", "transactionOption", 
			"transactionLevel", "changeMaster", "changeReplicationFilter", "purgeBinaryLogs", 
			"resetMaster", "resetSlave", "startSlave", "stopSlave", "startGroupReplication", 
			"stopGroupReplication", "masterOption", "stringMasterOption", "decimalMasterOption", 
			"boolMasterOption", "channelOption", "replicationFilter", "tablePair", 
			"threadType", "untilOption", "connectionOption", "gtuidSet", "xaStartTransaction", 
			"xaEndTransaction", "xaPrepareStatement", "xaCommitWork", "xaRollbackWork", 
			"xaRecoverWork", "prepareStatement", "executeStatement", "deallocatePrepare", 
			"routineBody", "blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
			"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
			"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
			"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
			"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
			"grantStatement", "roleOption", "grantProxy", "renameUser", "revokeStatement", 
			"revokeProxy", "setPasswordStatement", "userSpecification", "userAuthOption", 
			"authenticationRule", "tlsOption", "userResourceOption", "userPasswordOption", 
			"userLockOption", "privelegeClause", "privilege", "privilegeLevel", "renameUserClause", 
			"analyzeTable", "checkTable", "checksumTable", "optimizeTable", "repairTable", 
			"checkTableOption", "createUdfunction", "installPlugin", "uninstallPlugin", 
			"setStatement", "showStatement", "variableClause", "showCommonEntity", 
			"showFilter", "showGlobalInfoClause", "showSchemaEntity", "showProfileType", 
			"binlogStatement", "cacheIndexStatement", "flushStatement", "killStatement", 
			"loadIndexIntoCache", "resetStatement", "shutdownStatement", "tableIndexes", 
			"flushOption", "flushTableOption", "loadedTableIndexes", "simpleDescribeStatement", 
			"fullDescribeStatement", "helpStatement", "useStatement", "signalStatement", 
			"resignalStatement", "signalConditionInformation", "diagnosticsStatement", 
			"diagnosticsConditionInformationName", "describeObjectClause", "fullId", 
			"tableName", "roleName", "fullColumnName", "indexColumnName", "userName", 
			"mysqlVariable", "charsetName", "collationName", "engineName", "uuidSet", 
			"xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
			"fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
			"nullNotnull", "constant", "dataType", "collectionOptions", "convertedDataType", 
			"lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
			"uidList", "fullColumnNameList", "tables", "indexColumnNames", "expressions", 
			"expressionsWithDefaults", "constants", "simpleStrings", "userVariables", 
			"defaultValue", "currentTimestamp", "expressionOrDefault", "ifExists", 
			"ifNotExists", "orReplace", "waitNowaitClause", "functionCall", "specificFunction", 
			"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
			"aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", 
			"windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", 
			"frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
			"passwordFunctionClause", "functionArgs", "functionArg", "expression", 
			"predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
			"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
			"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
			"keywordsCanBeId", "functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'ATTRIBUTE'", "'BEFORE'", 
			"'BETWEEN'", "'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", 
			"'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", 
			"'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", 
			"'CROSS'", "'CURRENT'", "'CURRENT_ROLE'", "'CURRENT_USER'", "'CURSOR'", 
			"'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", 
			"'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", 
			"'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", 
			"'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", 
			"'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", 
			"'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", 
			"'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", "'IN'", "'INDEX'", "'INFILE'", 
			"'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", 
			"'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LATERAL'", "'LEADING'", "'LEAVE'", 
			"'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", 
			"'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
			"'MATCH'", "'MAXVALUE'", "'MINVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", 
			"'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", 
			"'OPTIONAL'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", 
			"'OUTFILE'", "'OVER'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
			"'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
			"'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", 
			"'RETAIN'", "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", 
			"'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", 
			"'SKIP'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", 
			"'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", 
			"'STACKED'", "'STARTING'", "'STATEMENT'", "'STRAIGHT_JOIN'", "'TABLE'", 
			"'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", 
			"'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
			"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
			"'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
			"'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
			"'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", 
			"'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
			"'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", 
			"'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", 
			"'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
			"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
			"'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
			"'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'", "'JSON_ARRAY_APPEND'", 
			"'JSON_ARRAY_INSERT'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_DEPTH'", 
			"'JSON_EXTRACT'", "'JSON_INSERT'", "'JSON_KEYS'", "'JSON_LENGTH'", "'JSON_MERGE'", 
			"'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", 
			"'JSON_OVERLAPS'", "'JSON_PRETTY'", "'JSON_QUOTE'", "'JSON_REMOVE'", 
			"'JSON_REPLACE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
			"'JSON_SEARCH'", "'JSON_SET'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", 
			"'JSON_TABLE'", "'JSON_TYPE'", "'JSON_UNQUOTE'", "'JSON_VALID'", "'JSON_VALUE'", 
			"'NESTED'", "'ORDINALITY'", "'PATH'", "'AVG'", "'BIT_AND'", "'BIT_OR'", 
			"'BIT_XOR'", "'COUNT'", "'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", 
			"'GROUP_CONCAT'", "'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", 
			"'NTILE'", "'NTH_VALUE'", "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", 
			"'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", 
			"'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
			"'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", 
			"'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", 
			"'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", 
			"'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", 
			"'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", 
			"'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", 
			"'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", 
			"'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", 
			"'CLIENT'", "'CLOSE'", "'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'", 
			"'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
			"'COMPLETION'", "'COMPRESSED'", null, "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", 
			"'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
			"'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CYCLE'", 
			"'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
			"'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", 
			"'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
			"'ENABLE'", "'ENCRYPTED'", "'ENCRYPTION'", "'ENCRYPTION_KEY_ID'", "'END'", 
			"'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", 
			"'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
			"'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAILED_LOGIN_ATTEMPTS'", 
			"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
			"'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", 
			"'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", 
			"'HANDLER'", "'HASH'", "'HELP'", "'HISTORY'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", 
			"'IGNORE_SERVER_IDS'", "'IMPORT'", "'INCREMENT'", "'INDEXES'", "'INITIAL_SIZE'", 
			"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INSTANT'", 
			"'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", 
			"'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", 
			"'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
			"'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", 
			"'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
			"'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", 
			"'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", 
			"'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
			"'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
			"'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", 
			"'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", 
			"'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", 
			"'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NOCACHE'", 
			"'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", "'NOMINVALUE'", "'NOWAIT'", 
			"'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", 
			"'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
			"'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PAGE_COMPRESSED'", 
			"'PAGE_COMPRESSION_LEVEL'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", 
			"'PARTITIONS'", "'PASSWORD'", "'PASSWORD_LOCK_TIME'", "'PHASE'", "'PLUGIN'", 
			"'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", 
			"'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
			"'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", 
			"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
			"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
			"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
			"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
			"'RESET'", "'RESTART'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", 
			"'RETURNS'", "'REUSE'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
			"'ROW'", "'ROWS'", "'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", 
			"'SECURITY'", "'SEQUENCE'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", 
			"'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", 
			"'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
			"'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
			"'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
			"'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
			"'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
			"'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
			"'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
			"'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", 
			"'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", 
			"'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
			"'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
			"'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
			"'XA'", "'XML'", "'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", 
			"'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", 
			"'MICROSECOND'", "'ADMIN'", "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ADMIN'", 
			"'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", 
			"'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'EXECUTE'", "'FILE'", 
			"'FIREWALL_ADMIN'", "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", 
			"'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", 
			"'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", "'INVOKE'", 
			"'LAMBDA'", "'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", "'PERSIST_RO_VARIABLES_ADMIN'", 
			"'PRIVILEGES'", "'PROCESS'", "'RELOAD'", "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", 
			"'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'ROUTINE'", 
			"'S3'", "'SERVICE_CONNECTION_ADMIN'", null, "'SET_USER_ID'", "'SHOW_ROUTINE'", 
			"'SHUTDOWN'", "'SUPER'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLES'", "'TABLE_ENCRYPTION_ADMIN'", 
			"'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
			"'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", 
			"'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB18030'", 
			"'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", 
			"'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", 
			"'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", 
			"'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", 
			"'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", 
			"'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
			"'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
			"'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", 
			"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
			"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
			"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
			"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
			"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
			"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
			"'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", 
			"'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", 
			"'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
			"'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", 
			"'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
			"'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", 
			"'GREATEST'", "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", 
			"'INET6_ATON'", "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
			"'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", 
			"'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
			"'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
			"'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", 
			"'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
			"'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", 
			"'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
			"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
			"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
			"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
			"'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", 
			"'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", 
			"'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
			"ATTRIBUTE", "BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", 
			"CASE", "CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", 
			"CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", 
			"CURRENT", "CURRENT_ROLE", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
			"DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
			"DIAGNOSTICS", "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", 
			"EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", "EXIT", "EXPLAIN", 
			"FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", 
			"GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "HISTOGRAM", "IF", 
			"IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", 
			"INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LATERAL", 
			"LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", 
			"LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
			"MATCH", "MAXVALUE", "MINVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
			"NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", 
			"OR", "ORDER", "OUT", "OUTER", "OUTFILE", "OVER", "PARTITION", "PRIMARY", 
			"PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", 
			"RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", 
			"RETAIN", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", 
			"SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", "SKIP_", "SPATIAL", "SQL", 
			"SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
			"SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", "STATEMENT", "STRAIGHT_JOIN", 
			"TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", 
			"UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", 
			"VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", 
			"TINYINT", "SMALLINT", "MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", 
			"INT3", "INT4", "INT8", "INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", 
			"FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", 
			"TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", 
			"BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", 
			"TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", 
			"YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", 
			"HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", 
			"HOUR_MICROSECOND", "DAY_MICROSECOND", "JSON_ARRAY", "JSON_ARRAYAGG", 
			"JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_CONTAINS", "JSON_CONTAINS_PATH", 
			"JSON_DEPTH", "JSON_EXTRACT", "JSON_INSERT", "JSON_KEYS", "JSON_LENGTH", 
			"JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_OBJECT", 
			"JSON_OBJECTAGG", "JSON_OVERLAPS", "JSON_PRETTY", "JSON_QUOTE", "JSON_REMOVE", 
			"JSON_REPLACE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
			"JSON_SEARCH", "JSON_SET", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", 
			"JSON_TABLE", "JSON_TYPE", "JSON_UNQUOTE", "JSON_VALID", "JSON_VALUE", 
			"NESTED", "ORDINALITY", "PATH", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", 
			"COUNT", "CUME_DIST", "DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", 
			"LAST_VALUE", "LEAD", "MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", 
			"RANK", "ROW_NUMBER", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", 
			"VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", 
			"LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", 
			"TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", 
			"AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", 
			"AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", 
			"BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", 
			"CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", 
			"CLIENT", "CLOSE", "CLUSTERING", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", 
			"COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", 
			"COMPRESSION", "CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
			"CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
			"COPY", "CPU", "CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", 
			"DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", 
			"DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", 
			"ENABLE", "ENCRYPTED", "ENCRYPTION", "ENCRYPTION_KEY_ID", "END", "ENDS", 
			"ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", 
			"EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
			"FAILED_LOGIN_ATTEMPTS", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", 
			"FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", "FOUND", 
			"FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
			"HANDLER", "HASH", "HELP", "HISTORY", "HOST", "HOSTS", "IDENTIFIED", 
			"IGNORE_SERVER_IDS", "IMPORT", "INCREMENT", "INDEXES", "INITIAL_SIZE", 
			"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", 
			"INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
			"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
			"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
			"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
			"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
			"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
			"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
			"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
			"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
			"MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
			"MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", 
			"NEVER", "NEXT", "NO", "NOCACHE", "NOCOPY", "NOCYCLE", "NOMAXVALUE", 
			"NOMINVALUE", "NOWAIT", "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", 
			"OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
			"OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PAGE_COMPRESSED", "PAGE_COMPRESSION_LEVEL", 
			"PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PASSWORD_LOCK_TIME", 
			"PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", 
			"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", 
			"PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", 
			"REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", 
			"REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
			"REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
			"REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
			"RESET", "RESTART", "RESUME", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", 
			"REUSE", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", 
			"RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SEQUENCE", "SERVER", "SESSION", 
			"SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", 
			"SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
			"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
			"SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
			"STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
			"SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
			"SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", 
			"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", 
			"TRUNCATE", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
			"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
			"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
			"WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", 
			"YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
			"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "ADMIN", "APPLICATION_PASSWORD_ADMIN", 
			"AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
			"CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "EXECUTE", 
			"FILE", "FIREWALL_ADMIN", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", 
			"FLUSH_TABLES", "FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
			"INNODB_REDO_LOG_ENABLE", "INVOKE", "LAMBDA", "NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", 
			"PERSIST_RO_VARIABLES_ADMIN", "PRIVILEGES", "PROCESS", "RELOAD", "REPLICATION_APPLIER", 
			"REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", 
			"ROLE_ADMIN", "ROUTINE", "S3", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
			"SET_USER_ID", "SHOW_ROUTINE", "SHUTDOWN", "SUPER", "SYSTEM_VARIABLES_ADMIN", 
			"TABLES", "TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
			"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
			"CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", 
			"GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", 
			"KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
			"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
			"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
			"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
			"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
			"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
			"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
			"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
			"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
			"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
			"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
			"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
			"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
			"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
			"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
			"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
			"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
			"GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
			"GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", 
			"GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "IFNULL", 
			"INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
			"INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", 
			"IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK", 
			"LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
			"LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", "LOCATE", 
			"LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME", 
			"MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", 
			"MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
			"MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", 
			"MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", 
			"MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", 
			"NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
			"OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
			"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
			"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
			"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
			"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
			"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
			"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
			"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
			"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
			"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
			"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
			"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
			"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
			"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
			"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
			"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
			"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
			"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
			"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
			"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
			"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
			"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
			"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", 
			"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
			"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
			"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
			"X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
			"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", 
			"STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", 
			"GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", 
			"BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", 
			"COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", 
			"SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", 
			"CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
			"STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
			"NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", 
			"REVERSE_QUOTE_ID", "STRING_USER_NAME", "IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", 
			"ERROR_RECONGNIGION"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "java-escape"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2308217963004560000L) != 0 || (((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 2306124490637066243L) != 0 || (((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 747667907330603L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & 36099165796700291L) != 0 || (((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & 16782337L) != 0 || (((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & 17730162917377L) != 0 || (((_la - 627)) & ~0x3f) == 0 && ((1L << (_la - 627)) & 4503604056555585L) != 0 || _la==EXECUTE || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(702);
				sqlStatements();
				}
			}

			setState(707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS) {
				{
				setState(705);
				match(MINUS);
				setState(706);
				match(MINUS);
				}
			}

			setState(709);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatement_Context> emptyStatement_() {
			return getRuleContexts(EmptyStatement_Context.class);
		}
		public EmptyStatement_Context emptyStatement_(int i) {
			return getRuleContext(EmptyStatement_Context.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(722);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(720);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case VALUES:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(711);
						sqlStatement();
						setState(714);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUS) {
							{
							setState(712);
							match(MINUS);
							setState(713);
							match(MINUS);
							}
						}

						setState(717);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(716);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(719);
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(724);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(734);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case VALUES:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(725);
				sqlStatement();
				setState(731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(728);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUS) {
						{
						setState(726);
						match(MINUS);
						setState(727);
						match(MINUS);
						}
					}

					setState(730);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(733);
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(743);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(736);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(737);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(738);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(739);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(740);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(741);
				administrationStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(742);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EmptyStatement_Context extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEmptyStatement_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEmptyStatement_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEmptyStatement_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatement_Context emptyStatement_() throws RecognitionException {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(745);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterInstanceContext alterInstance() {
			return getRuleContext(AlterInstanceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public SetRoleContext setRole() {
			return getRuleContext(SetRoleContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDdlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(747);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(748);
				createEvent();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(749);
				createIndex();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(750);
				createLogfileGroup();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(751);
				createProcedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(752);
				createFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(753);
				createServer();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(754);
				createTable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(755);
				createTablespaceInnodb();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(756);
				createTablespaceNdb();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(757);
				createTrigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(758);
				createView();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(759);
				createRole();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(760);
				alterDatabase();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(761);
				alterEvent();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(762);
				alterFunction();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(763);
				alterInstance();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(764);
				alterLogfileGroup();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(765);
				alterProcedure();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(766);
				alterServer();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(767);
				alterTable();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(768);
				alterTablespace();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(769);
				alterView();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(770);
				dropDatabase();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(771);
				dropEvent();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(772);
				dropIndex();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(773);
				dropLogfileGroup();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(774);
				dropProcedure();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(775);
				dropFunction();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(776);
				dropServer();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(777);
				dropTable();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(778);
				dropTablespace();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(779);
				dropTrigger();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(780);
				dropView();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(781);
				dropRole();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(782);
				setRole();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(783);
				renameTable();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(784);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return getRuleContext(LoadDataStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public ValuesStatementContext valuesStatement() {
			return getRuleContext(ValuesStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(798);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(787);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(788);
				insertStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(789);
				updateStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(790);
				deleteStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(791);
				replaceStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(792);
				callStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(793);
				loadDataStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(794);
				loadXmlStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(795);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(796);
				handlerStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(797);
				valuesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesContext lockTables() {
			return getRuleContext(LockTablesContext.class,0);
		}
		public UnlockTablesContext unlockTables() {
			return getRuleContext(UnlockTablesContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transactionStatement);
		try {
			setState(809);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(800);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(801);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(802);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(803);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(804);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(805);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(806);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(807);
				lockTables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(808);
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplicationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationStatement);
		try {
			setState(826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(811);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(812);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(813);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(814);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(815);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(816);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(817);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(818);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(819);
				stopGroupReplication();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(820);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(821);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(822);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(823);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(824);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(825);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPreparedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPreparedStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_preparedStatement);
		try {
			setState(831);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(828);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(829);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(830);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompoundStatementContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compoundStatement);
		try {
			setState(843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(833);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(834);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(835);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(836);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(837);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(838);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(839);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(840);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(841);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(842);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAdministrationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAdministrationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administrationStatement);
		try {
			setState(870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(845);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(846);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(847);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(848);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(849);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(850);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(851);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(852);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(853);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(854);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(855);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(856);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(857);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(858);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(859);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(860);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(861);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(862);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(863);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(864);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(865);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(866);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(867);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(868);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(869);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public DiagnosticsStatementContext diagnosticsStatement() {
			return getRuleContext(DiagnosticsStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUtilityStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUtilityStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utilityStatement);
		try {
			setState(879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(872);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(873);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(874);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(875);
				useStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(876);
				signalStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(877);
				resignalStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(878);
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(881);
			match(CREATE);
			setState(882);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(883);
				ifNotExists();
				}
				break;
			}
			setState(886);
			uid();
			setState(890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398214283264L) != 0 || _la==READ || _la==CHAR || _la==ENCRYPTION || _la==CHARSET) {
				{
				{
				setState(887);
				createDatabaseOption();
				}
				}
				setState(892);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(893);
			match(CREATE);
			setState(895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(894);
				ownerStatement();
				}
			}

			setState(897);
			match(EVENT);
			setState(899);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(898);
				ifNotExists();
				}
				break;
			}
			setState(901);
			fullId();
			setState(902);
			match(ON);
			setState(903);
			match(SCHEDULE);
			setState(904);
			scheduleExpression();
			setState(911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(905);
				match(ON);
				setState(906);
				match(COMPLETION);
				setState(908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(907);
					match(NOT);
					}
				}

				setState(910);
				match(PRESERVE);
				}
			}

			setState(914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(913);
				enableType();
				}
			}

			setState(918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(916);
				match(COMMENT);
				setState(917);
				match(STRING_LITERAL);
				}
			}

			setState(920);
			match(DO);
			setState(921);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(923);
			match(CREATE);
			setState(925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(924);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(927);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(930);
			match(INDEX);
			setState(931);
			uid();
			setState(933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(932);
				indexType();
				}
			}

			setState(935);
			match(ON);
			setState(936);
			tableName();
			setState(937);
			indexColumnNames();
			setState(941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
				{
				{
				setState(938);
				indexOption();
				}
				}
				setState(943);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(956);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(954);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(944);
						match(ALGORITHM);
						setState(946);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(945);
							match(EQUAL_SYMBOL);
							}
						}

						setState(948);
						((CreateIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(949);
						match(LOCK);
						setState(951);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(950);
							match(EQUAL_SYMBOL);
							}
						}

						setState(953);
						((CreateIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(958);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public Token undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(959);
			match(CREATE);
			setState(960);
			match(LOGFILE);
			setState(961);
			match(GROUP);
			setState(962);
			uid();
			setState(963);
			match(ADD);
			setState(964);
			match(UNDOFILE);
			setState(965);
			((CreateLogfileGroupContext)_localctx).undoFile = match(STRING_LITERAL);
			setState(971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(966);
				match(INITIAL_SIZE);
				setState(968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(967);
					match(EQUAL_SYMBOL);
					}
				}

				setState(970);
				((CreateLogfileGroupContext)_localctx).initSize = fileSizeLiteral();
				}
			}

			setState(978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(973);
				match(UNDO_BUFFER_SIZE);
				setState(975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(974);
					match(EQUAL_SYMBOL);
					}
				}

				setState(977);
				((CreateLogfileGroupContext)_localctx).undoSize = fileSizeLiteral();
				}
			}

			setState(985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(980);
				match(REDO_BUFFER_SIZE);
				setState(982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(981);
					match(EQUAL_SYMBOL);
					}
				}

				setState(984);
				((CreateLogfileGroupContext)_localctx).redoSize = fileSizeLiteral();
				}
			}

			setState(992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(987);
				match(NODEGROUP);
				setState(989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(988);
					match(EQUAL_SYMBOL);
					}
				}

				setState(991);
				uid();
				}
			}

			setState(995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(994);
				match(WAIT);
				}
			}

			setState(1002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(997);
				match(COMMENT);
				setState(999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(998);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1001);
				((CreateLogfileGroupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1004);
			match(ENGINE);
			setState(1006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1005);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1008);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1010);
			match(CREATE);
			setState(1012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1011);
				ownerStatement();
				}
			}

			setState(1014);
			match(PROCEDURE);
			setState(1015);
			fullId();
			setState(1016);
			match(LR_BRACKET);
			setState(1018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 151169654698547409L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				setState(1017);
				procedureParameter();
				}
			}

			setState(1024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1020);
				match(COMMA);
				setState(1021);
				procedureParameter();
				}
				}
				setState(1026);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1027);
			match(RR_BRACKET);
			setState(1031);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1028);
					routineOption();
					}
					} 
				}
				setState(1033);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			}
			setState(1034);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1036);
			match(CREATE);
			setState(1038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1037);
				ownerStatement();
				}
			}

			setState(1041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(1040);
				match(AGGREGATE);
				}
			}

			setState(1043);
			match(FUNCTION);
			setState(1045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				setState(1044);
				ifNotExists();
				}
				break;
			}
			setState(1047);
			fullId();
			setState(1048);
			match(LR_BRACKET);
			setState(1050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				setState(1049);
				functionParameter();
				}
			}

			setState(1056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1052);
				match(COMMA);
				setState(1053);
				functionParameter();
				}
				}
				setState(1058);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1059);
			match(RR_BRACKET);
			setState(1060);
			match(RETURNS);
			setState(1061);
			dataType();
			setState(1065);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,55,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1062);
					routineOption();
					}
					} 
				}
				setState(1067);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,55,_ctx);
			}
			setState(1070);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case ATTRIBUTE:
			case BUCKETS:
			case CALL:
			case CHANGE:
			case CHECK:
			case CONDITION:
			case CREATE:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EMPTY:
			case EXCEPT:
			case EXPLAIN:
			case GET:
			case GRANT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case KILL:
			case LATERAL:
			case LEFT:
			case LOAD:
			case LOCK:
			case NUMBER:
			case OPTIMIZE:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SCHEMA:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(1068);
				routineBody();
				}
				break;
			case RETURN:
				{
				setState(1069);
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1072);
			match(CREATE);
			setState(1073);
			match(ROLE);
			setState(1075);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				setState(1074);
				ifNotExists();
				}
				break;
			}
			setState(1077);
			roleName();
			setState(1082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1078);
				match(COMMA);
				setState(1079);
				roleName();
				}
				}
				setState(1084);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateServerContext extends ParserRuleContext {
		public Token wrapperName;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1085);
			match(CREATE);
			setState(1086);
			match(SERVER);
			setState(1087);
			uid();
			setState(1088);
			match(FOREIGN);
			setState(1089);
			match(DATA);
			setState(1090);
			match(WRAPPER);
			setState(1091);
			((CreateServerContext)_localctx).wrapperName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				((CreateServerContext)_localctx).wrapperName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1092);
			match(OPTIONS);
			setState(1093);
			match(LR_BRACKET);
			setState(1094);
			serverOption();
			setState(1099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1095);
				match(COMMA);
				setState(1096);
				serverOption();
				}
				}
				setState(1101);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1102);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext parenthesisTable;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCopyCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCopyCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCopyCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class QueryCreateTableContext extends CreateTableContext {
		public Token keyViolate;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createTable);
		int _la;
		try {
			int _alt;
			setState(1182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1104);
				match(CREATE);
				setState(1106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1105);
					match(TEMPORARY);
					}
				}

				setState(1108);
				match(TABLE);
				setState(1110);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1109);
					ifNotExists();
					}
					break;
				}
				setState(1112);
				tableName();
				setState(1120);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(1113);
					match(LIKE);
					setState(1114);
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					setState(1115);
					match(LR_BRACKET);
					setState(1116);
					match(LIKE);
					setState(1117);
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					setState(1118);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1122);
				match(CREATE);
				setState(1124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1123);
					match(TEMPORARY);
					}
				}

				setState(1126);
				match(TABLE);
				setState(1128);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(1127);
					ifNotExists();
					}
					break;
				}
				setState(1130);
				tableName();
				setState(1132);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					setState(1131);
					createDefinitions();
					}
					break;
				}
				setState(1144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & 36028797019095045L) != 0 || _la==UNION || _la==CHAR || (((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & 4644375904747527L) != 0 || (((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & 4612811918334230547L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 2366149022974977L) != 0 || (((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & 4609173815820289L) != 0 || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==STRING_LITERAL) {
					{
					setState(1134);
					tableOption();
					setState(1141);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & 36028797019095045L) != 0 || _la==UNION || _la==CHAR || (((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & 4644375904747527L) != 0 || (((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & 4612811918334230547L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 2366149022974977L) != 0 || (((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & 4609173815820289L) != 0 || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==COMMA || _la==STRING_LITERAL) {
						{
						{
						setState(1136);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1135);
							match(COMMA);
							}
						}

						setState(1138);
						tableOption();
						}
						}
						setState(1143);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1146);
					partitionDefinitions();
					}
				}

				setState(1150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(1149);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1152);
					match(AS);
					}
				}

				setState(1155);
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1157);
				match(CREATE);
				setState(1159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1158);
					match(TEMPORARY);
					}
				}

				setState(1161);
				match(TABLE);
				setState(1163);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					setState(1162);
					ifNotExists();
					}
					break;
				}
				setState(1165);
				tableName();
				setState(1166);
				createDefinitions();
				setState(1177);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(1167);
					tableOption();
					setState(1174);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1169);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1168);
								match(COMMA);
								}
							}

							setState(1171);
							tableOption();
							}
							} 
						}
						setState(1176);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
					}
					}
					break;
				}
				setState(1180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1179);
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTablespaceInnodb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTablespaceInnodb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateTablespaceInnodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1184);
			match(CREATE);
			setState(1185);
			match(TABLESPACE);
			setState(1186);
			uid();
			setState(1187);
			match(ADD);
			setState(1188);
			match(DATAFILE);
			setState(1189);
			((CreateTablespaceInnodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1190);
				match(FILE_BLOCK_SIZE);
				setState(1191);
				match(EQUAL_SYMBOL);
				setState(1192);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = fileSizeLiteral();
				}
			}

			setState(1200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1195);
				match(ENGINE);
				setState(1197);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1196);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1199);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTablespaceNdb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTablespaceNdb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateTablespaceNdb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1202);
			match(CREATE);
			setState(1203);
			match(TABLESPACE);
			setState(1204);
			uid();
			setState(1205);
			match(ADD);
			setState(1206);
			match(DATAFILE);
			setState(1207);
			((CreateTablespaceNdbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1208);
			match(USE);
			setState(1209);
			match(LOGFILE);
			setState(1210);
			match(GROUP);
			setState(1211);
			uid();
			setState(1217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1212);
				match(EXTENT_SIZE);
				setState(1214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1213);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1216);
				((CreateTablespaceNdbContext)_localctx).extentSize = fileSizeLiteral();
				}
			}

			setState(1224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1219);
				match(INITIAL_SIZE);
				setState(1221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1220);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1223);
				((CreateTablespaceNdbContext)_localctx).initialSize = fileSizeLiteral();
				}
			}

			setState(1231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1226);
				match(AUTOEXTEND_SIZE);
				setState(1228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1227);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1230);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = fileSizeLiteral();
				}
			}

			setState(1238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1233);
				match(MAX_SIZE);
				setState(1235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1234);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1237);
				((CreateTablespaceNdbContext)_localctx).maxSize = fileSizeLiteral();
				}
			}

			setState(1245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1240);
				match(NODEGROUP);
				setState(1242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1241);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1244);
				uid();
				}
			}

			setState(1248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1247);
				match(WAIT);
				}
			}

			setState(1255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1250);
				match(COMMENT);
				setState(1252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1251);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1254);
				((CreateTablespaceNdbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1257);
			match(ENGINE);
			setState(1259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1258);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1261);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTriggerContext extends ParserRuleContext {
		public FullIdContext thisTrigger;
		public Token triggerTime;
		public Token triggerEvent;
		public Token triggerPlace;
		public FullIdContext otherTrigger;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(MySqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1263);
			match(CREATE);
			setState(1265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1264);
				ownerStatement();
				}
			}

			setState(1267);
			match(TRIGGER);
			setState(1268);
			((CreateTriggerContext)_localctx).thisTrigger = fullId();
			setState(1269);
			((CreateTriggerContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1270);
			((CreateTriggerContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1271);
			match(ON);
			setState(1272);
			tableName();
			setState(1273);
			match(FOR);
			setState(1274);
			match(EACH);
			setState(1275);
			match(ROW);
			setState(1278);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				setState(1276);
				((CreateTriggerContext)_localctx).triggerPlace = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					((CreateTriggerContext)_localctx).triggerPlace = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1277);
				((CreateTriggerContext)_localctx).otherTrigger = fullId();
				}
				break;
			}
			setState(1280);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public CommonTableExpressionsContext commonTableExpressions() {
			return getRuleContext(CommonTableExpressionsContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(MySqlParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_withClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1282);
			match(WITH);
			setState(1284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1283);
				match(RECURSIVE);
				}
				break;
			}
			setState(1286);
			commonTableExpressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommonTableExpressionsContext extends ParserRuleContext {
		public CteNameContext cteName() {
			return getRuleContext(CteNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<CteColumnNameContext> cteColumnName() {
			return getRuleContexts(CteColumnNameContext.class);
		}
		public CteColumnNameContext cteColumnName(int i) {
			return getRuleContext(CteColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CommonTableExpressionsContext commonTableExpressions() {
			return getRuleContext(CommonTableExpressionsContext.class,0);
		}
		public CommonTableExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommonTableExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommonTableExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommonTableExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExpressionsContext commonTableExpressions() throws RecognitionException {
		CommonTableExpressionsContext _localctx = new CommonTableExpressionsContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_commonTableExpressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1288);
			cteName();
			setState(1300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1289);
				match(LR_BRACKET);
				setState(1290);
				cteColumnName();
				setState(1295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1291);
					match(COMMA);
					setState(1292);
					cteColumnName();
					}
					}
					setState(1297);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1298);
				match(RR_BRACKET);
				}
			}

			setState(1302);
			match(AS);
			setState(1303);
			match(LR_BRACKET);
			setState(1304);
			dmlStatement();
			setState(1305);
			match(RR_BRACKET);
			setState(1308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1306);
				match(COMMA);
				setState(1307);
				commonTableExpressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CteNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCteName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCteName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCteName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteNameContext cteName() throws RecognitionException {
		CteNameContext _localctx = new CteNameContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_cteName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1310);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CteColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCteColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCteColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCteColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteColumnNameContext cteColumnName() throws RecognitionException {
		CteColumnNameContext _localctx = new CteColumnNameContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_cteColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1312);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOption;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public OrReplaceContext orReplace() {
			return getRuleContext(OrReplaceContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1314);
			match(CREATE);
			setState(1316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1315);
				orReplace();
				}
			}

			setState(1321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1318);
				match(ALGORITHM);
				setState(1319);
				match(EQUAL_SYMBOL);
				setState(1320);
				((CreateViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((CreateViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1323);
				ownerStatement();
				}
			}

			setState(1329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1326);
				match(SQL);
				setState(1327);
				match(SECURITY);
				setState(1328);
				((CreateViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1331);
			match(VIEW);
			setState(1332);
			fullId();
			setState(1337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1333);
				match(LR_BRACKET);
				setState(1334);
				uidList();
				setState(1335);
				match(RR_BRACKET);
				}
			}

			setState(1339);
			match(AS);
			setState(1359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				setState(1340);
				match(LR_BRACKET);
				setState(1342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1341);
					withClause();
					}
				}

				setState(1344);
				selectStatement();
				setState(1345);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(1348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1347);
					withClause();
					}
				}

				setState(1350);
				selectStatement();
				setState(1357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1351);
					match(WITH);
					setState(1353);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CASCADED || _la==LOCAL) {
						{
						setState(1352);
						((CreateViewContext)_localctx).checkOption = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==CASCADED || _la==LOCAL) ) {
							((CreateViewContext)_localctx).checkOption = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1355);
					match(CHECK);
					setState(1356);
					match(OPTION);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabaseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_createDatabaseOption);
		int _la;
		try {
			setState(1394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1361);
					match(DEFAULT);
					}
				}

				setState(1364);
				charSet();
				setState(1366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1365);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1370);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1368);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1369);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1372);
					match(DEFAULT);
					}
				}

				setState(1375);
				match(COLLATE);
				setState(1377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1376);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1379);
				collationName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1380);
					match(DEFAULT);
					}
				}

				setState(1383);
				match(ENCRYPTION);
				setState(1385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1384);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1387);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1388);
				match(READ);
				setState(1389);
				match(ONLY);
				setState(1391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1390);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1393);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharSetContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public CharSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharSetContext charSet() throws RecognitionException {
		CharSetContext _localctx = new CharSetContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_charSet);
		try {
			setState(1401);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1396);
				match(CHARACTER);
				setState(1397);
				match(SET);
				}
				break;
			case CHARSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1398);
				match(CHARSET);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(1399);
				match(CHAR);
				setState(1400);
				match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OwnerStatementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOwnerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOwnerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOwnerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1403);
			match(DEFINER);
			setState(1404);
			match(EQUAL_SYMBOL);
			setState(1411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				setState(1405);
				userName();
				}
				break;
			case 2:
				{
				setState(1406);
				match(CURRENT_USER);
				setState(1409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1407);
					match(LR_BRACKET);
					setState(1408);
					match(RR_BRACKET);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ScheduleExpressionContext extends ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression; }
	 
		public ScheduleExpressionContext() { }
		public void copyFrom(ScheduleExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PreciseScheduleContext extends ScheduleExpressionContext {
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPreciseSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPreciseSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPreciseSchedule(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IntervalScheduleContext extends ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext intervalExpr;
		public List<IntervalExprContext> startIntervals = new ArrayList<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public List<IntervalExprContext> endIntervals = new ArrayList<IntervalExprContext>();
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_scheduleExpression);
		int _la;
		try {
			setState(1447);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1413);
				match(AT);
				setState(1414);
				timestampValue();
				setState(1418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1415);
					intervalExpr();
					}
					}
					setState(1420);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1421);
				match(EVERY);
				setState(1424);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					setState(1422);
					decimalLiteral();
					}
					break;
				case 2:
					{
					setState(1423);
					expression(0);
					}
					break;
				}
				setState(1426);
				intervalType();
				setState(1435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1427);
					match(STARTS);
					setState(1428);
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					setState(1432);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1429);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1434);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1437);
					match(ENDS);
					setState(1438);
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					setState(1442);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1439);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1444);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTimestampValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTimestampValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_timestampValue);
		try {
			setState(1453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1449);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1450);
				stringLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1451);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1452);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalExprContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1455);
			match(PLUS);
			setState(1456);
			match(INTERVAL);
			setState(1459);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				setState(1457);
				decimalLiteral();
				}
				break;
			case 2:
				{
				setState(1458);
				expression(0);
				}
				break;
			}
			setState(1461);
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySqlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_intervalType);
		try {
			setState(1476);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1463);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1464);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1465);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1466);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1467);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1468);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1469);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1470);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1471);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1472);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1473);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1474);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1475);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEnableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEnableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEnableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_enableType);
		try {
			setState(1483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1478);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1479);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1480);
				match(DISABLE);
				setState(1481);
				match(ON);
				setState(1482);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1485);
			match(USING);
			setState(1486);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_indexOption);
		int _la;
		try {
			setState(1510);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1488);
				match(KEY_BLOCK_SIZE);
				setState(1490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1489);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1492);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1493);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1494);
				match(WITH);
				setState(1495);
				match(PARSER);
				setState(1496);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1497);
				match(COMMENT);
				setState(1498);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1499);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1500);
				match(ENGINE_ATTRIBUTE);
				setState(1502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1501);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1504);
				match(STRING_LITERAL);
				}
				break;
			case SECONDARY_ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1505);
				match(SECONDARY_ENGINE_ATTRIBUTE);
				setState(1507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1506);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1509);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(MySqlParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(MySqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitProcedureParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 35184372088849L) != 0) {
				{
				setState(1512);
				((ProcedureParameterContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 35184372088849L) != 0) ) {
					((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1515);
			uid();
			setState(1516);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1518);
			uid();
			setState(1519);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(MySqlParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBehavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineBehavior(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineComment(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineSecurity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineSecurity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineSecurity(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode READS() { return getToken(MySqlParser.READS, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(MySqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_routineOption);
		int _la;
		try {
			setState(1544);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1521);
				match(COMMENT);
				setState(1522);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1523);
				match(LANGUAGE);
				setState(1524);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1525);
					match(NOT);
					}
				}

				setState(1528);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1539);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1529);
					match(CONTAINS);
					setState(1530);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1531);
					match(NO);
					setState(1532);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1533);
					match(READS);
					setState(1534);
					match(SQL);
					setState(1535);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1536);
					match(MODIFIES);
					setState(1537);
					match(SQL);
					setState(1538);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1541);
				match(SQL);
				setState(1542);
				match(SECURITY);
				setState(1543);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ServerOptionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitServerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitServerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_serverOption);
		try {
			setState(1560);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1546);
				match(HOST);
				setState(1547);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1548);
				match(DATABASE);
				setState(1549);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1550);
				match(USER);
				setState(1551);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1552);
				match(PASSWORD);
				setState(1553);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1554);
				match(SOCKET);
				setState(1555);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1556);
				match(OWNER);
				setState(1557);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1558);
				match(PORT);
				setState(1559);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1562);
			match(LR_BRACKET);
			setState(1563);
			createDefinition();
			setState(1568);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1564);
				match(COMMA);
				setState(1565);
				createDefinition();
				}
				}
				setState(1570);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1571);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstraintDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstraintDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_createDefinition);
		try {
			setState(1578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1573);
				fullColumnName();
				setState(1574);
				columnDefinition();
				}
				break;
			case 2:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1576);
				tableConstraint();
				}
				break;
			case 3:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1577);
				indexColumnDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_columnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1580);
			dataType();
			setState(1584);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,146,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1581);
					columnConstraint();
					}
					} 
				}
				setState(1586);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,146,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStorageColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class VisibilityColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVisibilityColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVisibilityColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitVisibilityColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommentColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSerialDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSerialDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSerialDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(MySqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(MySqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySqlParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGeneratedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGeneratedColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGeneratedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFormatColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CheckColumnConstraintContext extends ColumnConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InvisibilityColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public InvisibilityColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInvisibilityColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInvisibilityColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInvisibilityColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_columnConstraint);
		int _la;
		try {
			setState(1640);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1587);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1588);
				match(DEFAULT);
				setState(1589);
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1590);
				match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new InvisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1591);
				match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1596);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(1592);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(1593);
					match(ON);
					setState(1594);
					match(UPDATE);
					setState(1595);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1598);
					match(PRIMARY);
					}
				}

				setState(1601);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1602);
				match(UNIQUE);
				setState(1604);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					setState(1603);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1606);
				match(COMMENT);
				setState(1607);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1608);
				match(COLUMN_FORMAT);
				setState(1609);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1610);
				match(STORAGE);
				setState(1611);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1612);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1613);
				match(COLLATE);
				setState(1614);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1617);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(1615);
					match(GENERATED);
					setState(1616);
					match(ALWAYS);
					}
				}

				setState(1619);
				match(AS);
				setState(1620);
				match(LR_BRACKET);
				setState(1621);
				expression(0);
				setState(1622);
				match(RR_BRACKET);
				setState(1624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(1623);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1626);
				match(SERIAL);
				setState(1627);
				match(DEFAULT);
				setState(1628);
				match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1629);
					match(CONSTRAINT);
					setState(1631);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						setState(1630);
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1635);
				match(CHECK);
				setState(1636);
				match(LR_BRACKET);
				setState(1637);
				expression(0);
				setState(1638);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitForeignKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tableConstraint);
		int _la;
		try {
			setState(1711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1642);
					match(CONSTRAINT);
					setState(1644);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
					case 1:
						{
						setState(1643);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
						break;
					}
					}
				}

				setState(1648);
				match(PRIMARY);
				setState(1649);
				match(KEY);
				setState(1651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(1650);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1653);
					indexType();
					}
				}

				setState(1656);
				indexColumnNames();
				setState(1660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1657);
					indexOption();
					}
					}
					setState(1662);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1663);
					match(CONSTRAINT);
					setState(1665);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						setState(1664);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1669);
				match(UNIQUE);
				setState(1671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1670);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(1673);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1676);
					indexType();
					}
				}

				setState(1679);
				indexColumnNames();
				setState(1683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1680);
					indexOption();
					}
					}
					setState(1685);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1690);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1686);
					match(CONSTRAINT);
					setState(1688);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						setState(1687);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1692);
				match(FOREIGN);
				setState(1693);
				match(KEY);
				setState(1695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(1694);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1697);
				indexColumnNames();
				setState(1698);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1704);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1700);
					match(CONSTRAINT);
					setState(1702);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						setState(1701);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1706);
				match(CHECK);
				setState(1707);
				match(LR_BRACKET);
				setState(1708);
				expression(0);
				setState(1709);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1713);
			match(REFERENCES);
			setState(1714);
			tableName();
			setState(1716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(1715);
				indexColumnNames();
				}
				break;
			}
			setState(1720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1718);
				match(MATCH);
				setState(1719);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				setState(1722);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_referenceAction);
		try {
			setState(1741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1725);
				match(ON);
				setState(1726);
				match(DELETE);
				setState(1727);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(1731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
				case 1:
					{
					setState(1728);
					match(ON);
					setState(1729);
					match(UPDATE);
					setState(1730);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1733);
				match(ON);
				setState(1734);
				match(UPDATE);
				setState(1735);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(1739);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
				case 1:
					{
					setState(1736);
					match(ON);
					setState(1737);
					match(DELETE);
					setState(1738);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_referenceControlType);
		try {
			setState(1749);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1743);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1744);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1745);
				match(SET);
				setState(1746);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1747);
				match(NO);
				setState(1748);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecialIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecialIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecialIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(1779);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1751);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(1752);
					uid();
					}
				}

				setState(1756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1755);
					indexType();
					}
				}

				setState(1758);
				indexColumnNames();
				setState(1762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1759);
					indexOption();
					}
					}
					setState(1764);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1765);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1766);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(1769);
					uid();
					}
				}

				setState(1772);
				indexColumnNames();
				setState(1776);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1773);
					indexOption();
					}
					}
					setState(1778);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPersistent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPersistent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPersistent(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionAutoextendSizeContext extends TableOptionContext {
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoextendSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAutoextendSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAutoextendSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAutoextendSize(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionPageCompressedContext extends TableOptionContext {
		public TerminalNode PAGE_COMPRESSED() { return getToken(MySqlParser.PAGE_COMPRESSED, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPageCompressedContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPageCompressed(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPageCompressed(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPageCompressed(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionStartTransactionContext extends TableOptionContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TableOptionStartTransactionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPackKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPackKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPackKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionUnion(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionSamplePage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionSamplePage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionSamplePage(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionCharsetContext extends TableOptionContext {
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionTableTypeContext extends TableOptionContext {
		public TerminalNode TABLE_TYPE() { return getToken(MySqlParser.TABLE_TYPE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableTypeContext tableType() {
			return getRuleContext(TableTypeContext.class,0);
		}
		public TableOptionTableTypeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionTableType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionKeyBlockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionKeyBlockSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEncryption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEncryption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRecalculation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRecalculation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionRecalculation(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAutoIncrement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionEncryptionKeyIdContext extends TableOptionContext {
		public TerminalNode ENCRYPTION_KEY_ID() { return getToken(MySqlParser.ENCRYPTION_KEY_ID, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionKeyIdContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEncryptionKeyId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEncryptionKeyId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEncryptionKeyId(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionChecksum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionChecksum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionChecksum(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDelay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDelay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionDelay(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionConnection(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionTransactionalContext extends TableOptionContext {
		public TerminalNode TRANSACTIONAL() { return getToken(MySqlParser.TRANSACTIONAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionTransactionalContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTransactional(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTransactional(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionTransactional(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionPageCompressionLevelContext extends TableOptionContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode PAGE_COMPRESSION_LEVEL() { return getToken(MySqlParser.PAGE_COMPRESSION_LEVEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPageCompressionLevelContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPageCompressionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPageCompressionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionPageCompressionLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionSecondaryEngineAttributeContext extends TableOptionContext {
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSecondaryEngineAttributeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionSecondaryEngineAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionSecondaryEngineAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionSecondaryEngineAttribute(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAverage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAverage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAverage(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCompression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCompression(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionInsertMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionInsertMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionInsertMethod(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionEngineAttributeContext extends TableOptionContext {
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEngineAttributeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEngineAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEngineAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEngineAttribute(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_tableOption);
		int _la;
		try {
			setState(1966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1781);
				match(ENGINE);
				setState(1783);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1782);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1786);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					setState(1785);
					engineName();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new TableOptionEngineAttributeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1788);
				match(ENGINE_ATTRIBUTE);
				setState(1790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1789);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1792);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new TableOptionAutoextendSizeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1793);
				match(AUTOEXTEND_SIZE);
				setState(1795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1794);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1797);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1798);
				match(AUTO_INCREMENT);
				setState(1800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1799);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1802);
				decimalLiteral();
				}
				break;
			case 5:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1803);
				match(AVG_ROW_LENGTH);
				setState(1805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1804);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1807);
				decimalLiteral();
				}
				break;
			case 6:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1808);
					match(DEFAULT);
					}
				}

				setState(1811);
				charSet();
				setState(1813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1812);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1817);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1815);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1816);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1819);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1820);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1823);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 8:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1824);
					match(DEFAULT);
					}
				}

				setState(1827);
				match(COLLATE);
				setState(1829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1828);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1831);
				collationName();
				}
				break;
			case 9:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1832);
				match(COMMENT);
				setState(1834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1833);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1836);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1837);
				match(COMPRESSION);
				setState(1839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1838);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1841);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1842);
				match(CONNECTION);
				setState(1844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1843);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1846);
				match(STRING_LITERAL);
				}
				break;
			case 12:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1847);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==DATA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1848);
				match(DIRECTORY);
				setState(1850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1849);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1852);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1853);
				match(DELAY_KEY_WRITE);
				setState(1855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1854);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1857);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 14:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1858);
				match(ENCRYPTION);
				setState(1860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1859);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1862);
				match(STRING_LITERAL);
				}
				break;
			case 15:
				_localctx = new TableOptionPageCompressedContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1863);
				_la = _input.LA(1);
				if ( !(_la==PAGE_COMPRESSED || _la==STRING_LITERAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1864);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1867);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 16:
				_localctx = new TableOptionPageCompressionLevelContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1868);
				_la = _input.LA(1);
				if ( !(_la==PAGE_COMPRESSION_LEVEL || _la==STRING_LITERAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1869);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1872);
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionEncryptionKeyIdContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1873);
				match(ENCRYPTION_KEY_ID);
				setState(1875);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1874);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1877);
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1878);
				match(INDEX);
				setState(1879);
				match(DIRECTORY);
				setState(1881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1880);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1883);
				match(STRING_LITERAL);
				}
				break;
			case 19:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1884);
				match(INSERT_METHOD);
				setState(1886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1885);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1888);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1889);
				match(KEY_BLOCK_SIZE);
				setState(1891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1890);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1893);
				fileSizeLiteral();
				}
				break;
			case 21:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1894);
				match(MAX_ROWS);
				setState(1896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1895);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1898);
				decimalLiteral();
				}
				break;
			case 22:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1899);
				match(MIN_ROWS);
				setState(1901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1900);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1903);
				decimalLiteral();
				}
				break;
			case 23:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1904);
				match(PACK_KEYS);
				setState(1906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1905);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1908);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 24:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1909);
				match(PASSWORD);
				setState(1911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1910);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1913);
				match(STRING_LITERAL);
				}
				break;
			case 25:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1914);
				match(ROW_FORMAT);
				setState(1916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1915);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1918);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || (((_la - 368)) & ~0x3f) == 0 && ((1L << (_la - 368)) & 2305843013508661253L) != 0 || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 26:
				_localctx = new TableOptionStartTransactionContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1919);
				match(START);
				setState(1920);
				match(TRANSACTION);
				}
				break;
			case 27:
				_localctx = new TableOptionSecondaryEngineAttributeContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(1921);
				match(SECONDARY_ENGINE_ATTRIBUTE);
				setState(1923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1922);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1925);
				match(STRING_LITERAL);
				}
				break;
			case 28:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(1926);
				match(STATS_AUTO_RECALC);
				setState(1928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1927);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1930);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 29:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(1931);
				match(STATS_PERSISTENT);
				setState(1933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1932);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1935);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 30:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(1936);
				match(STATS_SAMPLE_PAGES);
				setState(1938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1937);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1942);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(1940);
					match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(1941);
					decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 31:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(1944);
				match(TABLESPACE);
				setState(1945);
				uid();
				setState(1947);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					setState(1946);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 32:
				_localctx = new TableOptionTableTypeContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(1949);
				match(TABLE_TYPE);
				setState(1950);
				match(EQUAL_SYMBOL);
				setState(1951);
				tableType();
				}
				break;
			case 33:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(1952);
				tablespaceStorage();
				}
				break;
			case 34:
				_localctx = new TableOptionTransactionalContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(1953);
				match(TRANSACTIONAL);
				setState(1955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1954);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1957);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 35:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(1958);
				match(UNION);
				setState(1960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1959);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1962);
				match(LR_BRACKET);
				setState(1963);
				tables();
				setState(1964);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableTypeContext extends ParserRuleContext {
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableTypeContext tableType() throws RecognitionException {
		TableTypeContext _localctx = new TableTypeContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_tableType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1968);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablespaceStorage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTablespaceStorage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1970);
			match(STORAGE);
			setState(1971);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(MySqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MySqlParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1973);
			match(PARTITION);
			setState(1974);
			match(BY);
			setState(1975);
			partitionFunctionDefinition();
			setState(1978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(1976);
				match(PARTITIONS);
				setState(1977);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(1987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1980);
				match(SUBPARTITION);
				setState(1981);
				match(BY);
				setState(1982);
				subpartitionFunctionDefinition();
				setState(1985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(1983);
					match(SUBPARTITIONS);
					setState(1984);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(2000);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(1989);
				match(LR_BRACKET);
				setState(1990);
				partitionDefinition();
				setState(1995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1991);
					match(COMMA);
					setState(1992);
					partitionDefinition();
					}
					}
					setState(1997);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1998);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionList(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionFunctionRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(2047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2002);
					match(LINEAR);
					}
				}

				setState(2005);
				match(HASH);
				setState(2006);
				match(LR_BRACKET);
				setState(2007);
				expression(0);
				setState(2008);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2010);
					match(LINEAR);
					}
				}

				setState(2013);
				match(KEY);
				setState(2017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(2014);
					match(ALGORITHM);
					setState(2015);
					match(EQUAL_SYMBOL);
					setState(2016);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2019);
				match(LR_BRACKET);
				setState(2020);
				uidList();
				setState(2021);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2023);
				match(RANGE);
				setState(2033);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(2024);
					match(LR_BRACKET);
					setState(2025);
					expression(0);
					setState(2026);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(2028);
					match(COLUMNS);
					setState(2029);
					match(LR_BRACKET);
					setState(2030);
					uidList();
					setState(2031);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2035);
				match(LIST);
				setState(2045);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(2036);
					match(LR_BRACKET);
					setState(2037);
					expression(0);
					setState(2038);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(2040);
					match(COLUMNS);
					setState(2041);
					match(LR_BRACKET);
					setState(2042);
					uidList();
					setState(2043);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(2070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2049);
					match(LINEAR);
					}
				}

				setState(2052);
				match(HASH);
				setState(2053);
				match(LR_BRACKET);
				setState(2054);
				expression(0);
				setState(2055);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2057);
					match(LINEAR);
					}
				}

				setState(2060);
				match(KEY);
				setState(2064);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(2061);
					match(ALGORITHM);
					setState(2062);
					match(EQUAL_SYMBOL);
					setState(2063);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2066);
				match(LR_BRACKET);
				setState(2067);
				uidList();
				setState(2068);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionComparisonContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionComparison(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionListAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionListVector(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionSimple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionSimple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_partitionDefinition);
		int _la;
		try {
			setState(2218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2072);
				match(PARTITION);
				setState(2073);
				uid();
				setState(2074);
				match(VALUES);
				setState(2075);
				match(LESS);
				setState(2076);
				match(THAN);
				setState(2077);
				match(LR_BRACKET);
				setState(2078);
				partitionDefinerAtom();
				setState(2083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2079);
					match(COMMA);
					setState(2080);
					partitionDefinerAtom();
					}
					}
					setState(2085);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2086);
				match(RR_BRACKET);
				setState(2090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2087);
					partitionOption();
					}
					}
					setState(2092);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2093);
					match(LR_BRACKET);
					setState(2094);
					subpartitionDefinition();
					setState(2099);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2095);
						match(COMMA);
						setState(2096);
						subpartitionDefinition();
						}
						}
						setState(2101);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2102);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2106);
				match(PARTITION);
				setState(2107);
				uid();
				setState(2108);
				match(VALUES);
				setState(2109);
				match(LESS);
				setState(2110);
				match(THAN);
				setState(2111);
				partitionDefinerAtom();
				setState(2115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2112);
					partitionOption();
					}
					}
					setState(2117);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2118);
					match(LR_BRACKET);
					setState(2119);
					subpartitionDefinition();
					setState(2124);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2120);
						match(COMMA);
						setState(2121);
						subpartitionDefinition();
						}
						}
						setState(2126);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2127);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2131);
				match(PARTITION);
				setState(2132);
				uid();
				setState(2133);
				match(VALUES);
				setState(2134);
				match(IN);
				setState(2135);
				match(LR_BRACKET);
				setState(2136);
				partitionDefinerAtom();
				setState(2141);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2137);
					match(COMMA);
					setState(2138);
					partitionDefinerAtom();
					}
					}
					setState(2143);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2144);
				match(RR_BRACKET);
				setState(2148);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2145);
					partitionOption();
					}
					}
					setState(2150);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2151);
					match(LR_BRACKET);
					setState(2152);
					subpartitionDefinition();
					setState(2157);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2153);
						match(COMMA);
						setState(2154);
						subpartitionDefinition();
						}
						}
						setState(2159);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2160);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2164);
				match(PARTITION);
				setState(2165);
				uid();
				setState(2166);
				match(VALUES);
				setState(2167);
				match(IN);
				setState(2168);
				match(LR_BRACKET);
				setState(2169);
				partitionDefinerVector();
				setState(2174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2170);
					match(COMMA);
					setState(2171);
					partitionDefinerVector();
					}
					}
					setState(2176);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2177);
				match(RR_BRACKET);
				setState(2181);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2178);
					partitionOption();
					}
					}
					setState(2183);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2184);
					match(LR_BRACKET);
					setState(2185);
					subpartitionDefinition();
					setState(2190);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2186);
						match(COMMA);
						setState(2187);
						subpartitionDefinition();
						}
						}
						setState(2192);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2193);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2197);
				match(PARTITION);
				setState(2198);
				uid();
				setState(2202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2199);
					partitionOption();
					}
					}
					setState(2204);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2205);
					match(LR_BRACKET);
					setState(2206);
					subpartitionDefinition();
					setState(2211);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2207);
						match(COMMA);
						setState(2208);
						subpartitionDefinition();
						}
						}
						setState(2213);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2214);
					match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinerAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_partitionDefinerAtom);
		try {
			setState(2223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2220);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2221);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2222);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionDefinerVector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2225);
			match(LR_BRACKET);
			setState(2226);
			partitionDefinerAtom();
			setState(2229); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2227);
				match(COMMA);
				setState(2228);
				partitionDefinerAtom();
				}
				}
				setState(2231); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(2233);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubpartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2235);
			match(SUBPARTITION);
			setState(2236);
			uid();
			setState(2240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT || _la==INDEX || (((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & 2199024304129L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 268436481L) != 0 || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(2237);
				partitionOption();
				}
				}
				setState(2242);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionNodeGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionNodeGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionNodeGroup(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_partitionOption);
		int _la;
		try {
			setState(2291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2243);
					match(DEFAULT);
					}
				}

				setState(2247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2246);
					match(STORAGE);
					}
				}

				setState(2249);
				match(ENGINE);
				setState(2251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2250);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2253);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2254);
				match(COMMENT);
				setState(2256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2255);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2258);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2259);
				match(DATA);
				setState(2260);
				match(DIRECTORY);
				setState(2262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2261);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2264);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2265);
				match(INDEX);
				setState(2266);
				match(DIRECTORY);
				setState(2268);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2267);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2270);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2271);
				match(MAX_ROWS);
				setState(2273);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2272);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2275);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2276);
				match(MIN_ROWS);
				setState(2278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2277);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2280);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2281);
				match(TABLESPACE);
				setState(2283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2282);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2285);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2286);
				match(NODEGROUP);
				setState(2288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2287);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2290);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterDatabaseContext extends ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	 
		public AlterDatabaseContext() { }
		public void copyFrom(AlterDatabaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterUpgradeNameContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUpgradeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUpgradeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterSimpleDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterSimpleDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterSimpleDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterDatabase);
		int _la;
		try {
			setState(2311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2293);
				match(ALTER);
				setState(2294);
				((AlterSimpleDatabaseContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2296);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					setState(2295);
					uid();
					}
					break;
				}
				setState(2299); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2298);
					createDatabaseOption();
					}
					}
					setState(2301); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 4398214283264L) != 0 || _la==READ || _la==CHAR || _la==ENCRYPTION || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2303);
				match(ALTER);
				setState(2304);
				((AlterUpgradeNameContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2305);
				uid();
				setState(2306);
				match(UPGRADE);
				setState(2307);
				match(DATA);
				setState(2308);
				match(DIRECTORY);
				setState(2309);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2313);
			match(ALTER);
			setState(2315);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2314);
				ownerStatement();
				}
			}

			setState(2317);
			match(EVENT);
			setState(2318);
			fullId();
			setState(2322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(2319);
				match(ON);
				setState(2320);
				match(SCHEDULE);
				setState(2321);
				scheduleExpression();
				}
				break;
			}
			setState(2330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2324);
				match(ON);
				setState(2325);
				match(COMPLETION);
				setState(2327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2326);
					match(NOT);
					}
				}

				setState(2329);
				match(PRESERVE);
				}
			}

			setState(2335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				setState(2332);
				match(RENAME);
				setState(2333);
				match(TO);
				setState(2334);
				fullId();
				}
				break;
			}
			setState(2338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2337);
				enableType();
				}
			}

			setState(2342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2340);
				match(COMMENT);
				setState(2341);
				match(STRING_LITERAL);
				}
			}

			setState(2346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				setState(2344);
				match(DO);
				setState(2345);
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2348);
			match(ALTER);
			setState(2349);
			match(FUNCTION);
			setState(2350);
			fullId();
			setState(2354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || (((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & 140737496743941L) != 0 || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2351);
				routineOption();
				}
				}
				setState(2356);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterInstance(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterInstance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2357);
			match(ALTER);
			setState(2358);
			match(INSTANCE);
			setState(2359);
			match(ROTATE);
			setState(2360);
			match(INNODB);
			setState(2361);
			match(MASTER);
			setState(2362);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2364);
			match(ALTER);
			setState(2365);
			match(LOGFILE);
			setState(2366);
			match(GROUP);
			setState(2367);
			uid();
			setState(2368);
			match(ADD);
			setState(2369);
			match(UNDOFILE);
			setState(2370);
			match(STRING_LITERAL);
			setState(2376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2371);
				match(INITIAL_SIZE);
				setState(2373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2372);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2375);
				fileSizeLiteral();
				}
			}

			setState(2379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2378);
				match(WAIT);
				}
			}

			setState(2381);
			match(ENGINE);
			setState(2383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2382);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2385);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2387);
			match(ALTER);
			setState(2388);
			match(PROCEDURE);
			setState(2389);
			fullId();
			setState(2393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || (((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & 140737496743941L) != 0 || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2390);
				routineOption();
				}
				}
				setState(2395);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2396);
			match(ALTER);
			setState(2397);
			match(SERVER);
			setState(2398);
			uid();
			setState(2399);
			match(OPTIONS);
			setState(2400);
			match(LR_BRACKET);
			setState(2401);
			serverOption();
			setState(2406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2402);
				match(COMMA);
				setState(2403);
				serverOption();
				}
				}
				setState(2408);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2409);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2411);
			match(ALTER);
			setState(2413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2412);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2416);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2415);
				match(IGNORE);
				}
			}

			setState(2418);
			match(TABLE);
			setState(2419);
			tableName();
			setState(2421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(2420);
				waitNowaitClause();
				}
			}

			setState(2431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				setState(2423);
				alterSpecification();
				setState(2428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2424);
					match(COMMA);
					setState(2425);
					alterSpecification();
					}
					}
					setState(2430);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2433);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterTablespaceContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2436);
			match(ALTER);
			setState(2437);
			match(TABLESPACE);
			setState(2438);
			uid();
			setState(2439);
			((AlterTablespaceContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2440);
			match(DATAFILE);
			setState(2441);
			match(STRING_LITERAL);
			setState(2445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2442);
				match(INITIAL_SIZE);
				setState(2443);
				match(EQUAL_SYMBOL);
				setState(2444);
				fileSizeLiteral();
				}
			}

			setState(2448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2447);
				match(WAIT);
				}
			}

			setState(2450);
			match(ENGINE);
			setState(2452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2451);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2454);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2456);
			match(ALTER);
			setState(2460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2457);
				match(ALGORITHM);
				setState(2458);
				match(EQUAL_SYMBOL);
				setState(2459);
				((AlterViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2462);
				ownerStatement();
				}
			}

			setState(2468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2465);
				match(SQL);
				setState(2466);
				match(SECURITY);
				setState(2467);
				((AlterViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2470);
			match(VIEW);
			setState(2471);
			fullId();
			setState(2476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2472);
				match(LR_BRACKET);
				setState(2473);
				uidList();
				setState(2474);
				match(RR_BRACKET);
				}
			}

			setState(2478);
			match(AS);
			setState(2479);
			selectStatement();
			setState(2486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2480);
				match(WITH);
				setState(2482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2481);
					((AlterViewContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2484);
				match(CHECK);
				setState(2485);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDisableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDisableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDisableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDefaultCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDefaultCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByRenameColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRenameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRenameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRenameColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByConvertCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByConvertCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByConvertCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByRenameIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRenameIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRenameIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRenameIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRemovePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRemovePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRename(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOptimizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOptimizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByOptimizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByImportTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAddDefinitionsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddDefinitionsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCoalescePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCoalescePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByCoalescePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByDropConstraintCheckContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public AlterByDropConstraintCheckContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropConstraintCheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropConstraintCheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropConstraintCheck(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAlterIndexVisibility(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAlterIndexVisibility(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAlterIndexVisibility(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRebuildPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRebuildPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRebuildPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByUpgradePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByUpgradePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByUpgradePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRepairPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRepairPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByRepairPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByExchangePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByExchangePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByExchangePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByImportPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByChangeDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByForce(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByForce(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddSpecialIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddSpecialIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddSpecialIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByModifyColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByTableOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByLock(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDiscardPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDiscardTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByValidate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByValidate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByValidate(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCheckPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCheckPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByCheckPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByEnableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByEnableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByEnableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByReorganizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByReorganizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByReorganizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode INSTANT() { return getToken(MySqlParser.INSTANT, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterBySetAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterBySetAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterBySetAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAnalyzePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAnalyzePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAnalyzePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByChangeColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddUniqueKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddUniqueKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddUniqueKey(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTruncatePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTruncatePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByTruncatePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByAddColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterByOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			setState(2869);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2488);
				tableOption();
				setState(2495);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,306,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2490);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2489);
							match(COMMA);
							}
						}

						setState(2492);
						tableOption();
						}
						} 
					}
					setState(2497);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,306,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2498);
				match(ADD);
				setState(2500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2499);
					match(COLUMN);
					}
				}

				setState(2502);
				uid();
				setState(2503);
				columnDefinition();
				setState(2507);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2504);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2505);
					match(AFTER);
					setState(2506);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2509);
				match(ADD);
				setState(2511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2510);
					match(COLUMN);
					}
				}

				setState(2513);
				match(LR_BRACKET);
				setState(2514);
				uid();
				setState(2515);
				columnDefinition();
				setState(2522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2516);
					match(COMMA);
					setState(2517);
					uid();
					setState(2518);
					columnDefinition();
					}
					}
					setState(2524);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2525);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2527);
				match(ADD);
				setState(2528);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(2529);
					uid();
					}
				}

				setState(2533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2532);
					indexType();
					}
				}

				setState(2535);
				indexColumnNames();
				setState(2539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2536);
					indexOption();
					}
					}
					setState(2541);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2542);
				match(ADD);
				setState(2547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2543);
					match(CONSTRAINT);
					setState(2545);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
					case 1:
						{
						setState(2544);
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
						break;
					}
					}
				}

				setState(2549);
				match(PRIMARY);
				setState(2550);
				match(KEY);
				setState(2552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(2551);
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				setState(2555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2554);
					indexType();
					}
				}

				setState(2557);
				indexColumnNames();
				setState(2561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2558);
					indexOption();
					}
					}
					setState(2563);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2564);
				match(ADD);
				setState(2569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2565);
					match(CONSTRAINT);
					setState(2567);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						setState(2566);
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2571);
				match(UNIQUE);
				setState(2573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2572);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(2575);
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2578);
					indexType();
					}
				}

				setState(2581);
				indexColumnNames();
				setState(2585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2582);
					indexOption();
					}
					}
					setState(2587);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2588);
				match(ADD);
				setState(2589);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2590);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(2593);
					uid();
					}
				}

				setState(2596);
				indexColumnNames();
				setState(2600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(2597);
					indexOption();
					}
					}
					setState(2602);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2603);
				match(ADD);
				setState(2608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2604);
					match(CONSTRAINT);
					setState(2606);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						setState(2605);
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2610);
				match(FOREIGN);
				setState(2611);
				match(KEY);
				setState(2613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(2612);
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2615);
				indexColumnNames();
				setState(2616);
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2618);
				match(ADD);
				setState(2623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2619);
					match(CONSTRAINT);
					setState(2621);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
						{
						setState(2620);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2625);
				match(CHECK);
				setState(2626);
				match(LR_BRACKET);
				setState(2627);
				expression(0);
				setState(2628);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2630);
				match(ALGORITHM);
				setState(2632);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2631);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2634);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2635);
				match(ALTER);
				setState(2637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2636);
					match(COLUMN);
					}
				}

				setState(2639);
				uid();
				setState(2645);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2640);
					match(SET);
					setState(2641);
					match(DEFAULT);
					setState(2642);
					defaultValue();
					}
					break;
				case DROP:
					{
					setState(2643);
					match(DROP);
					setState(2644);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2647);
				match(CHANGE);
				setState(2649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2648);
					match(COLUMN);
					}
				}

				setState(2651);
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(2652);
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(2653);
				columnDefinition();
				setState(2657);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2654);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2655);
					match(AFTER);
					setState(2656);
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2659);
				match(RENAME);
				setState(2660);
				match(COLUMN);
				setState(2661);
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				setState(2662);
				match(TO);
				setState(2663);
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2665);
				match(LOCK);
				setState(2667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2666);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2669);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2670);
				match(MODIFY);
				setState(2672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2671);
					match(COLUMN);
					}
				}

				setState(2674);
				uid();
				setState(2675);
				columnDefinition();
				setState(2679);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2676);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2677);
					match(AFTER);
					setState(2678);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2681);
				match(DROP);
				setState(2683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2682);
					match(COLUMN);
					}
				}

				setState(2685);
				uid();
				setState(2687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(2686);
					match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2689);
				match(DROP);
				setState(2690);
				_la = _input.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2691);
				uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2692);
				match(DROP);
				setState(2693);
				match(PRIMARY);
				setState(2694);
				match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2695);
				match(DROP);
				setState(2696);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2697);
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByRenameIndexContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2698);
				match(RENAME);
				setState(2699);
				((AlterByRenameIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2700);
				uid();
				setState(2701);
				match(TO);
				setState(2702);
				uid();
				}
				break;
			case 21:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2704);
				match(ALTER);
				setState(2705);
				match(INDEX);
				setState(2706);
				uid();
				setState(2707);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2709);
				match(DROP);
				setState(2710);
				match(FOREIGN);
				setState(2711);
				match(KEY);
				setState(2712);
				uid();
				}
				break;
			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2713);
				match(DISABLE);
				setState(2714);
				match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2715);
				match(ENABLE);
				setState(2716);
				match(KEYS);
				}
				break;
			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2717);
				match(RENAME);
				setState(2719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2718);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2723);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
				case 1:
					{
					setState(2721);
					uid();
					}
					break;
				case 2:
					{
					setState(2722);
					fullId();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2725);
				match(ORDER);
				setState(2726);
				match(BY);
				setState(2727);
				uidList();
				}
				break;
			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2728);
				match(CONVERT);
				setState(2729);
				match(TO);
				setState(2730);
				match(CHARACTER);
				setState(2731);
				match(SET);
				setState(2732);
				charsetName();
				setState(2735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2733);
					match(COLLATE);
					setState(2734);
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2737);
					match(DEFAULT);
					}
				}

				setState(2740);
				match(CHARACTER);
				setState(2741);
				match(SET);
				setState(2742);
				match(EQUAL_SYMBOL);
				setState(2743);
				charsetName();
				setState(2747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2744);
					match(COLLATE);
					setState(2745);
					match(EQUAL_SYMBOL);
					setState(2746);
					collationName();
					}
				}

				}
				break;
			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2749);
				match(DISCARD);
				setState(2750);
				match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2751);
				match(IMPORT);
				setState(2752);
				match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2753);
				match(FORCE);
				}
				break;
			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2754);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2755);
				match(VALIDATION);
				}
				break;
			case 33:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2756);
				match(ADD);
				setState(2757);
				match(PARTITION);
				setState(2758);
				match(LR_BRACKET);
				setState(2759);
				partitionDefinition();
				setState(2764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2760);
					match(COMMA);
					setState(2761);
					partitionDefinition();
					}
					}
					setState(2766);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2767);
				match(RR_BRACKET);
				}
				break;
			case 34:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2769);
				match(DROP);
				setState(2770);
				match(PARTITION);
				setState(2771);
				uidList();
				}
				break;
			case 35:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2772);
				match(DISCARD);
				setState(2773);
				match(PARTITION);
				setState(2776);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2774);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2775);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2778);
				match(TABLESPACE);
				}
				break;
			case 36:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2779);
				match(IMPORT);
				setState(2780);
				match(PARTITION);
				setState(2783);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2781);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2782);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2785);
				match(TABLESPACE);
				}
				break;
			case 37:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2786);
				match(TRUNCATE);
				setState(2787);
				match(PARTITION);
				setState(2790);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2788);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2789);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2792);
				match(COALESCE);
				setState(2793);
				match(PARTITION);
				setState(2794);
				decimalLiteral();
				}
				break;
			case 39:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2795);
				match(REORGANIZE);
				setState(2796);
				match(PARTITION);
				setState(2797);
				uidList();
				setState(2798);
				match(INTO);
				setState(2799);
				match(LR_BRACKET);
				setState(2800);
				partitionDefinition();
				setState(2805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2801);
					match(COMMA);
					setState(2802);
					partitionDefinition();
					}
					}
					setState(2807);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2808);
				match(RR_BRACKET);
				}
				break;
			case 40:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2810);
				match(EXCHANGE);
				setState(2811);
				match(PARTITION);
				setState(2812);
				uid();
				setState(2813);
				match(WITH);
				setState(2814);
				match(TABLE);
				setState(2815);
				tableName();
				setState(2818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2816);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2817);
					match(VALIDATION);
					}
				}

				}
				break;
			case 41:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2820);
				match(ANALYZE);
				setState(2821);
				match(PARTITION);
				setState(2824);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2822);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2823);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2826);
				match(CHECK);
				setState(2827);
				match(PARTITION);
				setState(2830);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2828);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2829);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2832);
				match(OPTIMIZE);
				setState(2833);
				match(PARTITION);
				setState(2836);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2834);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2835);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2838);
				match(REBUILD);
				setState(2839);
				match(PARTITION);
				setState(2842);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2840);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2841);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2844);
				match(REPAIR);
				setState(2845);
				match(PARTITION);
				setState(2848);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2846);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2847);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 46:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(2850);
				match(REMOVE);
				setState(2851);
				match(PARTITIONING);
				}
				break;
			case 47:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(2852);
				match(UPGRADE);
				setState(2853);
				match(PARTITIONING);
				}
				break;
			case 48:
				_localctx = new AlterByAddDefinitionsContext(_localctx);
				enterOuterAlt(_localctx, 48);
				{
				setState(2854);
				match(ADD);
				setState(2856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2855);
					match(COLUMN);
					}
				}

				setState(2858);
				match(LR_BRACKET);
				setState(2859);
				createDefinition();
				setState(2864);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2860);
					match(COMMA);
					setState(2861);
					createDefinition();
					}
					}
					setState(2866);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2867);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2871);
			match(DROP);
			setState(2872);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				setState(2873);
				ifExists();
				}
				break;
			}
			setState(2876);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropEvent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2878);
			match(DROP);
			setState(2879);
			match(EVENT);
			setState(2881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				setState(2880);
				ifExists();
				}
				break;
			}
			setState(2883);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2885);
			match(DROP);
			setState(2886);
			match(INDEX);
			setState(2888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				setState(2887);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2890);
			uid();
			setState(2891);
			match(ON);
			setState(2892);
			tableName();
			setState(2905);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,368,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2903);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(2893);
						match(ALGORITHM);
						setState(2895);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2894);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2897);
						((DropIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(2898);
						match(LOCK);
						setState(2900);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2899);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2902);
						((DropIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2907);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,368,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2908);
			match(DROP);
			setState(2909);
			match(LOGFILE);
			setState(2910);
			match(GROUP);
			setState(2911);
			uid();
			setState(2912);
			match(ENGINE);
			setState(2913);
			match(EQUAL_SYMBOL);
			setState(2914);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dropProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2916);
			match(DROP);
			setState(2917);
			match(PROCEDURE);
			setState(2919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				setState(2918);
				ifExists();
				}
				break;
			}
			setState(2921);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_dropFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2923);
			match(DROP);
			setState(2924);
			match(FUNCTION);
			setState(2926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				setState(2925);
				ifExists();
				}
				break;
			}
			setState(2928);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dropServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2930);
			match(DROP);
			setState(2931);
			match(SERVER);
			setState(2933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				setState(2932);
				ifExists();
				}
				break;
			}
			setState(2935);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2937);
			match(DROP);
			setState(2939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2938);
				match(TEMPORARY);
				}
			}

			setState(2941);
			match(TABLE);
			setState(2943);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				setState(2942);
				ifExists();
				}
				break;
			}
			setState(2945);
			tables();
			setState(2947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2946);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2949);
			match(DROP);
			setState(2950);
			match(TABLESPACE);
			setState(2951);
			uid();
			setState(2957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(2952);
				match(ENGINE);
				setState(2954);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2953);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2956);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_dropTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2959);
			match(DROP);
			setState(2960);
			match(TRIGGER);
			setState(2962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				setState(2961);
				ifExists();
				}
				break;
			}
			setState(2964);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropViewContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2966);
			match(DROP);
			setState(2967);
			match(VIEW);
			setState(2969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				setState(2968);
				ifExists();
				}
				break;
			}
			setState(2971);
			fullId();
			setState(2976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2972);
				match(COMMA);
				setState(2973);
				fullId();
				}
				}
				setState(2978);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2979);
				((DropViewContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_dropRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2982);
			match(DROP);
			setState(2983);
			match(ROLE);
			setState(2985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				setState(2984);
				ifExists();
				}
				break;
			}
			setState(2987);
			roleName();
			setState(2992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2988);
				match(COMMA);
				setState(2989);
				roleName();
				}
				}
				setState(2994);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetRoleContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public SetRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRoleContext setRole() throws RecognitionException {
		SetRoleContext _localctx = new SetRoleContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_setRole);
		int _la;
		try {
			setState(3028);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2995);
				match(SET);
				setState(2996);
				match(DEFAULT);
				setState(2997);
				match(ROLE);
				setState(3008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(2998);
					match(NONE);
					}
					break;
				case 2:
					{
					setState(2999);
					match(ALL);
					}
					break;
				case 3:
					{
					setState(3000);
					roleName();
					setState(3005);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3001);
						match(COMMA);
						setState(3002);
						roleName();
						}
						}
						setState(3007);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3010);
				match(TO);
				setState(3013);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					setState(3011);
					userName();
					}
					break;
				case 2:
					{
					setState(3012);
					uid();
					}
					break;
				}
				setState(3022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3015);
					match(COMMA);
					setState(3018);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
					case 1:
						{
						setState(3016);
						userName();
						}
						break;
					case 2:
						{
						setState(3017);
						uid();
						}
						break;
					}
					}
					}
					setState(3024);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3025);
				match(SET);
				setState(3026);
				match(ROLE);
				setState(3027);
				roleOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3030);
			match(RENAME);
			setState(3031);
			match(TABLE);
			setState(3032);
			renameTableClause();
			setState(3037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3033);
				match(COMMA);
				setState(3034);
				renameTableClause();
				}
				}
				setState(3039);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3040);
			tableName();
			setState(3041);
			match(TO);
			setState(3042);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3044);
			match(TRUNCATE);
			setState(3046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(3045);
				match(TABLE);
				}
			}

			setState(3048);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(MySqlParser.CALL, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3050);
			match(CALL);
			setState(3051);
			fullId();
			setState(3058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				setState(3052);
				match(LR_BRACKET);
				setState(3055);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
				case 1:
					{
					setState(3053);
					constants();
					}
					break;
				case 2:
					{
					setState(3054);
					expressions();
					}
					break;
				}
				setState(3057);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_deleteStatement);
		try {
			setState(3062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3060);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3061);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3064);
			match(DO);
			setState(3065);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_handlerStatement);
		try {
			setState(3071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3067);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3068);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3069);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3070);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public FullColumnNameListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FullColumnNameListContext fullColumnNameList() {
			return getRuleContext(FullColumnNameListContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3073);
			match(INSERT);
			setState(3075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 4611686020574871553L) != 0) {
				{
				setState(3074);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 4611686020574871553L) != 0) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3077);
				match(IGNORE);
				}
			}

			setState(3081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3080);
				match(INTO);
				}
			}

			setState(3083);
			tableName();
			setState(3090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3084);
				match(PARTITION);
				setState(3085);
				match(LR_BRACKET);
				setState(3087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(3086);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(3089);
				match(RR_BRACKET);
				}
			}

			setState(3108);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(3096);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(3092);
					match(LR_BRACKET);
					setState(3093);
					((InsertStatementContext)_localctx).columns = fullColumnNameList();
					setState(3094);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3098);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(3099);
				match(SET);
				setState(3100);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(3105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3101);
					match(COMMA);
					setState(3102);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(3107);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3110);
				match(ON);
				setState(3111);
				match(DUPLICATE);
				setState(3112);
				match(KEY);
				setState(3113);
				match(UPDATE);
				setState(3114);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(3119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3115);
					match(COMMA);
					setState(3116);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(3121);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(MySqlParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(MySqlParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadDataStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3124);
			match(LOAD);
			setState(3125);
			match(DATA);
			setState(3127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(3126);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3129);
				match(LOCAL);
				}
			}

			setState(3132);
			match(INFILE);
			setState(3133);
			((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(3135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3134);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3137);
			match(INTO);
			setState(3138);
			match(TABLE);
			setState(3139);
			tableName();
			setState(3145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3140);
				match(PARTITION);
				setState(3141);
				match(LR_BRACKET);
				setState(3142);
				uidList();
				setState(3143);
				match(RR_BRACKET);
				}
			}

			setState(3150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3147);
				match(CHARACTER);
				setState(3148);
				match(SET);
				setState(3149);
				((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(3158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(3152);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3154); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3153);
					selectFieldsInto();
					}
					}
					setState(3156); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(3166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(3160);
				match(LINES);
				setState(3162); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3161);
					selectLinesInto();
					}
					}
					setState(3164); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(3172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3168);
				match(IGNORE);
				setState(3169);
				decimalLiteral();
				setState(3170);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				setState(3174);
				match(LR_BRACKET);
				setState(3175);
				assignmentField();
				setState(3180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3176);
					match(COMMA);
					setState(3177);
					assignmentField();
					}
					}
					setState(3182);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3183);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(3187);
				match(SET);
				setState(3188);
				updatedElement();
				setState(3193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3189);
					match(COMMA);
					setState(3190);
					updatedElement();
					}
					}
					setState(3195);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(MySqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MySqlParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadXmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadXmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3198);
			match(LOAD);
			setState(3199);
			match(XML);
			setState(3201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(3200);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3203);
				match(LOCAL);
				}
			}

			setState(3206);
			match(INFILE);
			setState(3207);
			((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(3209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3208);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3211);
			match(INTO);
			setState(3212);
			match(TABLE);
			setState(3213);
			tableName();
			setState(3217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3214);
				match(CHARACTER);
				setState(3215);
				match(SET);
				setState(3216);
				((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(3225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(3219);
				match(ROWS);
				setState(3220);
				match(IDENTIFIED);
				setState(3221);
				match(BY);
				setState(3222);
				match(LESS_SYMBOL);
				setState(3223);
				((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(3224);
				match(GREATER_SYMBOL);
				}
			}

			setState(3231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3227);
				match(IGNORE);
				setState(3228);
				decimalLiteral();
				setState(3229);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3244);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(3233);
				match(LR_BRACKET);
				setState(3234);
				assignmentField();
				setState(3239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3235);
					match(COMMA);
					setState(3236);
					assignmentField();
					}
					}
					setState(3241);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3242);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3246);
				match(SET);
				setState(3247);
				updatedElement();
				setState(3252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3248);
					match(COMMA);
					setState(3249);
					updatedElement();
					}
					}
					setState(3254);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3257);
			match(REPLACE);
			setState(3259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(3258);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3261);
				match(INTO);
				}
			}

			setState(3264);
			tableName();
			setState(3270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3265);
				match(PARTITION);
				setState(3266);
				match(LR_BRACKET);
				setState(3267);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(3268);
				match(RR_BRACKET);
				}
			}

			setState(3288);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(3276);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					setState(3272);
					match(LR_BRACKET);
					setState(3273);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(3274);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3278);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(3279);
				match(SET);
				setState(3280);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(3285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3281);
					match(COMMA);
					setState(3282);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(3287);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class WithLateralStatementContext extends SelectStatementContext {
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<LateralStatementContext> lateralStatement() {
			return getRuleContexts(LateralStatementContext.class);
		}
		public LateralStatementContext lateralStatement(int i) {
			return getRuleContext(LateralStatementContext.class,i);
		}
		public WithLateralStatementContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWithLateralStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWithLateralStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWithLateralStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(3352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3290);
				querySpecification();
				setState(3292);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
				case 1:
					{
					setState(3291);
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3294);
				queryExpression();
				setState(3296);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
				case 1:
					{
					setState(3295);
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3298);
				querySpecificationNointo();
				setState(3300); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3299);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3302); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,437,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3304);
					match(UNION);
					setState(3306);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3305);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3310);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(3308);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(3309);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(3315);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
				case 1:
					{
					setState(3314);
					orderByClause();
					}
					break;
				}
				setState(3318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3317);
					limitClause();
					}
				}

				setState(3321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					setState(3320);
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3323);
				queryExpressionNointo();
				setState(3325); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3324);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3327); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,444,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3329);
					match(UNION);
					setState(3331);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3330);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3333);
					queryExpression();
					}
				}

				setState(3337);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					setState(3336);
					orderByClause();
					}
					break;
				}
				setState(3340);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3339);
					limitClause();
					}
				}

				setState(3343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
				case 1:
					{
					setState(3342);
					lockClause();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new WithLateralStatementContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3345);
				querySpecificationNointo();
				setState(3348); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3346);
					match(COMMA);
					setState(3347);
					lateralStatement();
					}
					}
					setState(3350); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_updateStatement);
		try {
			setState(3356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3354);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3355);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValuesStatementContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ValuesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterValuesStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitValuesStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitValuesStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesStatementContext valuesStatement() throws RecognitionException {
		ValuesStatementContext _localctx = new ValuesStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_valuesStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3358);
			match(VALUES);
			setState(3359);
			match(LR_BRACKET);
			setState(3361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				{
				setState(3360);
				expressionsWithDefaults();
				}
				break;
			}
			setState(3363);
			match(RR_BRACKET);
			setState(3372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3364);
				match(COMMA);
				setState(3365);
				match(LR_BRACKET);
				setState(3367);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(3366);
					expressionsWithDefaults();
					}
					break;
				}
				setState(3369);
				match(RR_BRACKET);
				}
				}
				setState(3374);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatementValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_insertStatementValue);
		int _la;
		try {
			setState(3393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3375);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3376);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3377);
				match(LR_BRACKET);
				setState(3379);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					setState(3378);
					expressionsWithDefaults();
					}
					break;
				}
				setState(3381);
				match(RR_BRACKET);
				setState(3390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3382);
					match(COMMA);
					setState(3383);
					match(LR_BRACKET);
					setState(3385);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
					case 1:
						{
						setState(3384);
						expressionsWithDefaults();
						}
						break;
					}
					setState(3387);
					match(RR_BRACKET);
					}
					}
					setState(3392);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdatedElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdatedElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3395);
			fullColumnName();
			setState(3396);
			match(EQUAL_SYMBOL);
			setState(3399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				{
				setState(3397);
				expression(0);
				}
				break;
			case 2:
				{
				setState(3398);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAssignmentField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_assignmentField);
		try {
			setState(3403);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3401);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3402);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_lockClause);
		try {
			setState(3411);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3405);
				match(FOR);
				setState(3406);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3407);
				match(LOCK);
				setState(3408);
				match(IN);
				setState(3409);
				match(SHARE);
				setState(3410);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3413);
			match(DELETE);
			setState(3415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3414);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3417);
				match(QUICK);
				}
			}

			setState(3421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3420);
				match(IGNORE);
				}
			}

			setState(3423);
			match(FROM);
			setState(3424);
			tableName();
			setState(3430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3425);
				match(PARTITION);
				setState(3426);
				match(LR_BRACKET);
				setState(3427);
				uidList();
				setState(3428);
				match(RR_BRACKET);
				}
			}

			setState(3434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3432);
				match(WHERE);
				setState(3433);
				expression(0);
				}
			}

			setState(3437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3436);
				orderByClause();
				}
			}

			setState(3441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3439);
				match(LIMIT);
				setState(3440);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(MySqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MySqlParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3443);
			match(DELETE);
			setState(3445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3444);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3448);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(3447);
				match(QUICK);
				}
				break;
			}
			setState(3451);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3450);
				match(IGNORE);
				}
			}

			setState(3492);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(3453);
				tableName();
				setState(3456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3454);
					match(DOT);
					setState(3455);
					match(STAR);
					}
				}

				setState(3466);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3458);
					match(COMMA);
					setState(3459);
					tableName();
					setState(3462);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3460);
						match(DOT);
						setState(3461);
						match(STAR);
						}
					}

					}
					}
					setState(3468);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3469);
				match(FROM);
				setState(3470);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(3472);
				match(FROM);
				setState(3473);
				tableName();
				setState(3476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3474);
					match(DOT);
					setState(3475);
					match(STAR);
					}
				}

				setState(3486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3478);
					match(COMMA);
					setState(3479);
					tableName();
					setState(3482);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3480);
						match(DOT);
						setState(3481);
						match(STAR);
						}
					}

					}
					}
					setState(3488);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3489);
				match(USING);
				setState(3490);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3494);
				match(WHERE);
				setState(3495);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerOpenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3498);
			match(HANDLER);
			setState(3499);
			tableName();
			setState(3500);
			match(OPEN);
			setState(3505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				setState(3502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3501);
					match(AS);
					}
				}

				setState(3504);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerReadIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3507);
			match(HANDLER);
			setState(3508);
			tableName();
			setState(3509);
			match(READ);
			setState(3510);
			((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(3517);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(3511);
				comparisonOperator();
				setState(3512);
				match(LR_BRACKET);
				setState(3513);
				constants();
				setState(3514);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(3516);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3519);
				match(WHERE);
				setState(3520);
				expression(0);
				}
			}

			setState(3525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3523);
				match(LIMIT);
				setState(3524);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3527);
			match(HANDLER);
			setState(3528);
			tableName();
			setState(3529);
			match(READ);
			setState(3530);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3531);
				match(WHERE);
				setState(3532);
				expression(0);
				}
			}

			setState(3537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3535);
				match(LIMIT);
				setState(3536);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3539);
			match(HANDLER);
			setState(3540);
			tableName();
			setState(3541);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3543);
			match(UPDATE);
			setState(3545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3544);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3547);
				match(IGNORE);
				}
			}

			setState(3550);
			tableName();
			setState(3555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285556736L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				setState(3552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3551);
					match(AS);
					}
				}

				setState(3554);
				uid();
				}
			}

			setState(3557);
			match(SET);
			setState(3558);
			updatedElement();
			setState(3563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3559);
				match(COMMA);
				setState(3560);
				updatedElement();
				}
				}
				setState(3565);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3568);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3566);
				match(WHERE);
				setState(3567);
				expression(0);
				}
			}

			setState(3571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3570);
				orderByClause();
				}
			}

			setState(3574);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3573);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3576);
			match(UPDATE);
			setState(3578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3577);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3580);
				match(IGNORE);
				}
			}

			setState(3583);
			tableSources();
			setState(3584);
			match(SET);
			setState(3585);
			updatedElement();
			setState(3590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3586);
				match(COMMA);
				setState(3587);
				updatedElement();
				}
				}
				setState(3592);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3595);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3593);
				match(WHERE);
				setState(3594);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_orderByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3597);
			match(ORDER);
			setState(3598);
			match(BY);
			setState(3599);
			orderByExpression();
			setState(3604);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,500,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3600);
					match(COMMA);
					setState(3601);
					orderByExpression();
					}
					} 
				}
				setState(3606);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,500,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3607);
			expression(0);
			setState(3609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				setState(3608);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_tableSources);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3611);
			tableSource();
			setState(3616);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3612);
					match(COMMA);
					setState(3613);
					tableSource();
					}
					} 
				}
				setState(3618);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableJsonContext extends TableSourceContext {
		public JsonTableContext jsonTable() {
			return getRuleContext(JsonTableContext.class,0);
		}
		public TableJsonContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableJson(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableJson(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableJson(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(3637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3619);
				tableSourceItem();
				setState(3623);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3620);
						joinPart();
						}
						} 
					}
					setState(3625);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3626);
				match(LR_BRACKET);
				setState(3627);
				tableSourceItem();
				setState(3631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 4647996290423062529L) != 0 || (((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 144115222435594241L) != 0) {
					{
					{
					setState(3628);
					joinPart();
					}
					}
					setState(3633);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3634);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new TableJsonContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3636);
				jsonTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(3679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3639);
				tableName();
				setState(3645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3640);
					match(PARTITION);
					setState(3641);
					match(LR_BRACKET);
					setState(3642);
					uidList();
					setState(3643);
					match(RR_BRACKET);
					}
				}

				setState(3651);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					setState(3648);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3647);
						match(AS);
						}
					}

					setState(3650);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(3661);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
				case 1:
					{
					setState(3653);
					indexHint();
					setState(3658);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3654);
							match(COMMA);
							setState(3655);
							indexHint();
							}
							} 
						}
						setState(3660);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3668);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
				case 1:
					{
					setState(3663);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(3664);
					match(LR_BRACKET);
					setState(3665);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(3666);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3670);
					match(AS);
					}
				}

				setState(3673);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3675);
				match(LR_BRACKET);
				setState(3676);
				tableSources();
				setState(3677);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3681);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3682);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3685);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3683);
				match(FOR);
				setState(3684);
				indexHintType();
				}
			}

			setState(3687);
			match(LR_BRACKET);
			setState(3688);
			uidList();
			setState(3689);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_indexHintType);
		try {
			setState(3696);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3691);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3692);
				match(ORDER);
				setState(3693);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3694);
				match(GROUP);
				setState(3695);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(MySqlParser.LATERAL, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(MySqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(MySqlParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public TerminalNode LATERAL() { return getToken(MySqlParser.LATERAL, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStraightJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_joinPart);
		int _la;
		try {
			setState(3748);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3698);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3701);
				match(JOIN);
				setState(3703);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
				case 1:
					{
					setState(3702);
					match(LATERAL);
					}
					break;
				}
				setState(3705);
				tableSourceItem();
				setState(3713);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
				case 1:
					{
					setState(3706);
					match(ON);
					setState(3707);
					expression(0);
					}
					break;
				case 2:
					{
					setState(3708);
					match(USING);
					setState(3709);
					match(LR_BRACKET);
					setState(3710);
					uidList();
					setState(3711);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3715);
				match(STRAIGHT_JOIN);
				setState(3716);
				tableSourceItem();
				setState(3719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
				case 1:
					{
					setState(3717);
					match(ON);
					setState(3718);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3721);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3722);
					match(OUTER);
					}
				}

				setState(3725);
				match(JOIN);
				setState(3727);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
				case 1:
					{
					setState(3726);
					match(LATERAL);
					}
					break;
				}
				setState(3729);
				tableSourceItem();
				setState(3737);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3730);
					match(ON);
					setState(3731);
					expression(0);
					}
					break;
				case USING:
					{
					setState(3732);
					match(USING);
					setState(3733);
					match(LR_BRACKET);
					setState(3734);
					uidList();
					setState(3735);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3739);
				match(NATURAL);
				setState(3744);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3740);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3742);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3741);
						match(OUTER);
						}
					}

					}
				}

				setState(3746);
				match(JOIN);
				setState(3747);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_queryExpression);
		try {
			setState(3758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3750);
				match(LR_BRACKET);
				setState(3751);
				querySpecification();
				setState(3752);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3754);
				match(LR_BRACKET);
				setState(3755);
				queryExpression();
				setState(3756);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpressionNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_queryExpressionNointo);
		try {
			setState(3768);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3760);
				match(LR_BRACKET);
				setState(3761);
				querySpecificationNointo();
				setState(3762);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3764);
				match(LR_BRACKET);
				setState(3765);
				queryExpressionNointo();
				setState(3766);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(3824);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3770);
				match(SELECT);
				setState(3774);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,528,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3771);
						selectSpec();
						}
						} 
					}
					setState(3776);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,528,_ctx);
				}
				setState(3777);
				selectElements();
				setState(3779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3778);
					selectIntoExpression();
					}
				}

				setState(3781);
				fromClause();
				setState(3783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
				case 1:
					{
					setState(3782);
					groupByClause();
					}
					break;
				}
				setState(3786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3785);
					havingClause();
					}
				}

				setState(3789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3788);
					windowClause();
					}
				}

				setState(3792);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
				case 1:
					{
					setState(3791);
					orderByClause();
					}
					break;
				}
				setState(3795);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
				case 1:
					{
					setState(3794);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3797);
				match(SELECT);
				setState(3801);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,535,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3798);
						selectSpec();
						}
						} 
					}
					setState(3803);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,535,_ctx);
				}
				setState(3804);
				selectElements();
				setState(3805);
				fromClause();
				setState(3807);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
				case 1:
					{
					setState(3806);
					groupByClause();
					}
					break;
				}
				setState(3810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3809);
					havingClause();
					}
				}

				setState(3813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3812);
					windowClause();
					}
				}

				setState(3816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
				case 1:
					{
					setState(3815);
					orderByClause();
					}
					break;
				}
				setState(3819);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
				case 1:
					{
					setState(3818);
					limitClause();
					}
					break;
				}
				setState(3822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3821);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecificationNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3826);
			match(SELECT);
			setState(3830);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,543,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3827);
					selectSpec();
					}
					} 
				}
				setState(3832);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,543,_ctx);
			}
			setState(3833);
			selectElements();
			setState(3834);
			fromClause();
			setState(3836);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				setState(3835);
				groupByClause();
				}
				break;
			}
			setState(3839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3838);
				havingClause();
				}
			}

			setState(3842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(3841);
				windowClause();
				}
			}

			setState(3845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				{
				setState(3844);
				orderByClause();
				}
				break;
			}
			setState(3848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				{
				setState(3847);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3850);
			match(UNION);
			setState(3852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3851);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3854);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3856);
			match(UNION);
			setState(3858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3857);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3862);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3860);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3861);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LateralStatementContext extends ParserRuleContext {
		public TerminalNode LATERAL() { return getToken(MySqlParser.LATERAL, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public LateralStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lateralStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLateralStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLateralStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLateralStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LateralStatementContext lateralStatement() throws RecognitionException {
		LateralStatementContext _localctx = new LateralStatementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_lateralStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3864);
			match(LATERAL);
			setState(3879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				{
				setState(3865);
				querySpecificationNointo();
				}
				break;
			case 2:
				{
				setState(3866);
				queryExpressionNointo();
				}
				break;
			case 3:
				{
				{
				setState(3867);
				match(LR_BRACKET);
				setState(3870);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
					{
					setState(3868);
					querySpecificationNointo();
					}
					break;
				case LR_BRACKET:
					{
					setState(3869);
					queryExpressionNointo();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3872);
				match(RR_BRACKET);
				setState(3877);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
				case 1:
					{
					setState(3874);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3873);
						match(AS);
						}
					}

					setState(3876);
					uid();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonTableContext extends ParserRuleContext {
		public TerminalNode JSON_TABLE() { return getToken(MySqlParser.JSON_TABLE, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public JsonColumnListContext jsonColumnList() {
			return getRuleContext(JsonColumnListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public JsonTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonTableContext jsonTable() throws RecognitionException {
		JsonTableContext _localctx = new JsonTableContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_jsonTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3881);
			match(JSON_TABLE);
			setState(3882);
			match(LR_BRACKET);
			setState(3883);
			match(STRING_LITERAL);
			setState(3884);
			match(COMMA);
			setState(3885);
			match(STRING_LITERAL);
			setState(3886);
			match(COLUMNS);
			setState(3887);
			match(LR_BRACKET);
			setState(3888);
			jsonColumnList();
			setState(3889);
			match(RR_BRACKET);
			setState(3890);
			match(RR_BRACKET);
			setState(3895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
			case 1:
				{
				setState(3892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3891);
					match(AS);
					}
				}

				setState(3894);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonColumnListContext extends ParserRuleContext {
		public List<JsonColumnContext> jsonColumn() {
			return getRuleContexts(JsonColumnContext.class);
		}
		public JsonColumnContext jsonColumn(int i) {
			return getRuleContext(JsonColumnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public JsonColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonColumnListContext jsonColumnList() throws RecognitionException {
		JsonColumnListContext _localctx = new JsonColumnListContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_jsonColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3897);
			jsonColumn();
			setState(3902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3898);
				match(COMMA);
				setState(3899);
				jsonColumn();
				}
				}
				setState(3904);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonColumnContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(MySqlParser.ORDINALITY, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode PATH() { return getToken(MySqlParser.PATH, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public JsonOnEmptyContext jsonOnEmpty() {
			return getRuleContext(JsonOnEmptyContext.class,0);
		}
		public JsonOnErrorContext jsonOnError() {
			return getRuleContext(JsonOnErrorContext.class,0);
		}
		public TerminalNode NESTED() { return getToken(MySqlParser.NESTED, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public JsonColumnListContext jsonColumnList() {
			return getRuleContext(JsonColumnListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public JsonColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonColumnContext jsonColumn() throws RecognitionException {
		JsonColumnContext _localctx = new JsonColumnContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_jsonColumn);
		int _la;
		try {
			setState(3934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3905);
				fullColumnName();
				setState(3922);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(3906);
					match(FOR);
					setState(3907);
					match(ORDINALITY);
					}
					break;
				case CHARACTER:
				case SET:
				case TINYINT:
				case SMALLINT:
				case MEDIUMINT:
				case MIDDLEINT:
				case INT:
				case INT1:
				case INT2:
				case INT3:
				case INT4:
				case INT8:
				case INTEGER:
				case BIGINT:
				case REAL:
				case DOUBLE:
				case FLOAT:
				case FLOAT4:
				case FLOAT8:
				case DECIMAL:
				case DEC:
				case NUMERIC:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case VARCHAR:
				case NVARCHAR:
				case NATIONAL:
				case BINARY:
				case VARBINARY:
				case TINYBLOB:
				case BLOB:
				case MEDIUMBLOB:
				case LONG:
				case LONGBLOB:
				case TINYTEXT:
				case TEXT:
				case MEDIUMTEXT:
				case LONGTEXT:
				case ENUM:
				case SERIAL:
				case BIT:
				case BOOL:
				case BOOLEAN:
				case FIXED:
				case JSON:
				case NCHAR:
				case GEOMETRYCOLLECTION:
				case GEOMCOLLECTION:
				case GEOMETRY:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
					{
					setState(3908);
					dataType();
					setState(3920);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PATH:
						{
						setState(3909);
						match(PATH);
						setState(3910);
						match(STRING_LITERAL);
						setState(3912);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
						case 1:
							{
							setState(3911);
							jsonOnEmpty();
							}
							break;
						}
						setState(3915);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
							{
							setState(3914);
							jsonOnError();
							}
						}

						}
						break;
					case EXISTS:
						{
						setState(3917);
						match(EXISTS);
						setState(3918);
						match(PATH);
						setState(3919);
						match(STRING_LITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3924);
				match(NESTED);
				setState(3926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(3925);
					match(PATH);
					}
				}

				setState(3928);
				match(STRING_LITERAL);
				setState(3929);
				match(COLUMNS);
				setState(3930);
				match(LR_BRACKET);
				setState(3931);
				jsonColumnList();
				setState(3932);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonOnEmptyContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(MySqlParser.EMPTY, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public JsonOnEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOnEmpty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonOnEmpty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonOnEmpty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonOnEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOnEmptyContext jsonOnEmpty() throws RecognitionException {
		JsonOnEmptyContext _localctx = new JsonOnEmptyContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_jsonOnEmpty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3940);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL_LITERAL:
				{
				setState(3936);
				match(NULL_LITERAL);
				}
				break;
			case ERROR:
				{
				setState(3937);
				match(ERROR);
				}
				break;
			case DEFAULT:
				{
				setState(3938);
				match(DEFAULT);
				setState(3939);
				defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3942);
			match(ON);
			setState(3943);
			match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonOnErrorContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public List<TerminalNode> ERROR() { return getTokens(MySqlParser.ERROR); }
		public TerminalNode ERROR(int i) {
			return getToken(MySqlParser.ERROR, i);
		}
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public JsonOnErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOnError; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonOnError(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonOnError(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonOnError(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOnErrorContext jsonOnError() throws RecognitionException {
		JsonOnErrorContext _localctx = new JsonOnErrorContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_jsonOnError);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3949);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL_LITERAL:
				{
				setState(3945);
				match(NULL_LITERAL);
				}
				break;
			case ERROR:
				{
				setState(3946);
				match(ERROR);
				}
				break;
			case DEFAULT:
				{
				setState(3947);
				match(DEFAULT);
				setState(3948);
				defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3951);
			match(ON);
			setState(3952);
			match(ERROR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySqlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_selectSpec);
		int _la;
		try {
			setState(3962);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3954);
				_la = _input.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1688849860264000L) != 0) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3955);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3956);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3957);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3958);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3959);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3960);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3961);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_selectElements);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				{
				setState(3964);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case 2:
				{
				setState(3965);
				selectElement();
				}
				break;
			}
			setState(3972);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,569,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3968);
					match(COMMA);
					setState(3969);
					selectElement();
					}
					} 
				}
				setState(3974);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,569,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectExpressionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_selectElement);
		int _la;
		try {
			setState(4004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3975);
				fullId();
				setState(3976);
				match(DOT);
				setState(3977);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3979);
				fullColumnName();
				setState(3984);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
				case 1:
					{
					setState(3981);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3980);
						match(AS);
						}
					}

					setState(3983);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3986);
				functionCall();
				setState(3991);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
				case 1:
					{
					setState(3988);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3987);
						match(AS);
						}
					}

					setState(3990);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3995);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
				case 1:
					{
					setState(3993);
					match(LOCAL_ID);
					setState(3994);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(3997);
				expression(0);
				setState(4002);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
				case 1:
					{
					setState(3999);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3998);
						match(AS);
						}
					}

					setState(4001);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(MySqlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoTextFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoDumpFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_selectIntoExpression);
		int _la;
		try {
			setState(4042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4006);
				match(INTO);
				setState(4007);
				assignmentField();
				setState(4012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4008);
					match(COMMA);
					setState(4009);
					assignmentField();
					}
					}
					setState(4014);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4015);
				match(INTO);
				setState(4016);
				match(DUMPFILE);
				setState(4017);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(4018);
				match(INTO);
				setState(4019);
				match(OUTFILE);
				setState(4020);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(4024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(4021);
					match(CHARACTER);
					setState(4022);
					match(SET);
					setState(4023);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(4032);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
				case 1:
					{
					setState(4026);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4028); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4027);
						selectFieldsInto();
						}
						}
						setState(4030); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(4040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(4034);
					match(LINES);
					setState(4036); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4035);
						selectLinesInto();
						}
						}
						setState(4038); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(MySqlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFieldsInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_selectFieldsInto);
		int _la;
		try {
			setState(4056);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(4044);
				match(TERMINATED);
				setState(4045);
				match(BY);
				setState(4046);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(4048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(4047);
					match(OPTIONALLY);
					}
				}

				setState(4050);
				match(ENCLOSED);
				setState(4051);
				match(BY);
				setState(4052);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(4053);
				match(ESCAPED);
				setState(4054);
				match(BY);
				setState(4055);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(MySqlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectLinesInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_selectLinesInto);
		try {
			setState(4064);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4058);
				match(STARTING);
				setState(4059);
				match(BY);
				setState(4060);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(4061);
				match(TERMINATED);
				setState(4062);
				match(BY);
				setState(4063);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4066);
				match(FROM);
				setState(4067);
				tableSources();
				}
			}

			setState(4072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4070);
				match(WHERE);
				setState(4071);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_groupByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4074);
			match(GROUP);
			setState(4075);
			match(BY);
			setState(4076);
			groupByItem();
			setState(4081);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4077);
					match(COMMA);
					setState(4078);
					groupByItem();
					}
					} 
				}
				setState(4083);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
			}
			setState(4086);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				{
				setState(4084);
				match(WITH);
				setState(4085);
				match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HavingClauseContext extends ParserRuleContext {
		public ExpressionContext havingExpr;
		public TerminalNode HAVING() { return getToken(MySqlParser.HAVING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4088);
			match(HAVING);
			setState(4089);
			((HavingClauseContext)_localctx).havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(MySqlParser.WINDOW, 0); }
		public List<WindowNameContext> windowName() {
			return getRuleContexts(WindowNameContext.class);
		}
		public WindowNameContext windowName(int i) {
			return getRuleContext(WindowNameContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(MySqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(MySqlParser.AS, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<WindowSpecContext> windowSpec() {
			return getRuleContexts(WindowSpecContext.class);
		}
		public WindowSpecContext windowSpec(int i) {
			return getRuleContext(WindowSpecContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_windowClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4091);
			match(WINDOW);
			setState(4092);
			windowName();
			setState(4093);
			match(AS);
			setState(4094);
			match(LR_BRACKET);
			setState(4095);
			windowSpec();
			setState(4096);
			match(RR_BRACKET);
			setState(4106);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4097);
					match(COMMA);
					setState(4098);
					windowName();
					setState(4099);
					match(AS);
					setState(4100);
					match(LR_BRACKET);
					setState(4101);
					windowSpec();
					setState(4102);
					match(RR_BRACKET);
					}
					} 
				}
				setState(4108);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4109);
			expression(0);
			setState(4111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				{
				setState(4110);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4113);
			match(LIMIT);
			setState(4124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				{
				setState(4117);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(4114);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(4115);
					match(COMMA);
					}
					break;
				}
				setState(4119);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(4120);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(4121);
				match(OFFSET);
				setState(4122);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_limitClauseAtom);
		try {
			setState(4129);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4126);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4127);
				mysqlVariable();
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4128);
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4131);
			match(START);
			setState(4132);
			match(TRANSACTION);
			setState(4141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(4133);
				transactionMode();
				setState(4138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4134);
					match(COMMA);
					setState(4135);
					transactionMode();
					}
					}
					setState(4140);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBeginWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBeginWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4143);
			match(BEGIN);
			setState(4145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4144);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4147);
			match(COMMIT);
			setState(4149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4148);
				match(WORK);
				}
			}

			setState(4156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(4151);
				match(AND);
				setState(4153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4152);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(4155);
				match(CHAIN);
				}
			}

			setState(4162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
			case 1:
				{
				setState(4159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4158);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(4161);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4164);
			match(ROLLBACK);
			setState(4166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4165);
				match(WORK);
				}
			}

			setState(4173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(4168);
				match(AND);
				setState(4170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4169);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(4172);
				match(CHAIN);
				}
			}

			setState(4179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				{
				setState(4176);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4175);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(4178);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSavepointStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSavepointStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4181);
			match(SAVEPOINT);
			setState(4182);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollbackStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollbackStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRollbackStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4184);
			match(ROLLBACK);
			setState(4186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4185);
				match(WORK);
				}
			}

			setState(4188);
			match(TO);
			setState(4190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
			case 1:
				{
				setState(4189);
				match(SAVEPOINT);
				}
				break;
			}
			setState(4192);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReleaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReleaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReleaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4194);
			match(RELEASE);
			setState(4195);
			match(SAVEPOINT);
			setState(4196);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockTablesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public List<LockTableElementContext> lockTableElement() {
			return getRuleContexts(LockTableElementContext.class);
		}
		public LockTableElementContext lockTableElement(int i) {
			return getRuleContext(LockTableElementContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTablesContext lockTables() throws RecognitionException {
		LockTablesContext _localctx = new LockTablesContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_lockTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4198);
			match(LOCK);
			setState(4199);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4200);
			lockTableElement();
			setState(4205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4201);
				match(COMMA);
				setState(4202);
				lockTableElement();
				}
				}
				setState(4207);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(4208);
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnlockTablesContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnlockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnlockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnlockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockTablesContext unlockTables() throws RecognitionException {
		UnlockTablesContext _localctx = new UnlockTablesContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_unlockTables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4211);
			match(UNLOCK);
			setState(4212);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetAutocommitStatementContext extends ParserRuleContext {
		public Token autocommitValue;
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutocommitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetAutocommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetAutocommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetAutocommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_setAutocommitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4214);
			match(SET);
			setState(4215);
			match(AUTOCOMMIT);
			setState(4216);
			match(EQUAL_SYMBOL);
			setState(4217);
			((SetAutocommitStatementContext)_localctx).autocommitValue = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				((SetAutocommitStatementContext)_localctx).autocommitValue = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetTransactionStatementContext extends ParserRuleContext {
		public Token transactionContext;
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_setTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4219);
			match(SET);
			setState(4221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(4220);
				((SetTransactionStatementContext)_localctx).transactionContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					((SetTransactionStatementContext)_localctx).transactionContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4223);
			match(TRANSACTION);
			setState(4224);
			transactionOption();
			setState(4229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4225);
				match(COMMA);
				setState(4226);
				transactionOption();
				}
				}
				setState(4231);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_transactionMode);
		try {
			setState(4239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4232);
				match(WITH);
				setState(4233);
				match(CONSISTENT);
				setState(4234);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4235);
				match(READ);
				setState(4236);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4237);
				match(READ);
				setState(4238);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockTableElementContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableElementContext lockTableElement() throws RecognitionException {
		LockTableElementContext _localctx = new LockTableElementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_lockTableElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4241);
			tableName();
			setState(4246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285556736L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				setState(4243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4242);
					match(AS);
					}
				}

				setState(4245);
				uid();
				}
			}

			setState(4248);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLockAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_lockAction);
		int _la;
		try {
			setState(4258);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(4250);
				match(READ);
				setState(4252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(4251);
					match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(4254);
					match(LOW_PRIORITY);
					}
				}

				setState(4257);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_transactionOption);
		try {
			setState(4267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4260);
				match(ISOLATION);
				setState(4261);
				match(LEVEL);
				setState(4262);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4263);
				match(READ);
				setState(4264);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4265);
				match(READ);
				setState(4266);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_transactionLevel);
		try {
			setState(4276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4269);
				match(REPEATABLE);
				setState(4270);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4271);
				match(READ);
				setState(4272);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4273);
				match(READ);
				setState(4274);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4275);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChangeMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChangeMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4278);
			match(CHANGE);
			setState(4279);
			match(MASTER);
			setState(4280);
			match(TO);
			setState(4281);
			masterOption();
			setState(4286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4282);
				match(COMMA);
				setState(4283);
				masterOption();
				}
				}
				setState(4288);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4289);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChangeReplicationFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChangeReplicationFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChangeReplicationFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4292);
			match(CHANGE);
			setState(4293);
			match(REPLICATION);
			setState(4294);
			match(FILTER);
			setState(4295);
			replicationFilter();
			setState(4300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4296);
				match(COMMA);
				setState(4297);
				replicationFilter();
				}
				}
				setState(4302);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public Token fileName;
		public Token timeValue;
		public TerminalNode PURGE() { return getToken(MySqlParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPurgeBinaryLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPurgeBinaryLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPurgeBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4303);
			match(PURGE);
			setState(4304);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4305);
			match(LOGS);
			setState(4310);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(4306);
				match(TO);
				setState(4307);
				((PurgeBinaryLogsContext)_localctx).fileName = match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				setState(4308);
				match(BEFORE);
				setState(4309);
				((PurgeBinaryLogsContext)_localctx).timeValue = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResetMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4312);
			match(RESET);
			setState(4313);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResetSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4315);
			match(RESET);
			setState(4316);
			match(SLAVE);
			setState(4318);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(4317);
				match(ALL);
				}
			}

			setState(4321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4320);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStartSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4323);
			match(START);
			setState(4324);
			match(SLAVE);
			setState(4333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(4325);
				threadType();
				setState(4330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4326);
					match(COMMA);
					setState(4327);
					threadType();
					}
					}
					setState(4332);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(4335);
				match(UNTIL);
				setState(4336);
				untilOption();
				}
			}

			setState(4342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(4339);
				connectionOption();
				}
				}
				setState(4344);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4345);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStopSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStopSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStopSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4348);
			match(STOP);
			setState(4349);
			match(SLAVE);
			setState(4358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(4350);
				threadType();
				setState(4355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4351);
					match(COMMA);
					setState(4352);
					threadType();
					}
					}
					setState(4357);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStartGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4360);
			match(START);
			setState(4361);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStopGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStopGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStopGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4363);
			match(STOP);
			setState(4364);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterStringOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterStringOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterStringOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterRealOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterRealOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterRealOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public Token boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterBoolOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterBoolOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterBoolOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MasterUidListOptionContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterUidListOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterUidListOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterUidListOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterDecimalOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterDecimalOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterDecimalOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_masterOption);
		int _la;
		try {
			setState(4395);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4366);
				stringMasterOption();
				setState(4367);
				match(EQUAL_SYMBOL);
				setState(4368);
				match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4370);
				decimalMasterOption();
				setState(4371);
				match(EQUAL_SYMBOL);
				setState(4372);
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4374);
				boolMasterOption();
				setState(4375);
				match(EQUAL_SYMBOL);
				setState(4376);
				((MasterBoolOptionContext)_localctx).boolVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4378);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(4379);
				match(EQUAL_SYMBOL);
				setState(4380);
				match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4381);
				match(IGNORE_SERVER_IDS);
				setState(4382);
				match(EQUAL_SYMBOL);
				setState(4383);
				match(LR_BRACKET);
				setState(4392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
					{
					setState(4384);
					uid();
					setState(4389);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4385);
						match(COMMA);
						setState(4386);
						uid();
						}
						}
						setState(4391);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4394);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(MySqlParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4397);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || (((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & 65419L) != 0 || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimalMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4399);
			_la = _input.LA(1);
			if ( !((((_la - 477)) & ~0x3f) == 0 && ((1L << (_la - 477)) & 419L) != 0 || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBoolMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBoolMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBoolMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4401);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChannelOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChannelOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChannelOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4403);
			match(FOR);
			setState(4404);
			match(CHANNEL);
			setState(4405);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWildIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWildIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWildIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRewriteDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRewriteDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRewriteDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDoDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIgnoreDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIgnoreDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIgnoreDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWildDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWildDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWildDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_replicationFilter);
		int _la;
		try {
			setState(4456);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4407);
				match(REPLICATE_DO_DB);
				setState(4408);
				match(EQUAL_SYMBOL);
				setState(4409);
				match(LR_BRACKET);
				setState(4410);
				uidList();
				setState(4411);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4413);
				match(REPLICATE_IGNORE_DB);
				setState(4414);
				match(EQUAL_SYMBOL);
				setState(4415);
				match(LR_BRACKET);
				setState(4416);
				uidList();
				setState(4417);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4419);
				match(REPLICATE_DO_TABLE);
				setState(4420);
				match(EQUAL_SYMBOL);
				setState(4421);
				match(LR_BRACKET);
				setState(4422);
				tables();
				setState(4423);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4425);
				match(REPLICATE_IGNORE_TABLE);
				setState(4426);
				match(EQUAL_SYMBOL);
				setState(4427);
				match(LR_BRACKET);
				setState(4428);
				tables();
				setState(4429);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4431);
				match(REPLICATE_WILD_DO_TABLE);
				setState(4432);
				match(EQUAL_SYMBOL);
				setState(4433);
				match(LR_BRACKET);
				setState(4434);
				simpleStrings();
				setState(4435);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4437);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(4438);
				match(EQUAL_SYMBOL);
				setState(4439);
				match(LR_BRACKET);
				setState(4440);
				simpleStrings();
				setState(4441);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4443);
				match(REPLICATE_REWRITE_DB);
				setState(4444);
				match(EQUAL_SYMBOL);
				setState(4445);
				match(LR_BRACKET);
				setState(4446);
				tablePair();
				setState(4451);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4447);
					match(COMMA);
					setState(4448);
					tablePair();
					}
					}
					setState(4453);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4454);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablePairContext extends ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTablePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4458);
			match(LR_BRACKET);
			setState(4459);
			((TablePairContext)_localctx).firstTable = tableName();
			setState(4460);
			match(COMMA);
			setState(4461);
			((TablePairContext)_localctx).secondTable = tableName();
			setState(4462);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterThreadType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitThreadType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitThreadType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4464);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public GtuidSetContext gtuidSet() {
			return getRuleContext(GtuidSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGtidsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGtidsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGtidsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlGapsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlGapsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlGapsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMasterLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRelayLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRelayLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRelayLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_untilOption);
		int _la;
		try {
			setState(4484);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4466);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4467);
				match(EQUAL_SYMBOL);
				setState(4468);
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4469);
				match(MASTER_LOG_FILE);
				setState(4470);
				match(EQUAL_SYMBOL);
				setState(4471);
				match(STRING_LITERAL);
				setState(4472);
				match(COMMA);
				setState(4473);
				match(MASTER_LOG_POS);
				setState(4474);
				match(EQUAL_SYMBOL);
				setState(4475);
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4476);
				match(RELAY_LOG_FILE);
				setState(4477);
				match(EQUAL_SYMBOL);
				setState(4478);
				match(STRING_LITERAL);
				setState(4479);
				match(COMMA);
				setState(4480);
				match(RELAY_LOG_POS);
				setState(4481);
				match(EQUAL_SYMBOL);
				setState(4482);
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4483);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPluginDirConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPluginDirConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPluginDirConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptUser;
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultAuthConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultAuthConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultAuthConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPassword;
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_connectionOption);
		try {
			setState(4498);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4486);
				match(USER);
				setState(4487);
				match(EQUAL_SYMBOL);
				setState(4488);
				((UserConnectionOptionContext)_localctx).conOptUser = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4489);
				match(PASSWORD);
				setState(4490);
				match(EQUAL_SYMBOL);
				setState(4491);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4492);
				match(DEFAULT_AUTH);
				setState(4493);
				match(EQUAL_SYMBOL);
				setState(4494);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4495);
				match(PLUGIN_DIR);
				setState(4496);
				match(EQUAL_SYMBOL);
				setState(4497);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GtuidSetContext extends ParserRuleContext {
		public List<UuidSetContext> uuidSet() {
			return getRuleContexts(UuidSetContext.class);
		}
		public UuidSetContext uuidSet(int i) {
			return getRuleContext(UuidSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGtuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGtuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGtuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GtuidSetContext gtuidSet() throws RecognitionException {
		GtuidSetContext _localctx = new GtuidSetContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_gtuidSet);
		int _la;
		try {
			setState(4509);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4500);
				uuidSet();
				setState(4505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4501);
					match(COMMA);
					setState(4502);
					uuidSet();
					}
					}
					setState(4507);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4508);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4511);
			match(XA);
			setState(4512);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4513);
			xid();
			setState(4515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(4514);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaEndTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaEndTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaEndTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4517);
			match(XA);
			setState(4518);
			match(END);
			setState(4519);
			xid();
			setState(4525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(4520);
				match(SUSPEND);
				setState(4523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4521);
					match(FOR);
					setState(4522);
					match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4527);
			match(XA);
			setState(4528);
			match(PREPARE);
			setState(4529);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_xaCommitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4531);
			match(XA);
			setState(4532);
			match(COMMIT);
			setState(4533);
			xid();
			setState(4536);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(4534);
				match(ONE);
				setState(4535);
				match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4538);
			match(XA);
			setState(4539);
			match(ROLLBACK);
			setState(4540);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaRecoverWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaRecoverWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXaRecoverWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_xaRecoverWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4542);
			match(XA);
			setState(4543);
			match(RECOVER);
			setState(4546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(4544);
				match(CONVERT);
				setState(4545);
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrepareStatementContext extends ParserRuleContext {
		public Token query;
		public Token variable;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4548);
			match(PREPARE);
			setState(4549);
			uid();
			setState(4550);
			match(FROM);
			setState(4553);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				{
				setState(4551);
				((PrepareStatementContext)_localctx).query = match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				setState(4552);
				((PrepareStatementContext)_localctx).variable = match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4555);
			match(EXECUTE);
			setState(4556);
			uid();
			setState(4559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4557);
				match(USING);
				setState(4558);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeallocatePrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeallocatePrepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeallocatePrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4561);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4562);
			match(PREPARE);
			setState(4563);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoutineBodyContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_routineBody);
		try {
			setState(4567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4565);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4566);
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BlockStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBlockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBlockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBlockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(4569);
				uid();
				setState(4570);
				match(COLON_SYMB);
				}
				break;
			}
			setState(4574);
			match(BEGIN);
			setState(4580);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,655,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4575);
					declareVariable();
					setState(4576);
					match(SEMI);
					}
					} 
				}
				setState(4582);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,655,_ctx);
			}
			setState(4588);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,656,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4583);
					declareCondition();
					setState(4584);
					match(SEMI);
					}
					} 
				}
				setState(4590);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,656,_ctx);
			}
			setState(4596);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,657,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4591);
					declareCursor();
					setState(4592);
					match(SEMI);
					}
					} 
				}
				setState(4598);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,657,_ctx);
			}
			setState(4604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DECLARE) {
				{
				{
				setState(4599);
				declareHandler();
				setState(4600);
				match(SEMI);
				}
				}
				setState(4606);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4610);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,659,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4607);
					procedureSqlStatement();
					}
					} 
				}
				setState(4612);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,659,_ctx);
			}
			setState(4613);
			match(END);
			setState(4615);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(4614);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(MySqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(MySqlParser.CASE, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4617);
			match(CASE);
			setState(4620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				{
				setState(4618);
				uid();
				}
				break;
			case 2:
				{
				setState(4619);
				expression(0);
				}
				break;
			}
			setState(4623); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4622);
				caseAlternative();
				}
				}
				setState(4625); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4627);
				match(ELSE);
				setState(4629); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4628);
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4631); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,663,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4635);
			match(END);
			setState(4636);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<TerminalNode> IF() { return getTokens(MySqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(MySqlParser.IF, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4638);
			match(IF);
			setState(4639);
			expression(0);
			setState(4640);
			match(THEN);
			setState(4642); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4641);
					((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4644); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,665,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4646);
				elifAlternative();
				}
				}
				setState(4651);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4652);
				match(ELSE);
				setState(4654); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4653);
						((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
						((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4656); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,667,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4660);
			match(END);
			setState(4661);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(MySqlParser.ITERATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIterateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4663);
			match(ITERATE);
			setState(4664);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(MySqlParser.LEAVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLeaveStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4666);
			match(LEAVE);
			setState(4667);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(MySqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(MySqlParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoopStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				setState(4669);
				uid();
				setState(4670);
				match(COLON_SYMB);
				}
			}

			setState(4674);
			match(LOOP);
			setState(4676); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4675);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4678); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,670,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4680);
			match(END);
			setState(4681);
			match(LOOP);
			setState(4683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				setState(4682);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(MySqlParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(MySqlParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepeatStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepeatStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4688);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				setState(4685);
				uid();
				setState(4686);
				match(COLON_SYMB);
				}
			}

			setState(4690);
			match(REPEAT);
			setState(4692); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4691);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4694); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,673,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4696);
			match(UNTIL);
			setState(4697);
			expression(0);
			setState(4698);
			match(END);
			setState(4699);
			match(REPEAT);
			setState(4701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				setState(4700);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(MySqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReturnStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4703);
			match(RETURN);
			setState(4704);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(MySqlParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(MySqlParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWhileStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				setState(4706);
				uid();
				setState(4707);
				match(COLON_SYMB);
				}
			}

			setState(4711);
			match(WHILE);
			setState(4712);
			expression(0);
			setState(4713);
			match(DO);
			setState(4715); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4714);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4717); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,676,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4719);
			match(END);
			setState(4720);
			match(WHILE);
			setState(4722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 324545768285552640L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055071174737L) != 0 || (((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & 67109505L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17174494689L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & -1099511627777L) != 0 || (((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -2882305960540372993L) != 0 || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & -4398063288321L) != 0 || (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & -16325548649218049L) != 0 || (((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & -81064793296864001L) != 0 || (((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & -68719476801L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & -2779573985216513L) != 0 || (((_la - 727)) & ~0x3f) == 0 && ((1L << (_la - 727)) & -9L) != 0 || (((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & -769L) != 0 || (((_la - 855)) & ~0x3f) == 0 && ((1L << (_la - 855)) & -1L) != 0 || (((_la - 919)) & ~0x3f) == 0 && ((1L << (_la - 919)) & -1L) != 0 || (((_la - 983)) & ~0x3f) == 0 && ((1L << (_la - 983)) & -1L) != 0 || (((_la - 1047)) & ~0x3f) == 0 && ((1L << (_la - 1047)) & 18014398509481983L) != 0 || (((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 25807552513L) != 0) {
				{
				setState(4721);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCloseCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCloseCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCloseCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOpenCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOpenCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOpenCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(MySqlParser.FETCH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFetchCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFetchCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFetchCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_cursorStatement);
		int _la;
		try {
			setState(4739);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4724);
				match(CLOSE);
				setState(4725);
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4726);
				match(FETCH);
				setState(4731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
				case 1:
					{
					setState(4728);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4727);
						match(NEXT);
						}
					}

					setState(4730);
					match(FROM);
					}
					break;
				}
				setState(4733);
				uid();
				setState(4734);
				match(INTO);
				setState(4735);
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4737);
				match(OPEN);
				setState(4738);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4741);
			match(DECLARE);
			setState(4742);
			uidList();
			setState(4743);
			dataType();
			setState(4746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4744);
				match(DEFAULT);
				setState(4745);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4748);
			match(DECLARE);
			setState(4749);
			uid();
			setState(4750);
			match(CONDITION);
			setState(4751);
			match(FOR);
			setState(4758);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				setState(4752);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(4753);
				match(SQLSTATE);
				setState(4755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4754);
					match(VALUE);
					}
				}

				setState(4757);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(MySqlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4760);
			match(DECLARE);
			setState(4761);
			uid();
			setState(4762);
			match(CURSOR);
			setState(4763);
			match(FOR);
			setState(4764);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(MySqlParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(MySqlParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(MySqlParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareHandler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeclareHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4766);
			match(DECLARE);
			setState(4767);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4768);
			match(HANDLER);
			setState(4769);
			match(FOR);
			setState(4770);
			handlerConditionValue();
			setState(4775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4771);
				match(COMMA);
				setState(4772);
				handlerConditionValue();
				}
				}
				setState(4777);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4778);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionWarning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionWarning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionWarning(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionCode(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionNotfound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionNotfound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionNotfound(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionState(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionState(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionState(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionException(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionException(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionException(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_handlerConditionValue);
		int _la;
		try {
			setState(4791);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4780);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4781);
				match(SQLSTATE);
				setState(4783);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4782);
					match(VALUE);
					}
				}

				setState(4785);
				match(STRING_LITERAL);
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4786);
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4787);
				match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4788);
				match(NOT);
				setState(4789);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4790);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitProcedureSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(4793);
				compoundStatement();
				}
				break;
			case 2:
				{
				setState(4794);
				sqlStatement();
				}
				break;
			}
			setState(4797);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseAlternativeContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_caseAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4799);
			match(WHEN);
			setState(4802);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				{
				setState(4800);
				constant();
				}
				break;
			case 2:
				{
				setState(4801);
				expression(0);
				}
				break;
			}
			setState(4804);
			match(THEN);
			setState(4806); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4805);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4808); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,689,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElifAlternativeContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(MySqlParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterElifAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitElifAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitElifAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_elifAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4810);
			match(ELSEIF);
			setState(4811);
			expression(0);
			setState(4812);
			match(THEN);
			setState(4814); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4813);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4816); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,690,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterUserContext extends ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	 
		public AlterUserContext() { }
		public void copyFrom(AlterUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterUserMysqlV80Context extends AlterUserContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(MySqlParser.ATTRIBUTE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterUserMysqlV80Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysqlV80(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysqlV80(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV80(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterUserMysqlV56Context extends AlterUserContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_alterUser);
		int _la;
		try {
			setState(4891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4818);
				match(ALTER);
				setState(4819);
				match(USER);
				setState(4820);
				userSpecification();
				setState(4825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4821);
					match(COMMA);
					setState(4822);
					userSpecification();
					}
					}
					setState(4827);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV80Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4828);
				match(ALTER);
				setState(4829);
				match(USER);
				setState(4831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4830);
					ifExists();
					}
				}

				setState(4833);
				userAuthOption();
				setState(4838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4834);
					match(COMMA);
					setState(4835);
					userAuthOption();
					}
					}
					setState(4840);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4841);
					match(REQUIRE);
					setState(4853);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4842);
						((AlterUserMysqlV80Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4843);
						tlsOption();
						setState(4850);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4845);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4844);
								match(AND);
								}
							}

							setState(4847);
							tlsOption();
							}
							}
							setState(4852);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4857);
					match(WITH);
					setState(4859); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4858);
						userResourceOption();
						}
						}
						setState(4861); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la - 496)) & ~0x3f) == 0 && ((1L << (_la - 496)) & 51L) != 0 );
					}
				}

				setState(4869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==FAILED_LOGIN_ATTEMPTS || _la==PASSWORD || _la==PASSWORD_LOCK_TIME) {
					{
					setState(4867);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FAILED_LOGIN_ATTEMPTS:
					case PASSWORD:
					case PASSWORD_LOCK_TIME:
						{
						setState(4865);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4866);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4871);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4876);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMENT:
					{
					setState(4872);
					match(COMMENT);
					setState(4873);
					match(STRING_LITERAL);
					}
					break;
				case ATTRIBUTE:
					{
					setState(4874);
					match(ATTRIBUTE);
					setState(4875);
					match(STRING_LITERAL);
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterUserMysqlV80Context(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4878);
				match(ALTER);
				setState(4879);
				match(USER);
				setState(4881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
				case 1:
					{
					setState(4880);
					ifExists();
					}
					break;
				}
				setState(4885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
				case 1:
					{
					setState(4883);
					userName();
					}
					break;
				case 2:
					{
					setState(4884);
					uid();
					}
					break;
				}
				setState(4887);
				match(DEFAULT);
				setState(4888);
				match(ROLE);
				setState(4889);
				roleOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserContext extends ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	 
		public CreateUserContext() { }
		public void copyFrom(CreateUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserMysqlV56Context extends CreateUserContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserMysqlV80Context extends CreateUserContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(MySqlParser.ATTRIBUTE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public CreateUserMysqlV80Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysqlV80(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysqlV80(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV80(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_createUser);
		int _la;
		try {
			setState(4958);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4893);
				match(CREATE);
				setState(4894);
				match(USER);
				setState(4895);
				userAuthOption();
				setState(4900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4896);
					match(COMMA);
					setState(4897);
					userAuthOption();
					}
					}
					setState(4902);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV80Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4903);
				match(CREATE);
				setState(4904);
				match(USER);
				setState(4906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4905);
					ifNotExists();
					}
				}

				setState(4908);
				userAuthOption();
				setState(4913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4909);
					match(COMMA);
					setState(4910);
					userAuthOption();
					}
					}
					setState(4915);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(4916);
					match(DEFAULT);
					setState(4917);
					match(ROLE);
					setState(4918);
					roleOption();
					}
				}

				setState(4935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4921);
					match(REQUIRE);
					setState(4933);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4922);
						((CreateUserMysqlV80Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4923);
						tlsOption();
						setState(4930);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4925);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4924);
								match(AND);
								}
							}

							setState(4927);
							tlsOption();
							}
							}
							setState(4932);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4937);
					match(WITH);
					setState(4939); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4938);
						userResourceOption();
						}
						}
						setState(4941); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la - 496)) & ~0x3f) == 0 && ((1L << (_la - 496)) & 51L) != 0 );
					}
				}

				setState(4949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==FAILED_LOGIN_ATTEMPTS || _la==PASSWORD || _la==PASSWORD_LOCK_TIME) {
					{
					setState(4947);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FAILED_LOGIN_ATTEMPTS:
					case PASSWORD:
					case PASSWORD_LOCK_TIME:
						{
						setState(4945);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4946);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4951);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4956);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMENT:
					{
					setState(4952);
					match(COMMENT);
					setState(4953);
					match(STRING_LITERAL);
					}
					break;
				case ATTRIBUTE:
					{
					setState(4954);
					match(ATTRIBUTE);
					setState(4955);
					match(STRING_LITERAL);
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4960);
			match(DROP);
			setState(4961);
			match(USER);
			setState(4963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4962);
				ifExists();
				}
			}

			setState(4965);
			userName();
			setState(4970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4966);
				match(COMMA);
				setState(4967);
				userName();
				}
				}
				setState(4972);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(MySqlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(MySqlParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrantStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrantStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGrantStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			setState(5066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4973);
				match(GRANT);
				setState(4974);
				privelegeClause();
				setState(4979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4975);
					match(COMMA);
					setState(4976);
					privelegeClause();
					}
					}
					setState(4981);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4982);
				match(ON);
				setState(4984);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
				case 1:
					{
					setState(4983);
					((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4986);
				privilegeLevel();
				setState(4987);
				match(TO);
				setState(4988);
				userAuthOption();
				setState(4993);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4989);
					match(COMMA);
					setState(4990);
					userAuthOption();
					}
					}
					setState(4995);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4996);
					match(REQUIRE);
					setState(5008);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4997);
						((GrantStatementContext)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4998);
						tlsOption();
						setState(5005);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(5000);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4999);
								match(AND);
								}
							}

							setState(5002);
							tlsOption();
							}
							}
							setState(5007);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(5021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5012);
					match(WITH);
					setState(5018);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,730,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5016);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case GRANT:
								{
								setState(5013);
								match(GRANT);
								setState(5014);
								match(OPTION);
								}
								break;
							case MAX_CONNECTIONS_PER_HOUR:
							case MAX_QUERIES_PER_HOUR:
							case MAX_UPDATES_PER_HOUR:
							case MAX_USER_CONNECTIONS:
								{
								setState(5015);
								userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						setState(5020);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,730,_ctx);
					}
					}
				}

				setState(5029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5023);
					match(AS);
					setState(5024);
					userName();
					setState(5025);
					match(WITH);
					setState(5026);
					match(ROLE);
					setState(5027);
					roleOption();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5031);
				match(GRANT);
				setState(5034);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
				case 1:
					{
					setState(5032);
					userName();
					}
					break;
				case 2:
					{
					setState(5033);
					uid();
					}
					break;
				}
				setState(5043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5036);
					match(COMMA);
					setState(5039);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
					case 1:
						{
						setState(5037);
						userName();
						}
						break;
					case 2:
						{
						setState(5038);
						uid();
						}
						break;
					}
					}
					}
					setState(5045);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5046);
				match(TO);
				setState(5049);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
				case 1:
					{
					setState(5047);
					userName();
					}
					break;
				case 2:
					{
					setState(5048);
					uid();
					}
					break;
				}
				setState(5058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5051);
					match(COMMA);
					setState(5054);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
					case 1:
						{
						setState(5052);
						userName();
						}
						break;
					case 2:
						{
						setState(5053);
						uid();
						}
						break;
					}
					}
					}
					setState(5060);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5064);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5061);
					match(WITH);
					setState(5062);
					match(ADMIN);
					setState(5063);
					match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleOptionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode EXCEPT() { return getToken(MySqlParser.EXCEPT, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RoleOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoleOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoleOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoleOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOptionContext roleOption() throws RecognitionException {
		RoleOptionContext _localctx = new RoleOptionContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_roleOption);
		int _la;
		try {
			setState(5090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5068);
				match(DEFAULT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5069);
				match(NONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5070);
				match(ALL);
				setState(5080);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT) {
					{
					setState(5071);
					match(EXCEPT);
					setState(5072);
					userName();
					setState(5077);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5073);
						match(COMMA);
						setState(5074);
						userName();
						}
						}
						setState(5079);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5082);
				userName();
				setState(5087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5083);
					match(COMMA);
					setState(5084);
					userName();
					}
					}
					setState(5089);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GrantProxyContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext userName;
		public List<UserNameContext> toOther = new ArrayList<UserNameContext>();
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrantProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrantProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGrantProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5092);
			match(GRANT);
			setState(5093);
			match(PROXY);
			setState(5094);
			match(ON);
			setState(5095);
			((GrantProxyContext)_localctx).fromFirst = userName();
			setState(5096);
			match(TO);
			setState(5097);
			((GrantProxyContext)_localctx).toFirst = userName();
			setState(5102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5098);
				match(COMMA);
				setState(5099);
				((GrantProxyContext)_localctx).userName = userName();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).userName);
				}
				}
				setState(5104);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5105);
				match(WITH);
				setState(5106);
				match(GRANT);
				setState(5107);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5110);
			match(RENAME);
			setState(5111);
			match(USER);
			setState(5112);
			renameUserClause();
			setState(5117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5113);
				match(COMMA);
				setState(5114);
				renameUserClause();
				}
				}
				setState(5119);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDetailRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDetailRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDetailRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RoleRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RoleRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoleRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoleRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoleRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShortRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShortRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShortRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_revokeStatement);
		int _la;
		try {
			setState(5190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5120);
				match(REVOKE);
				setState(5121);
				privelegeClause();
				setState(5126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5122);
					match(COMMA);
					setState(5123);
					privelegeClause();
					}
					}
					setState(5128);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5129);
				match(ON);
				setState(5131);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,749,_ctx) ) {
				case 1:
					{
					setState(5130);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5133);
				privilegeLevel();
				setState(5134);
				match(FROM);
				setState(5135);
				userName();
				setState(5140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5136);
					match(COMMA);
					setState(5137);
					userName();
					}
					}
					setState(5142);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5143);
				match(REVOKE);
				setState(5144);
				match(ALL);
				setState(5146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(5145);
					match(PRIVILEGES);
					}
				}

				setState(5148);
				match(COMMA);
				setState(5149);
				match(GRANT);
				setState(5150);
				match(OPTION);
				setState(5151);
				match(FROM);
				setState(5152);
				userName();
				setState(5157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5153);
					match(COMMA);
					setState(5154);
					userName();
					}
					}
					setState(5159);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5160);
				match(REVOKE);
				setState(5163);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
				case 1:
					{
					setState(5161);
					userName();
					}
					break;
				case 2:
					{
					setState(5162);
					uid();
					}
					break;
				}
				setState(5172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5165);
					match(COMMA);
					setState(5168);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
					case 1:
						{
						setState(5166);
						userName();
						}
						break;
					case 2:
						{
						setState(5167);
						uid();
						}
						break;
					}
					}
					}
					setState(5174);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5175);
				match(FROM);
				setState(5178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
				case 1:
					{
					setState(5176);
					userName();
					}
					break;
				case 2:
					{
					setState(5177);
					uid();
					}
					break;
				}
				setState(5187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5180);
					match(COMMA);
					setState(5183);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
					case 1:
						{
						setState(5181);
						userName();
						}
						break;
					case 2:
						{
						setState(5182);
						uid();
						}
						break;
					}
					}
					}
					setState(5189);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RevokeProxyContext extends ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext userName;
		public List<UserNameContext> fromOther = new ArrayList<UserNameContext>();
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRevokeProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRevokeProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRevokeProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5192);
			match(REVOKE);
			setState(5193);
			match(PROXY);
			setState(5194);
			match(ON);
			setState(5195);
			((RevokeProxyContext)_localctx).onUser = userName();
			setState(5196);
			match(FROM);
			setState(5197);
			((RevokeProxyContext)_localctx).fromFirst = userName();
			setState(5202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5198);
				match(COMMA);
				setState(5199);
				((RevokeProxyContext)_localctx).userName = userName();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).userName);
				}
				}
				setState(5204);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetPasswordStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPasswordStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetPasswordStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetPasswordStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetPasswordStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_setPasswordStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5205);
			match(SET);
			setState(5206);
			match(PASSWORD);
			setState(5209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5207);
				match(FOR);
				setState(5208);
				userName();
				}
			}

			setState(5211);
			match(EQUAL_SYMBOL);
			setState(5214);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				setState(5212);
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				setState(5213);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserSpecificationContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5216);
			userName();
			setState(5217);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ModuleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AuthenticationRuleContext authenticationRule() {
			return getRuleContext(AuthenticationRuleContext.class,0);
		}
		public ModuleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterModuleAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitModuleAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitModuleAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode RETAIN() { return getToken(MySqlParser.RETAIN, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public Token hashed;
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHashAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHashAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHashAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_userAuthOption);
		int _la;
		try {
			setState(5240);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
			case 1:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5219);
				userName();
				setState(5220);
				match(IDENTIFIED);
				setState(5221);
				match(BY);
				setState(5222);
				match(PASSWORD);
				setState(5223);
				((HashAuthOptionContext)_localctx).hashed = match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5225);
				userName();
				setState(5226);
				match(IDENTIFIED);
				setState(5227);
				match(BY);
				setState(5228);
				match(STRING_LITERAL);
				setState(5232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETAIN) {
					{
					setState(5229);
					match(RETAIN);
					setState(5230);
					match(CURRENT);
					setState(5231);
					match(PASSWORD);
					}
				}

				}
				break;
			case 3:
				_localctx = new ModuleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5234);
				userName();
				setState(5235);
				match(IDENTIFIED);
				setState(5236);
				match(WITH);
				setState(5237);
				authenticationRule();
				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5239);
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AuthenticationRuleContext extends ParserRuleContext {
		public AuthenticationRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authenticationRule; }
	 
		public AuthenticationRuleContext() { }
		public void copyFrom(AuthenticationRuleContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PasswordModuleOptionContext extends AuthenticationRuleContext {
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordModuleOptionContext(AuthenticationRuleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordModuleOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordModuleOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordModuleOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ModuleContext extends AuthenticationRuleContext {
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public ModuleContext(AuthenticationRuleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterModule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitModule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitModule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthenticationRuleContext authenticationRule() throws RecognitionException {
		AuthenticationRuleContext _localctx = new AuthenticationRuleContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_authenticationRule);
		int _la;
		try {
			setState(5251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
			case 1:
				_localctx = new ModuleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5242);
				authPlugin();
				setState(5245);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
				case 1:
					{
					setState(5243);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==BY || _la==USING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5244);
					match(STRING_LITERAL);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new PasswordModuleOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5247);
				authPlugin();
				setState(5248);
				match(USING);
				setState(5249);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(MySqlParser.SSL, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTlsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTlsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTlsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_tlsOption);
		try {
			setState(5261);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5253);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(5254);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(5255);
				match(CIPHER);
				setState(5256);
				match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(5257);
				match(ISSUER);
				setState(5258);
				match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(5259);
				match(SUBJECT);
				setState(5260);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserResourceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserResourceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserResourceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_userResourceOption);
		try {
			setState(5271);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5263);
				match(MAX_QUERIES_PER_HOUR);
				setState(5264);
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5265);
				match(MAX_UPDATES_PER_HOUR);
				setState(5266);
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(5267);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(5268);
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5269);
				match(MAX_USER_CONNECTIONS);
				setState(5270);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public TerminalNode HISTORY() { return getToken(MySqlParser.HISTORY, 0); }
		public TerminalNode REUSE() { return getToken(MySqlParser.REUSE, 0); }
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode OPTIONAL() { return getToken(MySqlParser.OPTIONAL, 0); }
		public TerminalNode FAILED_LOGIN_ATTEMPTS() { return getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode PASSWORD_LOCK_TIME() { return getToken(MySqlParser.PASSWORD_LOCK_TIME, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySqlParser.UNBOUNDED, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserPasswordOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserPasswordOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_userPasswordOption);
		int _la;
		try {
			setState(5311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5273);
				match(PASSWORD);
				setState(5274);
				match(EXPIRE);
				setState(5281);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(5275);
					((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
					}
					break;
				case NEVER:
					{
					setState(5276);
					((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
					}
					break;
				case INTERVAL:
					{
					setState(5277);
					((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
					setState(5278);
					decimalLiteral();
					setState(5279);
					match(DAY);
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case ATTRIBUTE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case ACCOUNT:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMENT:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FAILED_LOGIN_ATTEMPTS:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5283);
				match(PASSWORD);
				setState(5284);
				match(HISTORY);
				setState(5287);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(5285);
					match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(5286);
					decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5289);
				match(PASSWORD);
				setState(5290);
				match(REUSE);
				setState(5291);
				match(INTERVAL);
				setState(5296);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(5292);
					match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(5293);
					decimalLiteral();
					setState(5294);
					match(DAY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5298);
				match(PASSWORD);
				setState(5299);
				match(REQUIRE);
				setState(5300);
				match(CURRENT);
				setState(5302);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==OPTIONAL) {
					{
					setState(5301);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==OPTIONAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5304);
				match(FAILED_LOGIN_ATTEMPTS);
				setState(5305);
				decimalLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5306);
				match(PASSWORD_LOCK_TIME);
				setState(5309);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(5307);
					decimalLiteral();
					}
					break;
				case UNBOUNDED:
					{
					setState(5308);
					match(UNBOUNDED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5313);
			match(ACCOUNT);
			setState(5314);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivelegeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivelegeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivelegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5316);
			privilege();
			setState(5321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5317);
				match(LR_BRACKET);
				setState(5318);
				uidList();
				setState(5319);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(MySqlParser.USAGE, 0); }
		public TerminalNode APPLICATION_PASSWORD_ADMIN() { return getToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FLUSH_OPTIMIZER_COSTS() { return getToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0); }
		public TerminalNode FLUSH_STATUS() { return getToken(MySqlParser.FLUSH_STATUS, 0); }
		public TerminalNode FLUSH_TABLES() { return getToken(MySqlParser.FLUSH_TABLES, 0); }
		public TerminalNode FLUSH_USER_RESOURCES() { return getToken(MySqlParser.FLUSH_USER_RESOURCES, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INNODB_REDO_LOG_ENABLE() { return getToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode PASSWORDLESS_USER_ADMIN() { return getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode SERVICE_CONNECTION_ADMIN() { return getToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode S3() { return getToken(MySqlParser.S3, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode INVOKE() { return getToken(MySqlParser.INVOKE, 0); }
		public TerminalNode LAMBDA() { return getToken(MySqlParser.LAMBDA, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_privilege);
		int _la;
		try {
			setState(5411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5323);
				match(ALL);
				setState(5325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(5324);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5327);
				match(ALTER);
				setState(5329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(5328);
					match(ROUTINE);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5331);
				match(CREATE);
				setState(5339);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(5332);
					match(TEMPORARY);
					setState(5333);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(5334);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(5335);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(5336);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(5337);
					match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					setState(5338);
					match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5341);
				match(DELETE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5342);
				match(DROP);
				setState(5344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE) {
					{
					setState(5343);
					match(ROLE);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5346);
				match(EVENT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5347);
				match(EXECUTE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5348);
				match(FILE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5349);
				match(GRANT);
				setState(5350);
				match(OPTION);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5351);
				match(INDEX);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5352);
				match(INSERT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5353);
				match(LOCK);
				setState(5354);
				match(TABLES);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5355);
				match(PROCESS);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5356);
				match(PROXY);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5357);
				match(REFERENCES);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5358);
				match(RELOAD);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5359);
				match(REPLICATION);
				setState(5360);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5361);
				match(SELECT);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5362);
				match(SHOW);
				setState(5363);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5364);
				match(SHUTDOWN);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5365);
				match(SUPER);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5366);
				match(TRIGGER);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5367);
				match(UPDATE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5368);
				match(USAGE);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(5369);
				match(APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(5370);
				match(AUDIT_ADMIN);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(5371);
				match(BACKUP_ADMIN);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(5372);
				match(BINLOG_ADMIN);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(5373);
				match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(5374);
				match(CLONE_ADMIN);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(5375);
				match(CONNECTION_ADMIN);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(5376);
				match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(5377);
				match(FIREWALL_ADMIN);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(5378);
				match(FIREWALL_USER);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(5379);
				match(FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(5380);
				match(FLUSH_STATUS);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(5381);
				match(FLUSH_TABLES);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(5382);
				match(FLUSH_USER_RESOURCES);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(5383);
				match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(5384);
				match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(5385);
				match(INNODB_REDO_LOG_ENABLE);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(5386);
				match(NDB_STORED_USER);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(5387);
				match(PASSWORDLESS_USER_ADMIN);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(5388);
				match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(5389);
				match(REPLICATION_APPLIER);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(5390);
				match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(5391);
				match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(5392);
				match(RESOURCE_GROUP_USER);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(5393);
				match(ROLE_ADMIN);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(5394);
				match(SERVICE_CONNECTION_ADMIN);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(5395);
				match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(5396);
				match(SET_USER_ID);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(5397);
				match(SHOW_ROUTINE);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(5398);
				match(SYSTEM_USER);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(5399);
				match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(5400);
				match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(5401);
				match(VERSION_TOKEN_ADMIN);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(5402);
				match(XA_RECOVER_ADMIN);
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(5403);
				match(LOAD);
				setState(5404);
				match(FROM);
				setState(5405);
				match(S3);
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(5406);
				match(SELECT);
				setState(5407);
				match(INTO);
				setState(5408);
				match(S3);
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(5409);
				match(INVOKE);
				setState(5410);
				match(LAMBDA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteSchemaPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteSchemaPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteSchemaPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext dottedId() {
			return getRuleContext(DottedIdContext.class,0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel2(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteFullTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteFullTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGlobalPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGlobalPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGlobalPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefiniteTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentSchemaPriviLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentSchemaPriviLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCurrentSchemaPriviLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_privilegeLevel);
		try {
			setState(5429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5413);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5414);
				match(STAR);
				setState(5415);
				match(DOT);
				setState(5416);
				match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5417);
				uid();
				setState(5418);
				match(DOT);
				setState(5419);
				match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5421);
				uid();
				setState(5422);
				match(DOT);
				setState(5423);
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5425);
				uid();
				setState(5426);
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5428);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RenameUserClauseContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameUserClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5431);
			((RenameUserClauseContext)_localctx).fromFirst = userName();
			setState(5432);
			match(TO);
			setState(5433);
			((RenameUserClauseContext)_localctx).toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public List<TerminalNode> HISTOGRAM() { return getTokens(MySqlParser.HISTOGRAM); }
		public TerminalNode HISTOGRAM(int i) {
			return getToken(MySqlParser.HISTOGRAM, i);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode BUCKETS() { return getToken(MySqlParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAnalyzeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAnalyzeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5435);
			match(ANALYZE);
			setState(5437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5436);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5439);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5440);
			tables();
			setState(5458);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
			case 1:
				{
				setState(5441);
				match(UPDATE);
				setState(5442);
				match(HISTOGRAM);
				setState(5443);
				match(ON);
				setState(5444);
				fullColumnName();
				setState(5449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5445);
					match(COMMA);
					setState(5446);
					fullColumnName();
					}
					}
					setState(5451);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5452);
					match(WITH);
					setState(5453);
					decimalLiteral();
					setState(5454);
					match(BUCKETS);
					}
				}

				}
				break;
			}
			setState(5471);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
			case 1:
				{
				setState(5460);
				match(DROP);
				setState(5461);
				match(HISTOGRAM);
				setState(5462);
				match(ON);
				setState(5463);
				fullColumnName();
				setState(5468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5464);
					match(COMMA);
					setState(5465);
					fullColumnName();
					}
					}
					setState(5470);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_checkTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5473);
			match(CHECK);
			setState(5474);
			match(TABLE);
			setState(5475);
			tables();
			setState(5479);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(5476);
				checkTableOption();
				}
				}
				setState(5481);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChecksumTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChecksumTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5482);
			match(CHECKSUM);
			setState(5483);
			match(TABLE);
			setState(5484);
			tables();
			setState(5486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(5485);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOptimizeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOptimizeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5488);
			match(OPTIMIZE);
			setState(5490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5489);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5492);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5493);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepairTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5495);
			match(REPAIR);
			setState(5497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5496);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5499);
			match(TABLE);
			setState(5500);
			tables();
			setState(5502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(5501);
				match(QUICK);
				}
			}

			setState(5505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(5504);
				match(EXTENDED);
				}
			}

			setState(5508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(5507);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_checkTableOption);
		try {
			setState(5517);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5510);
				match(FOR);
				setState(5511);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5512);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(5513);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(5514);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5515);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(5516);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUdfunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUdfunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateUdfunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5519);
			match(CREATE);
			setState(5521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(5520);
				match(AGGREGATE);
				}
			}

			setState(5523);
			match(FUNCTION);
			setState(5525);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
			case 1:
				{
				setState(5524);
				ifNotExists();
				}
				break;
			}
			setState(5527);
			uid();
			setState(5528);
			match(RETURNS);
			setState(5529);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & 261L) != 0 || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5530);
			match(SONAME);
			setState(5531);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5533);
			match(INSTALL);
			setState(5534);
			match(PLUGIN);
			setState(5535);
			uid();
			setState(5536);
			match(SONAME);
			setState(5537);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUninstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUninstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5539);
			match(UNINSTALL);
			setState(5540);
			match(PLUGIN);
			setState(5541);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetTransactionContext extends SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return getRuleContext(SetTransactionStatementContext.class,0);
		}
		public SetTransactionContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetCharsetContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetNamesContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public SetNamesContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetNames(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetPasswordContext extends SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return getRuleContext(SetPasswordStatementContext.class,0);
		}
		public SetPasswordContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return getRuleContext(SetAutocommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetAutocommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetAutocommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetAutocommit(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetNewValueInsideTriggerContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(MySqlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(MySqlParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetNewValueInsideTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetNewValueInsideTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetNewValueInsideTrigger(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetVariableContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(MySqlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(MySqlParser.VAR_ASSIGN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_setStatement);
		int _la;
		try {
			setState(5595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5543);
				match(SET);
				setState(5544);
				variableClause();
				setState(5545);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5548);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
				case 1:
					{
					setState(5546);
					expression(0);
					}
					break;
				case 2:
					{
					setState(5547);
					match(ON);
					}
					break;
				}
				setState(5559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5550);
					match(COMMA);
					setState(5551);
					variableClause();
					setState(5552);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5555);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
					case 1:
						{
						setState(5553);
						expression(0);
						}
						break;
					case 2:
						{
						setState(5554);
						match(ON);
						}
						break;
					}
					}
					}
					setState(5561);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5562);
				match(SET);
				setState(5563);
				charSet();
				setState(5566);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5564);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(5565);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5568);
				match(SET);
				setState(5569);
				match(NAMES);
				setState(5576);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5570);
					charsetName();
					setState(5573);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(5571);
						match(COLLATE);
						setState(5572);
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(5575);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5578);
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5579);
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5580);
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5581);
				match(SET);
				setState(5582);
				fullId();
				setState(5583);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5584);
				expression(0);
				setState(5592);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5585);
					match(COMMA);
					setState(5586);
					fullId();
					setState(5587);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5588);
					expression(0);
					}
					}
					setState(5594);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowOpenTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowOpenTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGlobalInfo(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateFullIdObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateFullIdObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateFullIdObject(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCountErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCountErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCountErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowObjectFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowObjectFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowObjectFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSchemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowLogEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowLogEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowLogEvents(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowMasterLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowMasterLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowMasterLogs(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSlaveStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSlaveStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowRoutine(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_showStatement);
		int _la;
		try {
			setState(5750);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,828,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5597);
				match(SHOW);
				setState(5598);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5599);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5600);
				match(SHOW);
				setState(5601);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5602);
				match(EVENTS);
				setState(5605);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5603);
					match(IN);
					setState(5604);
					((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(5609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(5607);
					match(FROM);
					setState(5608);
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				setState(5618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5611);
					match(LIMIT);
					setState(5615);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
					case 1:
						{
						setState(5612);
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(5613);
						match(COMMA);
						}
						break;
					}
					setState(5617);
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5620);
				match(SHOW);
				setState(5621);
				showCommonEntity();
				setState(5623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5622);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5625);
				match(SHOW);
				setState(5627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5626);
					match(FULL);
					}
				}

				setState(5629);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5630);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5631);
				tableName();
				setState(5634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5632);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5633);
					uid();
					}
				}

				setState(5637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5636);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5639);
				match(SHOW);
				setState(5640);
				match(CREATE);
				setState(5641);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5643);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					setState(5642);
					ifNotExists();
					}
					break;
				}
				setState(5645);
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5646);
				match(SHOW);
				setState(5647);
				match(CREATE);
				setState(5648);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 36283883716609L) != 0 || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5649);
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5650);
				match(SHOW);
				setState(5651);
				match(CREATE);
				setState(5652);
				match(USER);
				setState(5653);
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5654);
				match(SHOW);
				setState(5655);
				match(ENGINE);
				setState(5656);
				engineName();
				setState(5657);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5659);
				match(SHOW);
				setState(5660);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5661);
				match(SHOW);
				setState(5662);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5670);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5663);
					match(LIMIT);
					setState(5667);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
					case 1:
						{
						setState(5664);
						((ShowErrorsContext)_localctx).offset = decimalLiteral();
						setState(5665);
						match(COMMA);
						}
						break;
					}
					setState(5669);
					((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5672);
				match(SHOW);
				setState(5673);
				match(COUNT);
				setState(5674);
				match(LR_BRACKET);
				setState(5675);
				match(STAR);
				setState(5676);
				match(RR_BRACKET);
				setState(5677);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5678);
				match(SHOW);
				setState(5679);
				showSchemaEntity();
				setState(5682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5680);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5681);
					uid();
					}
				}

				setState(5685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5684);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5687);
				match(SHOW);
				setState(5688);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5689);
				match(CODE);
				setState(5690);
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5691);
				match(SHOW);
				setState(5692);
				match(GRANTS);
				setState(5695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5693);
					match(FOR);
					setState(5694);
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5697);
				match(SHOW);
				setState(5698);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5699);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5700);
				tableName();
				setState(5703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5701);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5702);
					uid();
					}
				}

				setState(5707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5705);
					match(WHERE);
					setState(5706);
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(5709);
				match(SHOW);
				setState(5710);
				match(OPEN);
				setState(5711);
				match(TABLES);
				setState(5714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5712);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5713);
					uid();
					}
				}

				setState(5717);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5716);
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(5719);
				match(SHOW);
				setState(5720);
				match(PROFILE);
				setState(5721);
				showProfileType();
				setState(5726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5722);
					match(COMMA);
					setState(5723);
					showProfileType();
					}
					}
					setState(5728);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5729);
					match(FOR);
					setState(5730);
					match(QUERY);
					setState(5731);
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(5734);
				match(LIMIT);
				setState(5738);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
				case 1:
					{
					setState(5735);
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(5736);
					match(COMMA);
					}
					break;
				}
				setState(5740);
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(5742);
				match(SHOW);
				setState(5743);
				match(SLAVE);
				setState(5744);
				match(STATUS);
				setState(5748);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5745);
					match(FOR);
					setState(5746);
					match(CHANNEL);
					setState(5747);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableClauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public List<TerminalNode> AT_SIGN() { return getTokens(MySqlParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(MySqlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVariableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_variableClause);
		int _la;
		try {
			setState(5762);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5752);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5753);
				match(GLOBAL_ID);
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(5759);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
				case 1:
					{
					setState(5756);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(5754);
						match(AT_SIGN);
						setState(5755);
						match(AT_SIGN);
						}
					}

					setState(5758);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5761);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(MySqlParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCommonEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCommonEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCommonEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_showCommonEntity);
		int _la;
		try {
			setState(5777);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5764);
				match(CHARACTER);
				setState(5765);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5766);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5767);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5768);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5769);
				match(FUNCTION);
				setState(5770);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5771);
				match(PROCEDURE);
				setState(5772);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(5774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(5773);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5776);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_showFilter);
		try {
			setState(5783);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5779);
				match(LIKE);
				setState(5780);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5781);
				match(WHERE);
				setState(5782);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGlobalInfoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(5802);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(5785);
					match(STORAGE);
					}
				}

				setState(5788);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5789);
				match(MASTER);
				setState(5790);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5791);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5792);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(5794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5793);
					match(FULL);
					}
				}

				setState(5796);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5797);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5798);
				match(SLAVE);
				setState(5799);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5800);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5801);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSchemaEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_showSchemaEntity);
		int _la;
		try {
			setState(5812);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5804);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5805);
				match(TABLE);
				setState(5806);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5807);
					match(FULL);
					}
				}

				setState(5810);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5811);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfileType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_showProfileType);
		try {
			setState(5826);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5814);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5815);
				match(BLOCK);
				setState(5816);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5817);
				match(CONTEXT);
				setState(5818);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5819);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5820);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5821);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5822);
				match(PAGE);
				setState(5823);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5824);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5825);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinlogStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinlogStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinlogStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5828);
			match(BINLOG);
			setState(5829);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CacheIndexStatementContext extends ParserRuleContext {
		public UidContext schema;
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCacheIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCacheIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCacheIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5831);
			match(CACHE);
			setState(5832);
			match(INDEX);
			setState(5833);
			tableIndexes();
			setState(5838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5834);
				match(COMMA);
				setState(5835);
				tableIndexes();
				}
				}
				setState(5840);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5841);
				match(PARTITION);
				setState(5842);
				match(LR_BRACKET);
				setState(5845);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5843);
					uidList();
					}
					break;
				case ALL:
					{
					setState(5844);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5847);
				match(RR_BRACKET);
				}
			}

			setState(5850);
			match(IN);
			setState(5851);
			((CacheIndexStatementContext)_localctx).schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlushStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlushStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFlushStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5853);
			match(FLUSH);
			setState(5855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5854);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5857);
			flushOption();
			setState(5862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5858);
				match(COMMA);
				setState(5859);
				flushOption();
				}
				}
				setState(5864);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(MySqlParser.KILL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKillStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKillStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKillStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_killStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5865);
			match(KILL);
			setState(5867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
			case 1:
				{
				setState(5866);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5869);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadIndexIntoCache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadIndexIntoCache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadIndexIntoCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5871);
			match(LOAD);
			setState(5872);
			match(INDEX);
			setState(5873);
			match(INTO);
			setState(5874);
			match(CACHE);
			setState(5875);
			loadedTableIndexes();
			setState(5880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5876);
				match(COMMA);
				setState(5877);
				loadedTableIndexes();
				}
				}
				setState(5882);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5883);
			match(RESET);
			setState(5884);
			match(QUERY);
			setState(5885);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShutdownStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShutdownStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShutdownStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5887);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableIndexesContext extends ParserRuleContext {
		public Token indexFormat;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5889);
			tableName();
			setState(5897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5890);
					((TableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((TableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5893);
				match(LR_BRACKET);
				setState(5894);
				uidList();
				setState(5895);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChannelFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChannelFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitChannelFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_flushOption);
		int _la;
		try {
			setState(5931);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5917);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5899);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5900);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5902);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & 536870917L) != 0 || _la==RELAY || _la==SLOW) {
						{
						setState(5901);
						_la = _input.LA(1);
						if ( !(_la==BINARY || (((_la - 407)) & ~0x3f) == 0 && ((1L << (_la - 407)) & 536870917L) != 0 || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5904);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5905);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5906);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5907);
					match(QUERY);
					setState(5908);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5909);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5910);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5911);
					match(TABLES);
					setState(5915);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5912);
						match(WITH);
						setState(5913);
						match(READ);
						setState(5914);
						match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5919);
				match(RELAY);
				setState(5920);
				match(LOGS);
				setState(5922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5921);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5924);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==TABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5926);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
				case 1:
					{
					setState(5925);
					tables();
					}
					break;
				}
				setState(5929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5928);
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlushTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlushTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFlushTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_flushTableOption);
		try {
			setState(5938);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5933);
				match(WITH);
				setState(5934);
				match(READ);
				setState(5935);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5936);
				match(FOR);
				setState(5937);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public UidListContext partitionList;
		public Token indexFormat;
		public UidListContext indexList;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadedTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadedTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadedTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5940);
			tableName();
			setState(5948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5941);
				match(PARTITION);
				setState(5942);
				match(LR_BRACKET);
				setState(5945);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5943);
					((LoadedTableIndexesContext)_localctx).partitionList = uidList();
					}
					break;
				case ALL:
					{
					setState(5944);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5947);
				match(RR_BRACKET);
				}
			}

			setState(5957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
			case 1:
				{
				setState(5951);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5950);
					((LoadedTableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((LoadedTableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5953);
				match(LR_BRACKET);
				setState(5954);
				((LoadedTableIndexesContext)_localctx).indexList = uidList();
				setState(5955);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5959);
				match(IGNORE);
				setState(5960);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5963);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2305948562329960448L) != 0) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5964);
			tableName();
			setState(5967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
			case 1:
				{
				setState(5965);
				((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case 2:
				{
				setState(5966);
				((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5969);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2305948562329960448L) != 0) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5970);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5971);
				match(EQUAL_SYMBOL);
				setState(5972);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5975);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHelpStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHelpStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHelpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5977);
			match(HELP);
			setState(5978);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5980);
			match(USE);
			setState(5981);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(MySqlParser.SIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5983);
			match(SIGNAL);
			setState(5991);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5984);
				match(SQLSTATE);
				setState(5986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5985);
					match(VALUE);
					}
				}

				setState(5988);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5989);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5990);
				match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
			case 1:
				{
				setState(5993);
				match(SET);
				setState(5994);
				signalConditionInformation();
				setState(5999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5995);
					match(COMMA);
					setState(5996);
					signalConditionInformation();
					}
					}
					setState(6001);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(MySqlParser.RESIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6004);
			match(RESIGNAL);
			setState(6012);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(6005);
				match(SQLSTATE);
				setState(6007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(6006);
					match(VALUE);
					}
				}

				setState(6009);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(6010);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(6011);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case VALUES:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(6023);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
			case 1:
				{
				setState(6014);
				match(SET);
				setState(6015);
				signalConditionInformation();
				setState(6020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6016);
					match(COMMA);
					setState(6017);
					signalConditionInformation();
					}
					}
					setState(6022);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignalConditionInformationContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalConditionInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSignalConditionInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSignalConditionInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSignalConditionInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalConditionInformationContext signalConditionInformation() throws RecognitionException {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_signalConditionInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6025);
			_la = _input.LA(1);
			if ( !((((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & 272105729L) != 0 || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6026);
			match(EQUAL_SYMBOL);
			setState(6031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
			case 1:
				{
				setState(6027);
				stringLiteral();
				}
				break;
			case 2:
				{
				setState(6028);
				match(DECIMAL_LITERAL);
				}
				break;
			case 3:
				{
				setState(6029);
				mysqlVariable();
				}
				break;
			case 4:
				{
				setState(6030);
				simpleId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(MySqlParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public List<DiagnosticsConditionInformationNameContext> diagnosticsConditionInformationName() {
			return getRuleContexts(DiagnosticsConditionInformationNameContext.class);
		}
		public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return getRuleContext(DiagnosticsConditionInformationNameContext.class,i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(MySqlParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(MySqlParser.NUMBER, i);
		}
		public List<TerminalNode> ROW_COUNT() { return getTokens(MySqlParser.ROW_COUNT); }
		public TerminalNode ROW_COUNT(int i) {
			return getToken(MySqlParser.ROW_COUNT, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDiagnosticsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDiagnosticsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDiagnosticsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsStatementContext diagnosticsStatement() throws RecognitionException {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_diagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6033);
			match(GET);
			setState(6035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(6034);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6037);
			match(DIAGNOSTICS);
			setState(6069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
			case 1:
				{
				{
				setState(6038);
				variableClause();
				setState(6039);
				match(EQUAL_SYMBOL);
				setState(6040);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6041);
					match(COMMA);
					setState(6042);
					variableClause();
					setState(6043);
					match(EQUAL_SYMBOL);
					setState(6044);
					_la = _input.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(6050);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(6051);
				match(CONDITION);
				setState(6054);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(6052);
					decimalLiteral();
					}
					break;
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(6053);
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6056);
				variableClause();
				setState(6057);
				match(EQUAL_SYMBOL);
				setState(6058);
				diagnosticsConditionInformationName();
				setState(6066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6059);
					match(COMMA);
					setState(6060);
					variableClause();
					setState(6061);
					match(EQUAL_SYMBOL);
					setState(6062);
					diagnosticsConditionInformationName();
					}
					}
					setState(6068);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsConditionInformationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDiagnosticsConditionInformationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDiagnosticsConditionInformationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDiagnosticsConditionInformationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() throws RecognitionException {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6071);
			_la = _input.LA(1);
			if ( !((((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & 272105729L) != 0 || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || (((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & 18155135997837313L) != 0 || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_describeObjectClause);
		try {
			setState(6083);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6078);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(6073);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(6074);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(6075);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(6076);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(6077);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6080);
				match(FOR);
				setState(6081);
				match(CONNECTION);
				setState(6082);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6085);
			uid();
			setState(6089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
			case 1:
				{
				setState(6086);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(6087);
				match(DOT);
				setState(6088);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6091);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleNameContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoleName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoleName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoleName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleNameContext roleName() throws RecognitionException {
		RoleNameContext _localctx = new RoleNameContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_roleName);
		try {
			setState(6095);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6093);
				userName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6094);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_fullColumnName);
		try {
			setState(6111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6097);
				uid();
				setState(6102);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,884,_ctx) ) {
				case 1:
					{
					setState(6098);
					dottedId();
					setState(6100);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,883,_ctx) ) {
					case 1:
						{
						setState(6099);
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6105);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,885,_ctx) ) {
				case 1:
					{
					setState(6104);
					matchWildcard();
					}
					break;
				}
				setState(6107);
				dottedId();
				setState(6109);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,886,_ctx) ) {
				case 1:
					{
					setState(6108);
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,890,_ctx) ) {
			case 1:
				{
				setState(6115);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,888,_ctx) ) {
				case 1:
					{
					setState(6113);
					uid();
					}
					break;
				case 2:
					{
					setState(6114);
					match(STRING_LITERAL);
					}
					break;
				}
				setState(6121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6117);
					match(LR_BRACKET);
					setState(6118);
					decimalLiteral();
					setState(6119);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				setState(6123);
				expression(0);
				}
				break;
			}
			setState(6127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(6126);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(MySqlParser.STRING_USER_NAME, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_userName);
		try {
			setState(6134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6129);
				match(STRING_USER_NAME);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6130);
				match(ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6131);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6132);
				match(ADMIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6133);
				keywordsCanBeId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6136);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_charsetName);
		try {
			setState(6142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6138);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6139);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6140);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6141);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_collationName);
		try {
			setState(6146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,894,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6144);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6145);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(MySqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(MySqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(MySqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(MySqlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6148);
			_la = _input.LA(1);
			if ( !(_la==CONNECT || (((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & 4095L) != 0 || (((_la - 1141)) & ~0x3f) == 0 && ((1L << (_la - 1141)) & 769L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public List<TerminalNode> COLON_SYMB() { return getTokens(MySqlParser.COLON_SYMB); }
		public TerminalNode COLON_SYMB(int i) {
			return getToken(MySqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6150);
			decimalLiteral();
			setState(6151);
			match(MINUS);
			setState(6152);
			decimalLiteral();
			setState(6153);
			match(MINUS);
			setState(6154);
			decimalLiteral();
			setState(6155);
			match(MINUS);
			setState(6156);
			decimalLiteral();
			setState(6157);
			match(MINUS);
			setState(6158);
			decimalLiteral();
			setState(6164); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6159);
				match(COLON_SYMB);
				setState(6160);
				decimalLiteral();
				setState(6161);
				match(MINUS);
				setState(6162);
				decimalLiteral();
				}
				}
				setState(6166); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6168);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(6175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6169);
				match(COMMA);
				setState(6170);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(6173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6171);
					match(COMMA);
					setState(6172);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXuidStringId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXuidStringId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXuidStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_xuidStringId);
		int _la;
		try {
			setState(6184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6177);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6178);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6180); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6179);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(6182); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAuthPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAuthPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_authPlugin);
		try {
			setState(6188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,900,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6186);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6187);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_uid);
		try {
			setState(6193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6190);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6191);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6192);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_simpleId);
		try {
			setState(6204);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,902,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6195);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6196);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6197);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6198);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6199);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6200);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6201);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6202);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6203);
				scalarFunctionName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_dottedId);
		try {
			setState(6209);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6206);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6207);
				match(DOT);
				setState(6208);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6211);
			_la = _input.LA(1);
			if ( !((((_la - 1131)) & ~0x3f) == 0 && ((1L << (_la - 1131)) & 10247L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_fileSizeLiteral);
		try {
			setState(6215);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6213);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6214);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(6240);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,911,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6222);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(6218);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(6217);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(6220);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(6221);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6225); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(6224);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6227); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,907,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6234);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(6230);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(6229);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(6232);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(6233);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6238);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,910,_ctx) ) {
				case 1:
					{
					setState(6236);
					match(COLLATE);
					setState(6237);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6242);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(6244);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(6247);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6249);
				match(NOT);
				}
			}

			setState(6252);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_constant);
		int _la;
		try {
			setState(6266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6254);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6255);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6256);
				match(MINUS);
				setState(6257);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6258);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6259);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6260);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6261);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6262);
					match(NOT);
					}
				}

				setState(6265);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(MySqlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpatialDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LongVarbinaryDataTypeContext extends DataTypeContext {
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarbinaryDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarbinaryDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarbinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalVaryingStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(MySqlParser.MIDDLEINT, 0); }
		public TerminalNode INT1() { return getToken(MySqlParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(MySqlParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(MySqlParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(MySqlParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(MySqlParser.INT8, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> SIGNED() { return getTokens(MySqlParser.SIGNED); }
		public TerminalNode SIGNED(int i) {
			return getToken(MySqlParser.SIGNED, i);
		}
		public List<TerminalNode> UNSIGNED() { return getTokens(MySqlParser.UNSIGNED); }
		public TerminalNode UNSIGNED(int i) {
			return getToken(MySqlParser.UNSIGNED, i);
		}
		public List<TerminalNode> ZEROFILL() { return getTokens(MySqlParser.ZEROFILL); }
		public TerminalNode ZEROFILL(int i) {
			return getToken(MySqlParser.ZEROFILL, i);
		}
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MySqlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(MySqlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(MySqlParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(MySqlParser.FLOAT8, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDimensionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(MySqlParser.NVARCHAR, 0); }
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> BINARY() { return getTokens(MySqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MySqlParser.BINARY, i);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LongVarcharDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public LongVarcharDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarcharDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarcharDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_dataType);
		int _la;
		try {
			int _alt;
			setState(6390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6268);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || (((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & 31239L) != 0 || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6270);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(6269);
					match(VARYING);
					}
				}

				setState(6273);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
				case 1:
					{
					setState(6272);
					lengthOneDimension();
					}
					break;
				}
				setState(6276);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
				case 1:
					{
					setState(6275);
					match(BINARY);
					}
					break;
				}
				setState(6281);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,919,_ctx) ) {
				case 1:
					{
					setState(6278);
					charSet();
					setState(6279);
					charsetName();
					}
					break;
				}
				setState(6286);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
				case 1:
					{
					setState(6283);
					match(COLLATE);
					setState(6284);
					collationName();
					}
					break;
				case 2:
					{
					setState(6285);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6288);
				match(NATIONAL);
				setState(6289);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6291);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
				case 1:
					{
					setState(6290);
					lengthOneDimension();
					}
					break;
				}
				setState(6294);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,922,_ctx) ) {
				case 1:
					{
					setState(6293);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6296);
				match(NCHAR);
				setState(6297);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(6299);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,923,_ctx) ) {
				case 1:
					{
					setState(6298);
					lengthOneDimension();
					}
					break;
				}
				setState(6302);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					setState(6301);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6304);
				match(NATIONAL);
				setState(6305);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6306);
				match(VARYING);
				setState(6308);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
				case 1:
					{
					setState(6307);
					lengthOneDimension();
					}
					break;
				}
				setState(6311);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
				case 1:
					{
					setState(6310);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6313);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & 4095L) != 0) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6315);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
				case 1:
					{
					setState(6314);
					lengthOneDimension();
					}
					break;
				}
				setState(6320);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,928,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6317);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6322);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,928,_ctx);
				}
				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6323);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(6325);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,929,_ctx) ) {
				case 1:
					{
					setState(6324);
					lengthTwoDimension();
					}
					break;
				}
				setState(6330);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,930,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6327);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6332);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,930,_ctx);
				}
				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6333);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(6335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(6334);
					match(PRECISION);
					}
				}

				setState(6338);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
				case 1:
					{
					setState(6337);
					lengthTwoDimension();
					}
					break;
				}
				setState(6343);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,933,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6340);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6345);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,933,_ctx);
				}
				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6346);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & 63L) != 0 || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6348);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
				case 1:
					{
					setState(6347);
					lengthTwoOptionalDimension();
					}
					break;
				}
				setState(6353);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,935,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6350);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6355);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,935,_ctx);
				}
				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6356);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 4237313L) != 0 || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6357);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & 2831L) != 0 || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6359);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
				case 1:
					{
					setState(6358);
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6361);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6362);
				collectionOptions();
				setState(6364);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
				case 1:
					{
					setState(6363);
					match(BINARY);
					}
					break;
				}
				setState(6369);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
				case 1:
					{
					setState(6366);
					charSet();
					setState(6367);
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6371);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || (((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & 511L) != 0) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6372);
				((LongVarcharDataTypeContext)_localctx).typeName = match(LONG);
				setState(6374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARCHAR) {
					{
					setState(6373);
					match(VARCHAR);
					}
				}

				setState(6377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
				case 1:
					{
					setState(6376);
					match(BINARY);
					}
					break;
				}
				setState(6382);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
				case 1:
					{
					setState(6379);
					charSet();
					setState(6380);
					charsetName();
					}
					break;
				}
				setState(6386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
				case 1:
					{
					setState(6384);
					match(COLLATE);
					setState(6385);
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6388);
				match(LONG);
				setState(6389);
				match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6392);
			match(LR_BRACKET);
			setState(6393);
			match(STRING_LITERAL);
			setState(6398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6394);
				match(COMMA);
				setState(6395);
				match(STRING_LITERAL);
				}
				}
				setState(6400);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6401);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode ARRAY() { return getToken(MySqlParser.ARRAY, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConvertedDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_convertedDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6425);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				{
				setState(6403);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6404);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				{
				setState(6407);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(6409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6408);
					lengthOneDimension();
					}
				}

				setState(6414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					setState(6411);
					charSet();
					setState(6412);
					charsetName();
					}
				}

				}
				break;
			case INT:
			case INTEGER:
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				{
				setState(6416);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 1441857L) != 0 || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				{
				setState(6417);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(6419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6418);
					lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				{
				setState(6421);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(6422);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARRAY) {
				{
				setState(6427);
				match(ARRAY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6430);
			match(LR_BRACKET);
			setState(6431);
			decimalLiteral();
			setState(6432);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6434);
			match(LR_BRACKET);
			setState(6435);
			decimalLiteral();
			setState(6436);
			match(COMMA);
			setState(6437);
			decimalLiteral();
			setState(6438);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6440);
			match(LR_BRACKET);
			setState(6441);
			decimalLiteral();
			setState(6444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6442);
				match(COMMA);
				setState(6443);
				decimalLiteral();
				}
			}

			setState(6446);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6448);
			uid();
			setState(6453);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,953,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6449);
					match(COMMA);
					setState(6450);
					uid();
					}
					} 
				}
				setState(6455);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,953,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullColumnNameListContext extends ParserRuleContext {
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FullColumnNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameListContext fullColumnNameList() throws RecognitionException {
		FullColumnNameListContext _localctx = new FullColumnNameListContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_fullColumnNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6456);
			fullColumnName();
			setState(6461);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6457);
				match(COMMA);
				setState(6458);
				fullColumnName();
				}
				}
				setState(6463);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_tables);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6464);
			tableName();
			setState(6469);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,955,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6465);
					match(COMMA);
					setState(6466);
					tableName();
					}
					} 
				}
				setState(6471);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,955,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6472);
			match(LR_BRACKET);
			setState(6473);
			indexColumnName();
			setState(6478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6474);
				match(COMMA);
				setState(6475);
				indexColumnName();
				}
				}
				setState(6480);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6481);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6483);
			expression(0);
			setState(6488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6484);
				match(COMMA);
				setState(6485);
				expression(0);
				}
				}
				setState(6490);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6491);
			expressionOrDefault();
			setState(6496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6492);
				match(COMMA);
				setState(6493);
				expressionOrDefault();
				}
				}
				setState(6498);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6499);
			constant();
			setState(6504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6500);
				match(COMMA);
				setState(6501);
				constant();
				}
				}
				setState(6506);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleStrings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleStrings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleStrings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6507);
			match(STRING_LITERAL);
			setState(6512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6508);
				match(COMMA);
				setState(6509);
				match(STRING_LITERAL);
				}
				}
				setState(6514);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(MySqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MySqlParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6515);
			match(LOCAL_ID);
			setState(6520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6516);
				match(COMMA);
				setState(6517);
				match(LOCAL_ID);
				}
				}
				setState(6522);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_defaultValue);
		try {
			setState(6549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,964,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6523);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6524);
				match(CAST);
				setState(6525);
				match(LR_BRACKET);
				setState(6526);
				expression(0);
				setState(6527);
				match(AS);
				setState(6528);
				convertedDataType();
				setState(6529);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6532);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
				case 1:
					{
					setState(6531);
					unaryOperator();
					}
					break;
				}
				setState(6534);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6535);
				currentTimestamp();
				setState(6539);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
				case 1:
					{
					setState(6536);
					match(ON);
					setState(6537);
					match(UPDATE);
					setState(6538);
					currentTimestamp();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6541);
				match(LR_BRACKET);
				setState(6542);
				expression(0);
				setState(6543);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6545);
				match(LR_BRACKET);
				setState(6546);
				fullId();
				setState(6547);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6565);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(6551);
				_la = _input.LA(1);
				if ( !((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & 131L) != 0) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6557);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
				case 1:
					{
					setState(6552);
					match(LR_BRACKET);
					setState(6554);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la - 1131)) & ~0x3f) == 0 && ((1L << (_la - 1131)) & 10247L) != 0) {
						{
						setState(6553);
						decimalLiteral();
						}
					}

					setState(6556);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				setState(6559);
				match(NOW);
				setState(6560);
				match(LR_BRACKET);
				setState(6562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la - 1131)) & ~0x3f) == 0 && ((1L << (_la - 1131)) & 10247L) != 0) {
					{
					setState(6561);
					decimalLiteral();
					}
				}

				setState(6564);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_expressionOrDefault);
		try {
			setState(6569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,969,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6567);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6568);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6571);
			match(IF);
			setState(6572);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6574);
			match(IF);
			setState(6575);
			match(NOT);
			setState(6576);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrReplaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public OrReplaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orReplace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrReplace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrReplaceContext orReplace() throws RecognitionException {
		OrReplaceContext _localctx = new OrReplaceContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_orReplace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6578);
			match(OR);
			setState(6579);
			match(REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WaitNowaitClauseContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(MySqlParser.NOWAIT, 0); }
		public WaitNowaitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitNowaitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWaitNowaitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWaitNowaitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWaitNowaitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WaitNowaitClauseContext waitNowaitClause() throws RecognitionException {
		WaitNowaitClauseContext _localctx = new WaitNowaitClauseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_waitNowaitClause);
		try {
			setState(6584);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6581);
				match(WAIT);
				setState(6582);
				decimalLiteral();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6583);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUdfFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NonAggregateFunctionCallContext extends FunctionCallContext {
		public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return getRuleContext(NonAggregateWindowedFunctionContext.class,0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNonAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNonAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNonAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_functionCall);
		try {
			setState(6604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6586);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6587);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6588);
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6589);
				scalarFunctionName();
				setState(6590);
				match(LR_BRACKET);
				setState(6592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
				case 1:
					{
					setState(6591);
					functionArgs();
					}
					break;
				}
				setState(6594);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6596);
				fullId();
				setState(6597);
				match(LR_BRACKET);
				setState(6599);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,972,_ctx) ) {
				case 1:
					{
					setState(6598);
					functionArgs();
					}
					break;
				}
				setState(6601);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6603);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPositionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(MySqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(MySqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySqlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTrimFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonValueFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNING() { return getToken(MySqlParser.RETURNING, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public JsonOnEmptyContext jsonOnEmpty() {
			return getRuleContext(JsonOnEmptyContext.class,0);
		}
		public JsonOnErrorContext jsonOnError() {
			return getRuleContext(JsonOnErrorContext.class,0);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonValueFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonValueFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonValueFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(MySqlParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExtractFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitValuesFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseExpressionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseExpressionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseExpressionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWeightFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGetFormatFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubstrFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_specificFunction);
		int _la;
		try {
			setState(6784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6606);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || _la==SCHEMA || (((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & 262159L) != 0) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6609);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
				case 1:
					{
					setState(6607);
					match(LR_BRACKET);
					setState(6608);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6611);
				match(CONVERT);
				setState(6612);
				match(LR_BRACKET);
				setState(6613);
				expression(0);
				setState(6614);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(6615);
				convertedDataType();
				setState(6616);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6618);
				match(CONVERT);
				setState(6619);
				match(LR_BRACKET);
				setState(6620);
				expression(0);
				setState(6621);
				match(USING);
				setState(6622);
				charsetName();
				setState(6623);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6625);
				match(CAST);
				setState(6626);
				match(LR_BRACKET);
				setState(6627);
				expression(0);
				setState(6628);
				match(AS);
				setState(6629);
				convertedDataType();
				setState(6630);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6632);
				match(VALUES);
				setState(6633);
				match(LR_BRACKET);
				setState(6634);
				fullColumnName();
				setState(6635);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6637);
				match(CASE);
				setState(6638);
				expression(0);
				setState(6640); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6639);
					caseFuncAlternative();
					}
					}
					setState(6642); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6644);
					match(ELSE);
					setState(6645);
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6648);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6650);
				match(CASE);
				setState(6652); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6651);
					caseFuncAlternative();
					}
					}
					setState(6654); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6656);
					match(ELSE);
					setState(6657);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6660);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6662);
				match(CHAR);
				setState(6663);
				match(LR_BRACKET);
				setState(6664);
				functionArgs();
				setState(6667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6665);
					match(USING);
					setState(6666);
					charsetName();
					}
				}

				setState(6669);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6671);
				match(POSITION);
				setState(6672);
				match(LR_BRACKET);
				setState(6675);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
				case 1:
					{
					setState(6673);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6674);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(6677);
				match(IN);
				setState(6680);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
				case 1:
					{
					setState(6678);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6679);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(6682);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6684);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6685);
				match(LR_BRACKET);
				setState(6688);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,982,_ctx) ) {
				case 1:
					{
					setState(6686);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6687);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6690);
				match(FROM);
				setState(6693);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,983,_ctx) ) {
				case 1:
					{
					setState(6691);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(6692);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6695);
					match(FOR);
					setState(6698);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,984,_ctx) ) {
					case 1:
						{
						setState(6696);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(6697);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(6702);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6704);
				match(TRIM);
				setState(6705);
				match(LR_BRACKET);
				setState(6706);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6709);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,986,_ctx) ) {
				case 1:
					{
					setState(6707);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6708);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6711);
				match(FROM);
				setState(6714);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,987,_ctx) ) {
				case 1:
					{
					setState(6712);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6713);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6716);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6718);
				match(TRIM);
				setState(6719);
				match(LR_BRACKET);
				setState(6722);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,988,_ctx) ) {
				case 1:
					{
					setState(6720);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6721);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6724);
				match(FROM);
				setState(6727);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,989,_ctx) ) {
				case 1:
					{
					setState(6725);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6726);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6729);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6731);
				match(WEIGHT_STRING);
				setState(6732);
				match(LR_BRACKET);
				setState(6735);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,990,_ctx) ) {
				case 1:
					{
					setState(6733);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(6734);
					expression(0);
					}
					break;
				}
				setState(6743);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6737);
					match(AS);
					setState(6738);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6739);
					match(LR_BRACKET);
					setState(6740);
					decimalLiteral();
					setState(6741);
					match(RR_BRACKET);
					}
				}

				setState(6746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(6745);
					levelsInWeightString();
					}
				}

				setState(6748);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6750);
				match(EXTRACT);
				setState(6751);
				match(LR_BRACKET);
				setState(6752);
				intervalType();
				setState(6753);
				match(FROM);
				setState(6756);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
				case 1:
					{
					setState(6754);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6755);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6758);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(6760);
				match(GET_FORMAT);
				setState(6761);
				match(LR_BRACKET);
				setState(6762);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 11L) != 0) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6763);
				match(COMMA);
				setState(6764);
				stringLiteral();
				setState(6765);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(6767);
				match(JSON_VALUE);
				setState(6768);
				match(LR_BRACKET);
				setState(6769);
				expression(0);
				setState(6770);
				match(COMMA);
				setState(6771);
				expression(0);
				setState(6774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(6772);
					match(RETURNING);
					setState(6773);
					convertedDataType();
					}
				}

				setState(6777);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
				case 1:
					{
					setState(6776);
					jsonOnEmpty();
					}
					break;
				}
				setState(6780);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					setState(6779);
					jsonOnError();
					}
				}

				setState(6782);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFuncAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6786);
			match(WHEN);
			setState(6787);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(6788);
			match(THEN);
			setState(6789);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_levelsInWeightString);
		int _la;
		try {
			setState(6805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,999,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6791);
				match(LEVEL);
				setState(6792);
				levelInWeightListElement();
				setState(6797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6793);
					match(COMMA);
					setState(6794);
					levelInWeightListElement();
					}
					}
					setState(6799);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6800);
				match(LEVEL);
				setState(6801);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(6802);
				match(MINUS);
				setState(6803);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelInWeightListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6807);
			decimalLiteral();
			setState(6809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(6808);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(MySqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(6870);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(6811);
				_la = _input.LA(1);
				if ( !((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 8400897L) != 0) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6812);
				match(LR_BRACKET);
				setState(6814);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1001,_ctx) ) {
				case 1:
					{
					setState(6813);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6816);
				functionArg();
				setState(6817);
				match(RR_BRACKET);
				setState(6819);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1002,_ctx) ) {
				case 1:
					{
					setState(6818);
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6821);
				match(COUNT);
				setState(6822);
				match(LR_BRACKET);
				setState(6830);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1004,_ctx) ) {
				case 1:
					{
					setState(6823);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case 2:
					{
					setState(6825);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1003,_ctx) ) {
					case 1:
						{
						setState(6824);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(6827);
					functionArg();
					}
					break;
				case 3:
					{
					setState(6828);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					setState(6829);
					functionArgs();
					}
					break;
				}
				setState(6832);
				match(RR_BRACKET);
				setState(6834);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
				case 1:
					{
					setState(6833);
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6836);
				_la = _input.LA(1);
				if ( !((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & 62652423L) != 0) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6837);
				match(LR_BRACKET);
				setState(6839);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
				case 1:
					{
					setState(6838);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(6841);
				functionArg();
				setState(6842);
				match(RR_BRACKET);
				setState(6844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
				case 1:
					{
					setState(6843);
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6846);
				match(GROUP_CONCAT);
				setState(6847);
				match(LR_BRACKET);
				setState(6849);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1008,_ctx) ) {
				case 1:
					{
					setState(6848);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
					break;
				}
				setState(6851);
				functionArgs();
				setState(6862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6852);
					match(ORDER);
					setState(6853);
					match(BY);
					setState(6854);
					orderByExpression();
					setState(6859);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6855);
						match(COMMA);
						setState(6856);
						orderByExpression();
						}
						}
						setState(6861);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(6864);
					match(SEPARATOR);
					setState(6865);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(6868);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonAggregateWindowedFunctionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode LAG() { return getToken(MySqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(MySqlParser.LEAD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FIRST_VALUE() { return getToken(MySqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MySqlParser.LAST_VALUE, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySqlParser.DENSE_RANK, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySqlParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(MySqlParser.RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MySqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTH_VALUE() { return getToken(MySqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(MySqlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonAggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNonAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNonAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNonAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() throws RecognitionException {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			setState(6910);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6872);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6873);
				match(LR_BRACKET);
				setState(6874);
				expression(0);
				setState(6877);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1013,_ctx) ) {
				case 1:
					{
					setState(6875);
					match(COMMA);
					setState(6876);
					decimalLiteral();
					}
					break;
				}
				setState(6881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6879);
					match(COMMA);
					setState(6880);
					decimalLiteral();
					}
				}

				setState(6883);
				match(RR_BRACKET);
				setState(6884);
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6886);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6887);
				match(LR_BRACKET);
				setState(6888);
				expression(0);
				setState(6889);
				match(RR_BRACKET);
				setState(6890);
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6892);
				_la = _input.LA(1);
				if ( !((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & 14339L) != 0) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6893);
				match(LR_BRACKET);
				setState(6894);
				match(RR_BRACKET);
				setState(6895);
				overClause();
				}
				break;
			case NTH_VALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6896);
				match(NTH_VALUE);
				setState(6897);
				match(LR_BRACKET);
				setState(6898);
				expression(0);
				setState(6899);
				match(COMMA);
				setState(6900);
				decimalLiteral();
				setState(6901);
				match(RR_BRACKET);
				setState(6902);
				overClause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6904);
				match(NTILE);
				setState(6905);
				match(LR_BRACKET);
				setState(6906);
				decimalLiteral();
				setState(6907);
				match(RR_BRACKET);
				setState(6908);
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(MySqlParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_overClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6912);
			match(OVER);
			setState(6918);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(6913);
				match(LR_BRACKET);
				setState(6914);
				windowSpec();
				setState(6915);
				match(RR_BRACKET);
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(6917);
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowSpecContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_windowSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
			case 1:
				{
				setState(6920);
				windowName();
				}
				break;
			}
			setState(6924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6923);
				partitionClause();
				}
			}

			setState(6927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6926);
				orderByClause();
				}
			}

			setState(6930);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(6929);
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6932);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameClauseContext extends ParserRuleContext {
		public FrameUnitsContext frameUnits() {
			return getRuleContext(FrameUnitsContext.class,0);
		}
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_frameClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6934);
			frameUnits();
			setState(6935);
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameUnitsContext frameUnits() throws RecognitionException {
		FrameUnitsContext _localctx = new FrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_frameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6937);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameExtentContext extends ParserRuleContext {
		public FrameRangeContext frameRange() {
			return getRuleContext(FrameRangeContext.class,0);
		}
		public FrameBetweenContext frameBetween() {
			return getRuleContext(FrameBetweenContext.class,0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_frameExtent);
		try {
			setState(6941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1021,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6939);
				frameRange();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6940);
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public List<FrameRangeContext> frameRange() {
			return getRuleContexts(FrameRangeContext.class);
		}
		public FrameRangeContext frameRange(int i) {
			return getRuleContext(FrameRangeContext.class,i);
		}
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBetweenContext frameBetween() throws RecognitionException {
		FrameBetweenContext _localctx = new FrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_frameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6943);
			match(BETWEEN);
			setState(6944);
			frameRange();
			setState(6945);
			match(AND);
			setState(6946);
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameRangeContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(MySqlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(MySqlParser.FOLLOWING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameRangeContext frameRange() throws RecognitionException {
		FrameRangeContext _localctx = new FrameRangeContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_frameRange);
		int _la;
		try {
			setState(6955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1022,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6948);
				match(CURRENT);
				setState(6949);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6950);
				match(UNBOUNDED);
				setState(6951);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6952);
				expression(0);
				setState(6953);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6957);
			match(PARTITION);
			setState(6958);
			match(BY);
			setState(6959);
			expression(0);
			setState(6964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6960);
				match(COMMA);
				setState(6961);
				expression(0);
				}
				}
				setState(6966);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(MySqlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(MySqlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(MySqlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(MySqlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(MySqlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_scalarFunctionName);
		try {
			setState(6990);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6967);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(6968);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6969);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6970);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6971);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(6972);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(6973);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(6974);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(6975);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(6976);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(6977);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(6978);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(6979);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(6980);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(6981);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(6982);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(6983);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(6984);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(6985);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(6986);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(6987);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(6988);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(6989);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPasswordFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6992);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6993);
			match(LR_BRACKET);
			setState(6994);
			functionArg();
			setState(6995);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1025,_ctx) ) {
			case 1:
				{
				setState(6997);
				constant();
				}
				break;
			case 2:
				{
				setState(6998);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(6999);
				functionCall();
				}
				break;
			case 4:
				{
				setState(7000);
				expression(0);
				}
				break;
			}
			setState(7012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7003);
				match(COMMA);
				setState(7008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1026,_ctx) ) {
				case 1:
					{
					setState(7004);
					constant();
					}
					break;
				case 2:
					{
					setState(7005);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(7006);
					functionCall();
					}
					break;
				case 4:
					{
					setState(7007);
					expression(0);
					}
					break;
				}
				}
				}
				setState(7014);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_functionArg);
		try {
			setState(7019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1028,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7015);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7016);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7017);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7018);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 670;
		enterRecursionRule(_localctx, 670, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1030,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(7022);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7023);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7024);
				predicate(0);
				setState(7025);
				match(IS);
				setState(7027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7026);
					match(NOT);
					}
				}

				setState(7029);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7031);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7040);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1031,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(7034);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(7035);
					logicalOperator();
					setState(7036);
					expression(4);
					}
					} 
				}
				setState(7042);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1031,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSoundsLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryComparisonPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonMemberOfPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonMemberOfPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonMemberOfPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonMemberOfPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BinaryComparisonPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(MySqlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(MySqlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRegexpPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 672;
		enterRecursionRule(_localctx, 672, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(7046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1032,_ctx) ) {
			case 1:
				{
				setState(7044);
				match(LOCAL_ID);
				setState(7045);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(7048);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(7114);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1040,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7112);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1039,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7050);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(7051);
						comparisonOperator();
						setState(7052);
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7054);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(7056);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7055);
							match(NOT);
							}
						}

						setState(7058);
						match(BETWEEN);
						setState(7059);
						predicate(0);
						setState(7060);
						match(AND);
						setState(7061);
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7063);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(7064);
						match(SOUNDS);
						setState(7065);
						match(LIKE);
						setState(7066);
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7067);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7069);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7068);
							match(NOT);
							}
						}

						setState(7071);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7072);
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7073);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(7075);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7074);
							match(NOT);
							}
						}

						setState(7077);
						match(IN);
						setState(7078);
						match(LR_BRACKET);
						setState(7081);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1036,_ctx) ) {
						case 1:
							{
							setState(7079);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(7080);
							expressions();
							}
							break;
						}
						setState(7083);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7085);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(7086);
						match(IS);
						setState(7087);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7088);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(7089);
						comparisonOperator();
						setState(7090);
						((SubqueryComparisonPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7091);
						match(LR_BRACKET);
						setState(7092);
						selectStatement();
						setState(7093);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7095);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(7097);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7096);
							match(NOT);
							}
						}

						setState(7099);
						match(LIKE);
						setState(7100);
						predicate(0);
						setState(7103);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1038,_ctx) ) {
						case 1:
							{
							setState(7101);
							match(ESCAPE);
							setState(7102);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7105);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7106);
						match(MEMBER);
						setState(7107);
						match(OF);
						setState(7108);
						match(LR_BRACKET);
						setState(7109);
						predicate(0);
						setState(7110);
						match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				setState(7116);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1040,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedRowExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExistsExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExistsExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExistsExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExistsExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JsonExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstantExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 674;
		enterRecursionRule(_localctx, 674, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1043,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(7118);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7119);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7120);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7121);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7122);
				unaryOperator();
				setState(7123);
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7125);
				match(BINARY);
				setState(7126);
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7127);
				match(LR_BRACKET);
				setState(7128);
				expression(0);
				setState(7133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7129);
					match(COMMA);
					setState(7130);
					expression(0);
					}
					}
					setState(7135);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7136);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7138);
				match(ROW);
				setState(7139);
				match(LR_BRACKET);
				setState(7140);
				expression(0);
				setState(7143); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7141);
					match(COMMA);
					setState(7142);
					expression(0);
					}
					}
					setState(7145); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(7147);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7149);
				match(EXISTS);
				setState(7150);
				match(LR_BRACKET);
				setState(7151);
				selectStatement();
				setState(7152);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7154);
				match(LR_BRACKET);
				setState(7155);
				selectStatement();
				setState(7156);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7158);
				match(INTERVAL);
				setState(7159);
				expression(0);
				setState(7160);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7181);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1045,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7179);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1044,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7164);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7165);
						bitOperator();
						setState(7166);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7168);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7169);
						mathOperator();
						setState(7170);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7172);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7173);
						jsonOperator();
						setState(7174);
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7176);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(7177);
						match(COLLATE);
						setState(7178);
						collationName();
						}
						break;
					}
					} 
				}
				setState(7183);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1045,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(MySqlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7184);
			_la = _input.LA(1);
			if ( !(_la==NOT || (((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & 387L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_comparisonOperator);
		try {
			setState(7200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1046,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7186);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7187);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7188);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7189);
				match(LESS_SYMBOL);
				setState(7190);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7191);
				match(GREATER_SYMBOL);
				setState(7192);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7193);
				match(LESS_SYMBOL);
				setState(7194);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7195);
				match(EXCLAMATION_SYMBOL);
				setState(7196);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7197);
				match(LESS_SYMBOL);
				setState(7198);
				match(EQUAL_SYMBOL);
				setState(7199);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(MySqlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(MySqlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(MySqlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_logicalOperator);
		try {
			setState(7209);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(7202);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(7203);
				match(BIT_AND_OP);
				setState(7204);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(7205);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(7206);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(7207);
				match(BIT_OR_OP);
				setState(7208);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(MySqlParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(MySqlParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(MySqlParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(MySqlParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_bitOperator);
		try {
			setState(7218);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7211);
				match(LESS_SYMBOL);
				setState(7212);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7213);
				match(GREATER_SYMBOL);
				setState(7214);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(7215);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(7216);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(7217);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(MySqlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(MySqlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(MySqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7220);
			_la = _input.LA(1);
			if ( !((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & 127L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_jsonOperator);
		try {
			setState(7227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1049,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7222);
				match(MINUS);
				setState(7223);
				match(GREATER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7224);
				match(MINUS);
				setState(7225);
				match(GREATER_SYMBOL);
				setState(7226);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(MySqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(MySqlParser.BIG5, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode CP1250() { return getToken(MySqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(MySqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(MySqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(MySqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(MySqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(MySqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(MySqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(MySqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(MySqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(MySqlParser.EUCKR, 0); }
		public TerminalNode GB18030() { return getToken(MySqlParser.GB18030, 0); }
		public TerminalNode GB2312() { return getToken(MySqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(MySqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(MySqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(MySqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(MySqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(MySqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(MySqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(MySqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(MySqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(MySqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(MySqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(MySqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(MySqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(MySqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(MySqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(MySqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(MySqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(MySqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(MySqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(MySqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(MySqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(MySqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7229);
			_la = _input.LA(1);
			if ( !(_la==BINARY || (((_la - 741)) & ~0x3f) == 0 && ((1L << (_la - 741)) & 2199023255551L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevelBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7231);
			_la = _input.LA(1);
			if ( !((((_la - 794)) & ~0x3f) == 0 && ((1L << (_la - 794)) & 15L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilegesBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7233);
			_la = _input.LA(1);
			if ( !((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 11828396035L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7235);
			_la = _input.LA(1);
			if ( !((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & 255L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7237);
			_la = _input.LA(1);
			if ( !((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 1179679L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(MySqlParser.ATTRIBUTE, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode BUCKETS() { return getToken(MySqlParser.BUCKETS, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public TerminalNode CLUSTERING() { return getToken(MySqlParser.CLUSTERING, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode EMPTY() { return getToken(MySqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode EUR() { return getToken(MySqlParser.EUR, 0); }
		public TerminalNode EVEN() { return getToken(MySqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public TerminalNode EXCEPT() { return getToken(MySqlParser.EXCEPT, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAILED_LOGIN_ATTEMPTS() { return getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode HISTORY() { return getToken(MySqlParser.HISTORY, 0); }
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORED() { return getToken(MySqlParser.IGNORED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode INSTANT() { return getToken(MySqlParser.INSTANT, 0); }
		public TerminalNode INTERNAL() { return getToken(MySqlParser.INTERNAL, 0); }
		public TerminalNode INVOKE() { return getToken(MySqlParser.INVOKE, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode ISO() { return getToken(MySqlParser.ISO, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode JIS() { return getToken(MySqlParser.JIS, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LAMBDA() { return getToken(MySqlParser.LAMBDA, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode LATERAL() { return getToken(MySqlParser.LATERAL, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode NESTED() { return getToken(MySqlParser.NESTED, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NOCOPY() { return getToken(MySqlParser.NOCOPY, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode NOWAIT() { return getToken(MySqlParser.NOWAIT, 0); }
		public TerminalNode NUMBER() { return getToken(MySqlParser.NUMBER, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode OJ() { return getToken(MySqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONAL() { return getToken(MySqlParser.OPTIONAL, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode ORDINALITY() { return getToken(MySqlParser.ORDINALITY, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode PASSWORDLESS_USER_ADMIN() { return getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0); }
		public TerminalNode PASSWORD_LOCK_TIME() { return getToken(MySqlParser.PASSWORD_LOCK_TIME, 0); }
		public TerminalNode PATH() { return getToken(MySqlParser.PATH, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode RECURSIVE() { return getToken(MySqlParser.RECURSIVE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode REUSE() { return getToken(MySqlParser.REUSE, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode RTREE() { return getToken(MySqlParser.RTREE, 0); }
		public TerminalNode S3() { return getToken(MySqlParser.S3, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TABLE_TYPE() { return getToken(MySqlParser.TABLE_TYPE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(MySqlParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode USA() { return getToken(MySqlParser.USA, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySqlParser.VIRTUAL, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7239);
			_la = _input.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 324545218529738752L) != 0 || (((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 146666055054393409L) != 0 || _la==STACKED || (((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & 1769897061370560513L) != 0 || (((_la - 303)) & ~0x3f) == 0 && ((1L << (_la - 303)) & -134217473L) != 0 || (((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & -171798822913L) != 0 || (((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & -33685505L) != 0 || (((_la - 496)) & ~0x3f) == 0 && ((1L << (_la - 496)) & -2306265222165299201L) != 0 || (((_la - 560)) & ~0x3f) == 0 && ((1L << (_la - 560)) & -35186788007937L) != 0 || (((_la - 624)) & ~0x3f) == 0 && ((1L << (_la - 624)) & 9077990211383719935L) != 0 || (((_la - 695)) & ~0x3f) == 0 && ((1L << (_la - 695)) & 64278245022205L) != 0 || _la==MEMORY || _la==CATALOG_NAME || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(MySqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(MySqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(MySqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(MySqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(MySqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(MySqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(MySqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(MySqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(MySqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(MySqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(MySqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(MySqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(MySqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(MySqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(MySqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(MySqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(MySqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(MySqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(MySqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(MySqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(MySqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(MySqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(MySqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(MySqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(MySqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(MySqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(MySqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(MySqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(MySqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(MySqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(MySqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(MySqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(MySqlParser.CROSSES, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySqlParser.CUME_DIST, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(MySqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(MySqlParser.DEGREES, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySqlParser.DENSE_RANK, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(MySqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(MySqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(MySqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(MySqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(MySqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(MySqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(MySqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(MySqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(MySqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(MySqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(MySqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(MySqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(MySqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(MySqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(MySqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(MySqlParser.FIND_IN_SET, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(MySqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOOR() { return getToken(MySqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(MySqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(MySqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(MySqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(MySqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(MySqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(MySqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(MySqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(MySqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(MySqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(MySqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(MySqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(MySqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(MySqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(MySqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(MySqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(MySqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(MySqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(MySqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(MySqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(MySqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(MySqlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(MySqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(MySqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(MySqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(MySqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(MySqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(MySqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(MySqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(MySqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAG() { return getToken(MySqlParser.LAG, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(MySqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MySqlParser.LAST_VALUE, 0); }
		public TerminalNode LCASE() { return getToken(MySqlParser.LCASE, 0); }
		public TerminalNode LEAD() { return getToken(MySqlParser.LEAD, 0); }
		public TerminalNode LEAST() { return getToken(MySqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(MySqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(MySqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(MySqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(MySqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(MySqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(MySqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(MySqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(MySqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(MySqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(MySqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(MySqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(MySqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(MySqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(MySqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(MySqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(MySqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(MySqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(MySqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(MySqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(MySqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(MySqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(MySqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(MySqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(MySqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(MySqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(MySqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(MySqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(MySqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(MySqlParser.NAME_CONST, 0); }
		public TerminalNode NTH_VALUE() { return getToken(MySqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(MySqlParser.NTILE, 0); }
		public TerminalNode NULLIF() { return getToken(MySqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(MySqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(MySqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(MySqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(MySqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(MySqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(MySqlParser.OVERLAPS, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(MySqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(MySqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(MySqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(MySqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(MySqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(MySqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(MySqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(MySqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(MySqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(MySqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(MySqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(MySqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(MySqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(MySqlParser.RAND, 0); }
		public TerminalNode RANK() { return getToken(MySqlParser.RANK, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(MySqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(MySqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(MySqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(MySqlParser.ROW_COUNT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MySqlParser.ROW_NUMBER, 0); }
		public TerminalNode RPAD() { return getToken(MySqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(MySqlParser.RTRIM, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(MySqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SESSION_USER() { return getToken(MySqlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(MySqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(MySqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(MySqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(MySqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(MySqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(MySqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(MySqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(MySqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(MySqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(MySqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(MySqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(MySqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(MySqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(MySqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(MySqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(MySqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(MySqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(MySqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(MySqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(MySqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(MySqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(MySqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(MySqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(MySqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(MySqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(MySqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(MySqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(MySqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(MySqlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(MySqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(MySqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(MySqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(MySqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(MySqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(MySqlParser.X_FUNCTION, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(MySqlParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(MySqlParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_QUOTE() { return getToken(MySqlParser.JSON_QUOTE, 0); }
		public TerminalNode JSON_CONTAINS() { return getToken(MySqlParser.JSON_CONTAINS, 0); }
		public TerminalNode JSON_CONTAINS_PATH() { return getToken(MySqlParser.JSON_CONTAINS_PATH, 0); }
		public TerminalNode JSON_EXTRACT() { return getToken(MySqlParser.JSON_EXTRACT, 0); }
		public TerminalNode JSON_KEYS() { return getToken(MySqlParser.JSON_KEYS, 0); }
		public TerminalNode JSON_OVERLAPS() { return getToken(MySqlParser.JSON_OVERLAPS, 0); }
		public TerminalNode JSON_SEARCH() { return getToken(MySqlParser.JSON_SEARCH, 0); }
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode JSON_ARRAY_APPEND() { return getToken(MySqlParser.JSON_ARRAY_APPEND, 0); }
		public TerminalNode JSON_ARRAY_INSERT() { return getToken(MySqlParser.JSON_ARRAY_INSERT, 0); }
		public TerminalNode JSON_INSERT() { return getToken(MySqlParser.JSON_INSERT, 0); }
		public TerminalNode JSON_MERGE() { return getToken(MySqlParser.JSON_MERGE, 0); }
		public TerminalNode JSON_MERGE_PATCH() { return getToken(MySqlParser.JSON_MERGE_PATCH, 0); }
		public TerminalNode JSON_MERGE_PRESERVE() { return getToken(MySqlParser.JSON_MERGE_PRESERVE, 0); }
		public TerminalNode JSON_REMOVE() { return getToken(MySqlParser.JSON_REMOVE, 0); }
		public TerminalNode JSON_REPLACE() { return getToken(MySqlParser.JSON_REPLACE, 0); }
		public TerminalNode JSON_SET() { return getToken(MySqlParser.JSON_SET, 0); }
		public TerminalNode JSON_UNQUOTE() { return getToken(MySqlParser.JSON_UNQUOTE, 0); }
		public TerminalNode JSON_DEPTH() { return getToken(MySqlParser.JSON_DEPTH, 0); }
		public TerminalNode JSON_LENGTH() { return getToken(MySqlParser.JSON_LENGTH, 0); }
		public TerminalNode JSON_TYPE() { return getToken(MySqlParser.JSON_TYPE, 0); }
		public TerminalNode JSON_VALID() { return getToken(MySqlParser.JSON_VALID, 0); }
		public TerminalNode JSON_TABLE() { return getToken(MySqlParser.JSON_TABLE, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		public TerminalNode JSON_PRETTY() { return getToken(MySqlParser.JSON_PRETTY, 0); }
		public TerminalNode JSON_STORAGE_FREE() { return getToken(MySqlParser.JSON_STORAGE_FREE, 0); }
		public TerminalNode JSON_STORAGE_SIZE() { return getToken(MySqlParser.JSON_STORAGE_SIZE, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(MySqlParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(MySqlParser.JSON_OBJECTAGG, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7241);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || (((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & 11258999068426241L) != 0 || (((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & -17179869161L) != 0 || (((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & 8796109397507L) != 0 || _la==INVISIBLE || (((_la - 671)) & ~0x3f) == 0 && ((1L << (_la - 671)) & 1152921504623558657L) != 0 || (((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & -8589934599L) != 0 || (((_la - 862)) & ~0x3f) == 0 && ((1L << (_la - 862)) & -257L) != 0 || (((_la - 926)) & ~0x3f) == 0 && ((1L << (_la - 926)) & -1L) != 0 || (((_la - 990)) & ~0x3f) == 0 && ((1L << (_la - 990)) & -529L) != 0 || (((_la - 1054)) & ~0x3f) == 0 && ((1L << (_la - 1054)) & 4611826755915743231L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 335:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 336:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 337:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 9);
		case 7:
			return precpred(_ctx, 7);
		case 8:
			return precpred(_ctx, 4);
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 3);
		case 11:
			return precpred(_ctx, 2);
		case 12:
			return precpred(_ctx, 1);
		case 13:
			return precpred(_ctx, 12);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0483\u1c4c\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0001\u0000\u0003\u0000\u02c0\b\u0000\u0001\u0000\u0001\u0000\u0003"+
		"\u0000\u02c4\b\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0003\u0001\u02cb\b\u0001\u0001\u0001\u0003\u0001\u02ce\b\u0001"+
		"\u0001\u0001\u0005\u0001\u02d1\b\u0001\n\u0001\f\u0001\u02d4\t\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0003\u0001\u02d9\b\u0001\u0001\u0001\u0003"+
		"\u0001\u02dc\b\u0001\u0001\u0001\u0003\u0001\u02df\b\u0001\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0003\u0002\u02e8\b\u0002\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0003\u0004\u0312\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0003\u0005\u031f\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0003\u0006\u032a\b\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007"+
		"\u033b\b\u0007\u0001\b\u0001\b\u0001\b\u0003\b\u0340\b\b\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003"+
		"\t\u034c\b\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003"+
		"\n\u0367\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0003\u000b\u0370\b\u000b\u0001\f\u0001\f\u0001"+
		"\f\u0003\f\u0375\b\f\u0001\f\u0001\f\u0005\f\u0379\b\f\n\f\f\f\u037c\t"+
		"\f\u0001\r\u0001\r\u0003\r\u0380\b\r\u0001\r\u0001\r\u0003\r\u0384\b\r"+
		"\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u038d"+
		"\b\r\u0001\r\u0003\r\u0390\b\r\u0001\r\u0003\r\u0393\b\r\u0001\r\u0001"+
		"\r\u0003\r\u0397\b\r\u0001\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0003"+
		"\u000e\u039e\b\u000e\u0001\u000e\u0003\u000e\u03a1\b\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000e\u0003\u000e\u03a6\b\u000e\u0001\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000e\u0005\u000e\u03ac\b\u000e\n\u000e\f\u000e\u03af"+
		"\t\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u03b3\b\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000e\u0003\u000e\u03b8\b\u000e\u0001\u000e\u0005\u000e"+
		"\u03bb\b\u000e\n\u000e\f\u000e\u03be\t\u000e\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0003\u000f\u03c9\b\u000f\u0001\u000f\u0003\u000f\u03cc\b\u000f"+
		"\u0001\u000f\u0001\u000f\u0003\u000f\u03d0\b\u000f\u0001\u000f\u0003\u000f"+
		"\u03d3\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u03d7\b\u000f\u0001"+
		"\u000f\u0003\u000f\u03da\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u03de"+
		"\b\u000f\u0001\u000f\u0003\u000f\u03e1\b\u000f\u0001\u000f\u0003\u000f"+
		"\u03e4\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u03e8\b\u000f\u0001"+
		"\u000f\u0003\u000f\u03eb\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u03ef"+
		"\b\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0003\u0010\u03f5"+
		"\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u03fb"+
		"\b\u0010\u0001\u0010\u0001\u0010\u0005\u0010\u03ff\b\u0010\n\u0010\f\u0010"+
		"\u0402\t\u0010\u0001\u0010\u0001\u0010\u0005\u0010\u0406\b\u0010\n\u0010"+
		"\f\u0010\u0409\t\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011"+
		"\u0003\u0011\u040f\b\u0011\u0001\u0011\u0003\u0011\u0412\b\u0011\u0001"+
		"\u0011\u0001\u0011\u0003\u0011\u0416\b\u0011\u0001\u0011\u0001\u0011\u0001"+
		"\u0011\u0003\u0011\u041b\b\u0011\u0001\u0011\u0001\u0011\u0005\u0011\u041f"+
		"\b\u0011\n\u0011\f\u0011\u0422\t\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0005\u0011\u0428\b\u0011\n\u0011\f\u0011\u042b\t\u0011\u0001"+
		"\u0011\u0001\u0011\u0003\u0011\u042f\b\u0011\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0003\u0012\u0434\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0005"+
		"\u0012\u0439\b\u0012\n\u0012\f\u0012\u043c\t\u0012\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0005\u0013\u044a\b\u0013"+
		"\n\u0013\f\u0013\u044d\t\u0013\u0001\u0013\u0001\u0013\u0001\u0014\u0001"+
		"\u0014\u0003\u0014\u0453\b\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u0457"+
		"\b\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001"+
		"\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u0461\b\u0014\u0001\u0014\u0001"+
		"\u0014\u0003\u0014\u0465\b\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u0469"+
		"\b\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u046d\b\u0014\u0001\u0014"+
		"\u0001\u0014\u0003\u0014\u0471\b\u0014\u0001\u0014\u0005\u0014\u0474\b"+
		"\u0014\n\u0014\f\u0014\u0477\t\u0014\u0003\u0014\u0479\b\u0014\u0001\u0014"+
		"\u0003\u0014\u047c\b\u0014\u0001\u0014\u0003\u0014\u047f\b\u0014\u0001"+
		"\u0014\u0003\u0014\u0482\b\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001"+
		"\u0014\u0003\u0014\u0488\b\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u048c"+
		"\b\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u0492"+
		"\b\u0014\u0001\u0014\u0005\u0014\u0495\b\u0014\n\u0014\f\u0014\u0498\t"+
		"\u0014\u0003\u0014\u049a\b\u0014\u0001\u0014\u0003\u0014\u049d\b\u0014"+
		"\u0003\u0014\u049f\b\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015"+
		"\u04aa\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015\u04ae\b\u0015\u0001"+
		"\u0015\u0003\u0015\u04b1\b\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u04bf\b\u0016\u0001\u0016\u0003"+
		"\u0016\u04c2\b\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u04c6\b\u0016"+
		"\u0001\u0016\u0003\u0016\u04c9\b\u0016\u0001\u0016\u0001\u0016\u0003\u0016"+
		"\u04cd\b\u0016\u0001\u0016\u0003\u0016\u04d0\b\u0016\u0001\u0016\u0001"+
		"\u0016\u0003\u0016\u04d4\b\u0016\u0001\u0016\u0003\u0016\u04d7\b\u0016"+
		"\u0001\u0016\u0001\u0016\u0003\u0016\u04db\b\u0016\u0001\u0016\u0003\u0016"+
		"\u04de\b\u0016\u0001\u0016\u0003\u0016\u04e1\b\u0016\u0001\u0016\u0001"+
		"\u0016\u0003\u0016\u04e5\b\u0016\u0001\u0016\u0003\u0016\u04e8\b\u0016"+
		"\u0001\u0016\u0001\u0016\u0003\u0016\u04ec\b\u0016\u0001\u0016\u0001\u0016"+
		"\u0001\u0017\u0001\u0017\u0003\u0017\u04f2\b\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017\u04ff\b\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0018\u0001\u0018\u0003\u0018\u0505\b\u0018\u0001\u0018"+
		"\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019"+
		"\u0005\u0019\u050e\b\u0019\n\u0019\f\u0019\u0511\t\u0019\u0001\u0019\u0001"+
		"\u0019\u0003\u0019\u0515\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u051d\b\u0019\u0001\u001a\u0001"+
		"\u001a\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0003\u001c\u0525"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u052a\b\u001c"+
		"\u0001\u001c\u0003\u001c\u052d\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u0532\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u053a\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u053f\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u0545\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u054a\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u054e\b"+
		"\u001c\u0003\u001c\u0550\b\u001c\u0001\u001d\u0003\u001d\u0553\b\u001d"+
		"\u0001\u001d\u0001\u001d\u0003\u001d\u0557\b\u001d\u0001\u001d\u0001\u001d"+
		"\u0003\u001d\u055b\b\u001d\u0001\u001d\u0003\u001d\u055e\b\u001d\u0001"+
		"\u001d\u0001\u001d\u0003\u001d\u0562\b\u001d\u0001\u001d\u0001\u001d\u0003"+
		"\u001d\u0566\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u056a\b\u001d"+
		"\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u0570\b\u001d"+
		"\u0001\u001d\u0003\u001d\u0573\b\u001d\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0003\u001e\u057a\b\u001e\u0001\u001f\u0001\u001f"+
		"\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u0582\b\u001f"+
		"\u0003\u001f\u0584\b\u001f\u0001 \u0001 \u0001 \u0005 \u0589\b \n \f "+
		"\u058c\t \u0001 \u0001 \u0001 \u0003 \u0591\b \u0001 \u0001 \u0001 \u0001"+
		" \u0005 \u0597\b \n \f \u059a\t \u0003 \u059c\b \u0001 \u0001 \u0001 "+
		"\u0005 \u05a1\b \n \f \u05a4\t \u0003 \u05a6\b \u0003 \u05a8\b \u0001"+
		"!\u0001!\u0001!\u0001!\u0003!\u05ae\b!\u0001\"\u0001\"\u0001\"\u0001\""+
		"\u0003\"\u05b4\b\"\u0001\"\u0001\"\u0001#\u0001#\u0001#\u0001#\u0001#"+
		"\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0003#\u05c5"+
		"\b#\u0001$\u0001$\u0001$\u0001$\u0001$\u0003$\u05cc\b$\u0001%\u0001%\u0001"+
		"%\u0001&\u0001&\u0003&\u05d3\b&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0003&\u05df\b&\u0001&\u0001&\u0001&\u0003"+
		"&\u05e4\b&\u0001&\u0003&\u05e7\b&\u0001\'\u0003\'\u05ea\b\'\u0001\'\u0001"+
		"\'\u0001\'\u0001(\u0001(\u0001(\u0001)\u0001)\u0001)\u0001)\u0001)\u0003"+
		")\u05f7\b)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001"+
		")\u0001)\u0001)\u0003)\u0604\b)\u0001)\u0001)\u0001)\u0003)\u0609\b)\u0001"+
		"*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"*\u0001*\u0001*\u0001*\u0003*\u0619\b*\u0001+\u0001+\u0001+\u0001+\u0005"+
		"+\u061f\b+\n+\f+\u0622\t+\u0001+\u0001+\u0001,\u0001,\u0001,\u0001,\u0001"+
		",\u0003,\u062b\b,\u0001-\u0001-\u0005-\u062f\b-\n-\f-\u0632\t-\u0001."+
		"\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.\u063d"+
		"\b.\u0001.\u0003.\u0640\b.\u0001.\u0001.\u0001.\u0003.\u0645\b.\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0003.\u0652\b.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.\u0659\b.\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0003.\u0660\b.\u0003.\u0662\b.\u0001.\u0001"+
		".\u0001.\u0001.\u0001.\u0003.\u0669\b.\u0001/\u0001/\u0003/\u066d\b/\u0003"+
		"/\u066f\b/\u0001/\u0001/\u0001/\u0003/\u0674\b/\u0001/\u0003/\u0677\b"+
		"/\u0001/\u0001/\u0005/\u067b\b/\n/\f/\u067e\t/\u0001/\u0001/\u0003/\u0682"+
		"\b/\u0003/\u0684\b/\u0001/\u0001/\u0003/\u0688\b/\u0001/\u0003/\u068b"+
		"\b/\u0001/\u0003/\u068e\b/\u0001/\u0001/\u0005/\u0692\b/\n/\f/\u0695\t"+
		"/\u0001/\u0001/\u0003/\u0699\b/\u0003/\u069b\b/\u0001/\u0001/\u0001/\u0003"+
		"/\u06a0\b/\u0001/\u0001/\u0001/\u0001/\u0001/\u0003/\u06a7\b/\u0003/\u06a9"+
		"\b/\u0001/\u0001/\u0001/\u0001/\u0001/\u0003/\u06b0\b/\u00010\u00010\u0001"+
		"0\u00030\u06b5\b0\u00010\u00010\u00030\u06b9\b0\u00010\u00030\u06bc\b"+
		"0\u00011\u00011\u00011\u00011\u00011\u00011\u00031\u06c4\b1\u00011\u0001"+
		"1\u00011\u00011\u00011\u00011\u00031\u06cc\b1\u00031\u06ce\b1\u00012\u0001"+
		"2\u00012\u00012\u00012\u00012\u00032\u06d6\b2\u00013\u00013\u00033\u06da"+
		"\b3\u00013\u00033\u06dd\b3\u00013\u00013\u00053\u06e1\b3\n3\f3\u06e4\t"+
		"3\u00013\u00013\u00033\u06e8\b3\u00013\u00033\u06eb\b3\u00013\u00013\u0005"+
		"3\u06ef\b3\n3\f3\u06f2\t3\u00033\u06f4\b3\u00014\u00014\u00034\u06f8\b"+
		"4\u00014\u00034\u06fb\b4\u00014\u00014\u00034\u06ff\b4\u00014\u00014\u0001"+
		"4\u00034\u0704\b4\u00014\u00014\u00014\u00034\u0709\b4\u00014\u00014\u0001"+
		"4\u00034\u070e\b4\u00014\u00014\u00034\u0712\b4\u00014\u00014\u00034\u0716"+
		"\b4\u00014\u00014\u00034\u071a\b4\u00014\u00014\u00034\u071e\b4\u0001"+
		"4\u00014\u00034\u0722\b4\u00014\u00014\u00034\u0726\b4\u00014\u00014\u0001"+
		"4\u00034\u072b\b4\u00014\u00014\u00014\u00034\u0730\b4\u00014\u00014\u0001"+
		"4\u00034\u0735\b4\u00014\u00014\u00014\u00014\u00034\u073b\b4\u00014\u0001"+
		"4\u00014\u00034\u0740\b4\u00014\u00014\u00014\u00034\u0745\b4\u00014\u0001"+
		"4\u00014\u00034\u074a\b4\u00014\u00014\u00014\u00034\u074f\b4\u00014\u0001"+
		"4\u00014\u00034\u0754\b4\u00014\u00014\u00014\u00014\u00034\u075a\b4\u0001"+
		"4\u00014\u00014\u00034\u075f\b4\u00014\u00014\u00014\u00034\u0764\b4\u0001"+
		"4\u00014\u00014\u00034\u0769\b4\u00014\u00014\u00014\u00034\u076e\b4\u0001"+
		"4\u00014\u00014\u00034\u0773\b4\u00014\u00014\u00014\u00034\u0778\b4\u0001"+
		"4\u00014\u00014\u00034\u077d\b4\u00014\u00014\u00014\u00014\u00014\u0003"+
		"4\u0784\b4\u00014\u00014\u00014\u00034\u0789\b4\u00014\u00014\u00014\u0003"+
		"4\u078e\b4\u00014\u00014\u00014\u00034\u0793\b4\u00014\u00014\u00034\u0797"+
		"\b4\u00014\u00014\u00014\u00034\u079c\b4\u00014\u00014\u00014\u00014\u0001"+
		"4\u00014\u00034\u07a4\b4\u00014\u00014\u00014\u00034\u07a9\b4\u00014\u0001"+
		"4\u00014\u00014\u00034\u07af\b4\u00015\u00015\u00016\u00016\u00016\u0001"+
		"7\u00017\u00017\u00017\u00017\u00037\u07bb\b7\u00017\u00017\u00017\u0001"+
		"7\u00017\u00037\u07c2\b7\u00037\u07c4\b7\u00017\u00017\u00017\u00017\u0005"+
		"7\u07ca\b7\n7\f7\u07cd\t7\u00017\u00017\u00037\u07d1\b7\u00018\u00038"+
		"\u07d4\b8\u00018\u00018\u00018\u00018\u00018\u00018\u00038\u07dc\b8\u0001"+
		"8\u00018\u00018\u00018\u00038\u07e2\b8\u00018\u00018\u00018\u00018\u0001"+
		"8\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u0003"+
		"8\u07f2\b8\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u0001"+
		"8\u00018\u00038\u07fe\b8\u00038\u0800\b8\u00019\u00039\u0803\b9\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00039\u080b\b9\u00019\u00019\u0001"+
		"9\u00019\u00039\u0811\b9\u00019\u00019\u00019\u00019\u00039\u0817\b9\u0001"+
		":\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0005:\u0822"+
		"\b:\n:\f:\u0825\t:\u0001:\u0001:\u0005:\u0829\b:\n:\f:\u082c\t:\u0001"+
		":\u0001:\u0001:\u0001:\u0005:\u0832\b:\n:\f:\u0835\t:\u0001:\u0001:\u0003"+
		":\u0839\b:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0005:\u0842"+
		"\b:\n:\f:\u0845\t:\u0001:\u0001:\u0001:\u0001:\u0005:\u084b\b:\n:\f:\u084e"+
		"\t:\u0001:\u0001:\u0003:\u0852\b:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001"+
		":\u0001:\u0001:\u0005:\u085c\b:\n:\f:\u085f\t:\u0001:\u0001:\u0005:\u0863"+
		"\b:\n:\f:\u0866\t:\u0001:\u0001:\u0001:\u0001:\u0005:\u086c\b:\n:\f:\u086f"+
		"\t:\u0001:\u0001:\u0003:\u0873\b:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001"+
		":\u0001:\u0001:\u0005:\u087d\b:\n:\f:\u0880\t:\u0001:\u0001:\u0005:\u0884"+
		"\b:\n:\f:\u0887\t:\u0001:\u0001:\u0001:\u0001:\u0005:\u088d\b:\n:\f:\u0890"+
		"\t:\u0001:\u0001:\u0003:\u0894\b:\u0001:\u0001:\u0001:\u0005:\u0899\b"+
		":\n:\f:\u089c\t:\u0001:\u0001:\u0001:\u0001:\u0005:\u08a2\b:\n:\f:\u08a5"+
		"\t:\u0001:\u0001:\u0003:\u08a9\b:\u0003:\u08ab\b:\u0001;\u0001;\u0001"+
		";\u0003;\u08b0\b;\u0001<\u0001<\u0001<\u0001<\u0004<\u08b6\b<\u000b<\f"+
		"<\u08b7\u0001<\u0001<\u0001=\u0001=\u0001=\u0005=\u08bf\b=\n=\f=\u08c2"+
		"\t=\u0001>\u0003>\u08c5\b>\u0001>\u0003>\u08c8\b>\u0001>\u0001>\u0003"+
		">\u08cc\b>\u0001>\u0001>\u0001>\u0003>\u08d1\b>\u0001>\u0001>\u0001>\u0001"+
		">\u0003>\u08d7\b>\u0001>\u0001>\u0001>\u0001>\u0003>\u08dd\b>\u0001>\u0001"+
		">\u0001>\u0003>\u08e2\b>\u0001>\u0001>\u0001>\u0003>\u08e7\b>\u0001>\u0001"+
		">\u0001>\u0003>\u08ec\b>\u0001>\u0001>\u0001>\u0003>\u08f1\b>\u0001>\u0003"+
		">\u08f4\b>\u0001?\u0001?\u0001?\u0003?\u08f9\b?\u0001?\u0004?\u08fc\b"+
		"?\u000b?\f?\u08fd\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001"+
		"?\u0003?\u0908\b?\u0001@\u0001@\u0003@\u090c\b@\u0001@\u0001@\u0001@\u0001"+
		"@\u0001@\u0003@\u0913\b@\u0001@\u0001@\u0001@\u0003@\u0918\b@\u0001@\u0003"+
		"@\u091b\b@\u0001@\u0001@\u0001@\u0003@\u0920\b@\u0001@\u0003@\u0923\b"+
		"@\u0001@\u0001@\u0003@\u0927\b@\u0001@\u0001@\u0003@\u092b\b@\u0001A\u0001"+
		"A\u0001A\u0001A\u0005A\u0931\bA\nA\fA\u0934\tA\u0001B\u0001B\u0001B\u0001"+
		"B\u0001B\u0001B\u0001B\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0001C\u0003C\u0946\bC\u0001C\u0003C\u0949\bC\u0001C\u0003C\u094c"+
		"\bC\u0001C\u0001C\u0003C\u0950\bC\u0001C\u0001C\u0001D\u0001D\u0001D\u0001"+
		"D\u0005D\u0958\bD\nD\fD\u095b\tD\u0001E\u0001E\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0005E\u0965\bE\nE\fE\u0968\tE\u0001E\u0001E\u0001F\u0001"+
		"F\u0003F\u096e\bF\u0001F\u0003F\u0971\bF\u0001F\u0001F\u0001F\u0003F\u0976"+
		"\bF\u0001F\u0001F\u0001F\u0005F\u097b\bF\nF\fF\u097e\tF\u0003F\u0980\b"+
		"F\u0001F\u0003F\u0983\bF\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0001G\u0003G\u098e\bG\u0001G\u0003G\u0991\bG\u0001G\u0001G\u0003"+
		"G\u0995\bG\u0001G\u0001G\u0001H\u0001H\u0001H\u0001H\u0003H\u099d\bH\u0001"+
		"H\u0003H\u09a0\bH\u0001H\u0001H\u0001H\u0003H\u09a5\bH\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0003H\u09ad\bH\u0001H\u0001H\u0001H\u0001H\u0003"+
		"H\u09b3\bH\u0001H\u0001H\u0003H\u09b7\bH\u0001I\u0001I\u0003I\u09bb\b"+
		"I\u0001I\u0005I\u09be\bI\nI\fI\u09c1\tI\u0001I\u0001I\u0003I\u09c5\bI"+
		"\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u09cc\bI\u0001I\u0001I\u0003"+
		"I\u09d0\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0005I\u09d9"+
		"\bI\nI\fI\u09dc\tI\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u09e3\bI"+
		"\u0001I\u0003I\u09e6\bI\u0001I\u0001I\u0005I\u09ea\bI\nI\fI\u09ed\tI\u0001"+
		"I\u0001I\u0001I\u0003I\u09f2\bI\u0003I\u09f4\bI\u0001I\u0001I\u0001I\u0003"+
		"I\u09f9\bI\u0001I\u0003I\u09fc\bI\u0001I\u0001I\u0005I\u0a00\bI\nI\fI"+
		"\u0a03\tI\u0001I\u0001I\u0001I\u0003I\u0a08\bI\u0003I\u0a0a\bI\u0001I"+
		"\u0001I\u0003I\u0a0e\bI\u0001I\u0003I\u0a11\bI\u0001I\u0003I\u0a14\bI"+
		"\u0001I\u0001I\u0005I\u0a18\bI\nI\fI\u0a1b\tI\u0001I\u0001I\u0001I\u0003"+
		"I\u0a20\bI\u0001I\u0003I\u0a23\bI\u0001I\u0001I\u0005I\u0a27\bI\nI\fI"+
		"\u0a2a\tI\u0001I\u0001I\u0001I\u0003I\u0a2f\bI\u0003I\u0a31\bI\u0001I"+
		"\u0001I\u0001I\u0003I\u0a36\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0003I\u0a3e\bI\u0003I\u0a40\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0003I\u0a49\bI\u0001I\u0001I\u0001I\u0003I\u0a4e\bI\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0003I\u0a56\bI\u0001I\u0001I\u0003I\u0a5a"+
		"\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0a62\bI\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0a6c\bI\u0001I\u0001"+
		"I\u0001I\u0003I\u0a71\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0a78"+
		"\bI\u0001I\u0001I\u0003I\u0a7c\bI\u0001I\u0001I\u0003I\u0a80\bI\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003"+
		"I\u0aa0\bI\u0001I\u0001I\u0003I\u0aa4\bI\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0ab0\bI\u0001I\u0003I\u0ab3"+
		"\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0abc\bI\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0005I\u0acb\bI\nI\fI\u0ace\tI\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0ad9\bI\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0003I\u0ae0\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0003"+
		"I\u0ae7\bI\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0005I\u0af4\bI\nI\fI\u0af7\tI\u0001I\u0001I\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0b03\bI\u0001I\u0001"+
		"I\u0001I\u0001I\u0003I\u0b09\bI\u0001I\u0001I\u0001I\u0001I\u0003I\u0b0f"+
		"\bI\u0001I\u0001I\u0001I\u0001I\u0003I\u0b15\bI\u0001I\u0001I\u0001I\u0001"+
		"I\u0003I\u0b1b\bI\u0001I\u0001I\u0001I\u0001I\u0003I\u0b21\bI\u0001I\u0001"+
		"I\u0001I\u0001I\u0001I\u0001I\u0003I\u0b29\bI\u0001I\u0001I\u0001I\u0001"+
		"I\u0005I\u0b2f\bI\nI\fI\u0b32\tI\u0001I\u0001I\u0003I\u0b36\bI\u0001J"+
		"\u0001J\u0001J\u0003J\u0b3b\bJ\u0001J\u0001J\u0001K\u0001K\u0001K\u0003"+
		"K\u0b42\bK\u0001K\u0001K\u0001L\u0001L\u0001L\u0003L\u0b49\bL\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0003L\u0b50\bL\u0001L\u0001L\u0001L\u0003L\u0b55"+
		"\bL\u0001L\u0005L\u0b58\bL\nL\fL\u0b5b\tL\u0001M\u0001M\u0001M\u0001M"+
		"\u0001M\u0001M\u0001M\u0001M\u0001N\u0001N\u0001N\u0003N\u0b68\bN\u0001"+
		"N\u0001N\u0001O\u0001O\u0001O\u0003O\u0b6f\bO\u0001O\u0001O\u0001P\u0001"+
		"P\u0001P\u0003P\u0b76\bP\u0001P\u0001P\u0001Q\u0001Q\u0003Q\u0b7c\bQ\u0001"+
		"Q\u0001Q\u0003Q\u0b80\bQ\u0001Q\u0001Q\u0003Q\u0b84\bQ\u0001R\u0001R\u0001"+
		"R\u0001R\u0001R\u0003R\u0b8b\bR\u0001R\u0003R\u0b8e\bR\u0001S\u0001S\u0001"+
		"S\u0003S\u0b93\bS\u0001S\u0001S\u0001T\u0001T\u0001T\u0003T\u0b9a\bT\u0001"+
		"T\u0001T\u0001T\u0005T\u0b9f\bT\nT\fT\u0ba2\tT\u0001T\u0003T\u0ba5\bT"+
		"\u0001U\u0001U\u0001U\u0003U\u0baa\bU\u0001U\u0001U\u0001U\u0005U\u0baf"+
		"\bU\nU\fU\u0bb2\tU\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001"+
		"V\u0005V\u0bbc\bV\nV\fV\u0bbf\tV\u0003V\u0bc1\bV\u0001V\u0001V\u0001V"+
		"\u0003V\u0bc6\bV\u0001V\u0001V\u0001V\u0003V\u0bcb\bV\u0005V\u0bcd\bV"+
		"\nV\fV\u0bd0\tV\u0001V\u0001V\u0001V\u0003V\u0bd5\bV\u0001W\u0001W\u0001"+
		"W\u0001W\u0001W\u0005W\u0bdc\bW\nW\fW\u0bdf\tW\u0001X\u0001X\u0001X\u0001"+
		"X\u0001Y\u0001Y\u0003Y\u0be7\bY\u0001Y\u0001Y\u0001Z\u0001Z\u0001Z\u0001"+
		"Z\u0001Z\u0003Z\u0bf0\bZ\u0001Z\u0003Z\u0bf3\bZ\u0001[\u0001[\u0003[\u0bf7"+
		"\b[\u0001\\\u0001\\\u0001\\\u0001]\u0001]\u0001]\u0001]\u0003]\u0c00\b"+
		"]\u0001^\u0001^\u0003^\u0c04\b^\u0001^\u0003^\u0c07\b^\u0001^\u0003^\u0c0a"+
		"\b^\u0001^\u0001^\u0001^\u0001^\u0003^\u0c10\b^\u0001^\u0003^\u0c13\b"+
		"^\u0001^\u0001^\u0001^\u0001^\u0003^\u0c19\b^\u0001^\u0001^\u0001^\u0001"+
		"^\u0001^\u0005^\u0c20\b^\n^\f^\u0c23\t^\u0003^\u0c25\b^\u0001^\u0001^"+
		"\u0001^\u0001^\u0001^\u0001^\u0001^\u0005^\u0c2e\b^\n^\f^\u0c31\t^\u0003"+
		"^\u0c33\b^\u0001_\u0001_\u0001_\u0003_\u0c38\b_\u0001_\u0003_\u0c3b\b"+
		"_\u0001_\u0001_\u0001_\u0003_\u0c40\b_\u0001_\u0001_\u0001_\u0001_\u0001"+
		"_\u0001_\u0001_\u0001_\u0003_\u0c4a\b_\u0001_\u0001_\u0001_\u0003_\u0c4f"+
		"\b_\u0001_\u0001_\u0004_\u0c53\b_\u000b_\f_\u0c54\u0003_\u0c57\b_\u0001"+
		"_\u0001_\u0004_\u0c5b\b_\u000b_\f_\u0c5c\u0003_\u0c5f\b_\u0001_\u0001"+
		"_\u0001_\u0001_\u0003_\u0c65\b_\u0001_\u0001_\u0001_\u0001_\u0005_\u0c6b"+
		"\b_\n_\f_\u0c6e\t_\u0001_\u0001_\u0003_\u0c72\b_\u0001_\u0001_\u0001_"+
		"\u0001_\u0005_\u0c78\b_\n_\f_\u0c7b\t_\u0003_\u0c7d\b_\u0001`\u0001`\u0001"+
		"`\u0003`\u0c82\b`\u0001`\u0003`\u0c85\b`\u0001`\u0001`\u0001`\u0003`\u0c8a"+
		"\b`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001`\u0003`\u0c92\b`\u0001`\u0001"+
		"`\u0001`\u0001`\u0001`\u0001`\u0003`\u0c9a\b`\u0001`\u0001`\u0001`\u0001"+
		"`\u0003`\u0ca0\b`\u0001`\u0001`\u0001`\u0001`\u0005`\u0ca6\b`\n`\f`\u0ca9"+
		"\t`\u0001`\u0001`\u0003`\u0cad\b`\u0001`\u0001`\u0001`\u0001`\u0005`\u0cb3"+
		"\b`\n`\f`\u0cb6\t`\u0003`\u0cb8\b`\u0001a\u0001a\u0003a\u0cbc\ba\u0001"+
		"a\u0003a\u0cbf\ba\u0001a\u0001a\u0001a\u0001a\u0001a\u0001a\u0003a\u0cc7"+
		"\ba\u0001a\u0001a\u0001a\u0001a\u0003a\u0ccd\ba\u0001a\u0001a\u0001a\u0001"+
		"a\u0001a\u0005a\u0cd4\ba\na\fa\u0cd7\ta\u0003a\u0cd9\ba\u0001b\u0001b"+
		"\u0003b\u0cdd\bb\u0001b\u0001b\u0003b\u0ce1\bb\u0001b\u0001b\u0004b\u0ce5"+
		"\bb\u000bb\fb\u0ce6\u0001b\u0001b\u0003b\u0ceb\bb\u0001b\u0001b\u0003"+
		"b\u0cef\bb\u0003b\u0cf1\bb\u0001b\u0003b\u0cf4\bb\u0001b\u0003b\u0cf7"+
		"\bb\u0001b\u0003b\u0cfa\bb\u0001b\u0001b\u0004b\u0cfe\bb\u000bb\fb\u0cff"+
		"\u0001b\u0001b\u0003b\u0d04\bb\u0001b\u0003b\u0d07\bb\u0001b\u0003b\u0d0a"+
		"\bb\u0001b\u0003b\u0d0d\bb\u0001b\u0003b\u0d10\bb\u0001b\u0001b\u0001"+
		"b\u0004b\u0d15\bb\u000bb\fb\u0d16\u0003b\u0d19\bb\u0001c\u0001c\u0003"+
		"c\u0d1d\bc\u0001d\u0001d\u0001d\u0003d\u0d22\bd\u0001d\u0001d\u0001d\u0001"+
		"d\u0003d\u0d28\bd\u0001d\u0005d\u0d2b\bd\nd\fd\u0d2e\td\u0001e\u0001e"+
		"\u0001e\u0001e\u0003e\u0d34\be\u0001e\u0001e\u0001e\u0001e\u0003e\u0d3a"+
		"\be\u0001e\u0005e\u0d3d\be\ne\fe\u0d40\te\u0003e\u0d42\be\u0001f\u0001"+
		"f\u0001f\u0001f\u0003f\u0d48\bf\u0001g\u0001g\u0003g\u0d4c\bg\u0001h\u0001"+
		"h\u0001h\u0001h\u0001h\u0001h\u0003h\u0d54\bh\u0001i\u0001i\u0003i\u0d58"+
		"\bi\u0001i\u0003i\u0d5b\bi\u0001i\u0003i\u0d5e\bi\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0003i\u0d67\bi\u0001i\u0001i\u0003i\u0d6b"+
		"\bi\u0001i\u0003i\u0d6e\bi\u0001i\u0001i\u0003i\u0d72\bi\u0001j\u0001"+
		"j\u0003j\u0d76\bj\u0001j\u0003j\u0d79\bj\u0001j\u0003j\u0d7c\bj\u0001"+
		"j\u0001j\u0001j\u0003j\u0d81\bj\u0001j\u0001j\u0001j\u0001j\u0003j\u0d87"+
		"\bj\u0005j\u0d89\bj\nj\fj\u0d8c\tj\u0001j\u0001j\u0001j\u0001j\u0001j"+
		"\u0001j\u0001j\u0003j\u0d95\bj\u0001j\u0001j\u0001j\u0001j\u0003j\u0d9b"+
		"\bj\u0005j\u0d9d\bj\nj\fj\u0da0\tj\u0001j\u0001j\u0001j\u0003j\u0da5\b"+
		"j\u0001j\u0001j\u0003j\u0da9\bj\u0001k\u0001k\u0001k\u0001k\u0003k\u0daf"+
		"\bk\u0001k\u0003k\u0db2\bk\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001"+
		"l\u0001l\u0001l\u0001l\u0003l\u0dbe\bl\u0001l\u0001l\u0003l\u0dc2\bl\u0001"+
		"l\u0001l\u0003l\u0dc6\bl\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0003"+
		"m\u0dce\bm\u0001m\u0001m\u0003m\u0dd2\bm\u0001n\u0001n\u0001n\u0001n\u0001"+
		"o\u0001o\u0003o\u0dda\bo\u0001o\u0003o\u0ddd\bo\u0001o\u0001o\u0003o\u0de1"+
		"\bo\u0001o\u0003o\u0de4\bo\u0001o\u0001o\u0001o\u0001o\u0005o\u0dea\b"+
		"o\no\fo\u0ded\to\u0001o\u0001o\u0003o\u0df1\bo\u0001o\u0003o\u0df4\bo"+
		"\u0001o\u0003o\u0df7\bo\u0001p\u0001p\u0003p\u0dfb\bp\u0001p\u0003p\u0dfe"+
		"\bp\u0001p\u0001p\u0001p\u0001p\u0001p\u0005p\u0e05\bp\np\fp\u0e08\tp"+
		"\u0001p\u0001p\u0003p\u0e0c\bp\u0001q\u0001q\u0001q\u0001q\u0001q\u0005"+
		"q\u0e13\bq\nq\fq\u0e16\tq\u0001r\u0001r\u0003r\u0e1a\br\u0001s\u0001s"+
		"\u0001s\u0005s\u0e1f\bs\ns\fs\u0e22\ts\u0001t\u0001t\u0005t\u0e26\bt\n"+
		"t\ft\u0e29\tt\u0001t\u0001t\u0001t\u0005t\u0e2e\bt\nt\ft\u0e31\tt\u0001"+
		"t\u0001t\u0001t\u0003t\u0e36\bt\u0001u\u0001u\u0001u\u0001u\u0001u\u0001"+
		"u\u0003u\u0e3e\bu\u0001u\u0003u\u0e41\bu\u0001u\u0003u\u0e44\bu\u0001"+
		"u\u0001u\u0001u\u0005u\u0e49\bu\nu\fu\u0e4c\tu\u0003u\u0e4e\bu\u0001u"+
		"\u0001u\u0001u\u0001u\u0001u\u0003u\u0e55\bu\u0001u\u0003u\u0e58\bu\u0001"+
		"u\u0001u\u0001u\u0001u\u0001u\u0001u\u0003u\u0e60\bu\u0001v\u0001v\u0001"+
		"v\u0001v\u0003v\u0e66\bv\u0001v\u0001v\u0001v\u0001v\u0001w\u0001w\u0001"+
		"w\u0001w\u0001w\u0003w\u0e71\bw\u0001x\u0003x\u0e74\bx\u0001x\u0001x\u0003"+
		"x\u0e78\bx\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0003"+
		"x\u0e82\bx\u0001x\u0001x\u0001x\u0001x\u0003x\u0e88\bx\u0001x\u0001x\u0003"+
		"x\u0e8c\bx\u0001x\u0001x\u0003x\u0e90\bx\u0001x\u0001x\u0001x\u0001x\u0001"+
		"x\u0001x\u0001x\u0001x\u0003x\u0e9a\bx\u0001x\u0001x\u0001x\u0003x\u0e9f"+
		"\bx\u0003x\u0ea1\bx\u0001x\u0001x\u0003x\u0ea5\bx\u0001y\u0001y\u0001"+
		"y\u0001y\u0001y\u0001y\u0001y\u0001y\u0003y\u0eaf\by\u0001z\u0001z\u0001"+
		"z\u0001z\u0001z\u0001z\u0001z\u0001z\u0003z\u0eb9\bz\u0001{\u0001{\u0005"+
		"{\u0ebd\b{\n{\f{\u0ec0\t{\u0001{\u0001{\u0003{\u0ec4\b{\u0001{\u0001{"+
		"\u0003{\u0ec8\b{\u0001{\u0003{\u0ecb\b{\u0001{\u0003{\u0ece\b{\u0001{"+
		"\u0003{\u0ed1\b{\u0001{\u0003{\u0ed4\b{\u0001{\u0001{\u0005{\u0ed8\b{"+
		"\n{\f{\u0edb\t{\u0001{\u0001{\u0001{\u0003{\u0ee0\b{\u0001{\u0003{\u0ee3"+
		"\b{\u0001{\u0003{\u0ee6\b{\u0001{\u0003{\u0ee9\b{\u0001{\u0003{\u0eec"+
		"\b{\u0001{\u0003{\u0eef\b{\u0003{\u0ef1\b{\u0001|\u0001|\u0005|\u0ef5"+
		"\b|\n|\f|\u0ef8\t|\u0001|\u0001|\u0001|\u0003|\u0efd\b|\u0001|\u0003|"+
		"\u0f00\b|\u0001|\u0003|\u0f03\b|\u0001|\u0003|\u0f06\b|\u0001|\u0003|"+
		"\u0f09\b|\u0001}\u0001}\u0003}\u0f0d\b}\u0001}\u0001}\u0001~\u0001~\u0003"+
		"~\u0f13\b~\u0001~\u0001~\u0003~\u0f17\b~\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0f1f\b\u007f\u0001"+
		"\u007f\u0001\u007f\u0003\u007f\u0f23\b\u007f\u0001\u007f\u0003\u007f\u0f26"+
		"\b\u007f\u0003\u007f\u0f28\b\u007f\u0001\u0080\u0001\u0080\u0001\u0080"+
		"\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080"+
		"\u0001\u0080\u0001\u0080\u0003\u0080\u0f35\b\u0080\u0001\u0080\u0003\u0080"+
		"\u0f38\b\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0005\u0081\u0f3d\b"+
		"\u0081\n\u0081\f\u0081\u0f40\t\u0081\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0f49\b\u0082"+
		"\u0001\u0082\u0003\u0082\u0f4c\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0003\u0082\u0f51\b\u0082\u0003\u0082\u0f53\b\u0082\u0001\u0082\u0001"+
		"\u0082\u0003\u0082\u0f57\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0f5f\b\u0082\u0001\u0083\u0001"+
		"\u0083\u0001\u0083\u0001\u0083\u0003\u0083\u0f65\b\u0083\u0001\u0083\u0001"+
		"\u0083\u0001\u0083\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0003"+
		"\u0084\u0f6e\b\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0085\u0001"+
		"\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001"+
		"\u0085\u0003\u0085\u0f7b\b\u0085\u0001\u0086\u0001\u0086\u0003\u0086\u0f7f"+
		"\b\u0086\u0001\u0086\u0001\u0086\u0005\u0086\u0f83\b\u0086\n\u0086\f\u0086"+
		"\u0f86\t\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087"+
		"\u0001\u0087\u0003\u0087\u0f8e\b\u0087\u0001\u0087\u0003\u0087\u0f91\b"+
		"\u0087\u0001\u0087\u0001\u0087\u0003\u0087\u0f95\b\u0087\u0001\u0087\u0003"+
		"\u0087\u0f98\b\u0087\u0001\u0087\u0001\u0087\u0003\u0087\u0f9c\b\u0087"+
		"\u0001\u0087\u0001\u0087\u0003\u0087\u0fa0\b\u0087\u0001\u0087\u0003\u0087"+
		"\u0fa3\b\u0087\u0003\u0087\u0fa5\b\u0087\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0088\u0005\u0088\u0fab\b\u0088\n\u0088\f\u0088\u0fae\t\u0088"+
		"\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0088\u0001\u0088\u0001\u0088\u0003\u0088\u0fb9\b\u0088\u0001\u0088"+
		"\u0001\u0088\u0004\u0088\u0fbd\b\u0088\u000b\u0088\f\u0088\u0fbe\u0003"+
		"\u0088\u0fc1\b\u0088\u0001\u0088\u0001\u0088\u0004\u0088\u0fc5\b\u0088"+
		"\u000b\u0088\f\u0088\u0fc6\u0003\u0088\u0fc9\b\u0088\u0003\u0088\u0fcb"+
		"\b\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0fd1"+
		"\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0003\u0089\u0fd9\b\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0001"+
		"\u008a\u0001\u008a\u0001\u008a\u0003\u008a\u0fe1\b\u008a\u0001\u008b\u0001"+
		"\u008b\u0003\u008b\u0fe5\b\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u0fe9"+
		"\b\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0005"+
		"\u008c\u0ff0\b\u008c\n\u008c\f\u008c\u0ff3\t\u008c\u0001\u008c\u0001\u008c"+
		"\u0003\u008c\u0ff7\b\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e"+
		"\u0005\u008e\u1009\b\u008e\n\u008e\f\u008e\u100c\t\u008e\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u1010\b\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0003\u0090\u1016\b\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0001\u0090\u0003\u0090\u101d\b\u0090\u0001\u0091\u0001\u0091\u0001"+
		"\u0091\u0003\u0091\u1022\b\u0091\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0005\u0092\u1029\b\u0092\n\u0092\f\u0092\u102c\t\u0092"+
		"\u0003\u0092\u102e\b\u0092\u0001\u0093\u0001\u0093\u0003\u0093\u1032\b"+
		"\u0093\u0001\u0094\u0001\u0094\u0003\u0094\u1036\b\u0094\u0001\u0094\u0001"+
		"\u0094\u0003\u0094\u103a\b\u0094\u0001\u0094\u0003\u0094\u103d\b\u0094"+
		"\u0001\u0094\u0003\u0094\u1040\b\u0094\u0001\u0094\u0003\u0094\u1043\b"+
		"\u0094\u0001\u0095\u0001\u0095\u0003\u0095\u1047\b\u0095\u0001\u0095\u0001"+
		"\u0095\u0003\u0095\u104b\b\u0095\u0001\u0095\u0003\u0095\u104e\b\u0095"+
		"\u0001\u0095\u0003\u0095\u1051\b\u0095\u0001\u0095\u0003\u0095\u1054\b"+
		"\u0095\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0097\u0001\u0097\u0003"+
		"\u0097\u105b\b\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u105f\b\u0097"+
		"\u0001\u0097\u0001\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098"+
		"\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0005\u0099"+
		"\u106c\b\u0099\n\u0099\f\u0099\u106f\t\u0099\u0001\u0099\u0003\u0099\u1072"+
		"\b\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009b\u0001\u009b\u0001"+
		"\u009b\u0001\u009b\u0001\u009b\u0001\u009c\u0001\u009c\u0003\u009c\u107e"+
		"\b\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0005\u009c\u1084"+
		"\b\u009c\n\u009c\f\u009c\u1087\t\u009c\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0003\u009d\u1090\b\u009d"+
		"\u0001\u009e\u0001\u009e\u0003\u009e\u1094\b\u009e\u0001\u009e\u0003\u009e"+
		"\u1097\b\u009e\u0001\u009e\u0001\u009e\u0001\u009f\u0001\u009f\u0003\u009f"+
		"\u109d\b\u009f\u0001\u009f\u0003\u009f\u10a0\b\u009f\u0001\u009f\u0003"+
		"\u009f\u10a3\b\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0\u10ac\b\u00a0\u0001\u00a1\u0001"+
		"\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0003"+
		"\u00a1\u10b5\b\u00a1\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0005\u00a2\u10bd\b\u00a2\n\u00a2\f\u00a2\u10c0\t\u00a2"+
		"\u0001\u00a2\u0003\u00a2\u10c3\b\u00a2\u0001\u00a3\u0001\u00a3\u0001\u00a3"+
		"\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0005\u00a3\u10cb\b\u00a3\n\u00a3"+
		"\f\u00a3\u10ce\t\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0003\u00a4\u10d7\b\u00a4\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0003\u00a6"+
		"\u10df\b\u00a6\u0001\u00a6\u0003\u00a6\u10e2\b\u00a6\u0001\u00a7\u0001"+
		"\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0005\u00a7\u10e9\b\u00a7\n"+
		"\u00a7\f\u00a7\u10ec\t\u00a7\u0003\u00a7\u10ee\b\u00a7\u0001\u00a7\u0001"+
		"\u00a7\u0003\u00a7\u10f2\b\u00a7\u0001\u00a7\u0005\u00a7\u10f5\b\u00a7"+
		"\n\u00a7\f\u00a7\u10f8\t\u00a7\u0001\u00a7\u0003\u00a7\u10fb\b\u00a7\u0001"+
		"\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0005\u00a8\u1102"+
		"\b\u00a8\n\u00a8\f\u00a8\u1105\t\u00a8\u0003\u00a8\u1107\b\u00a8\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0005\u00ab\u1124\b\u00ab\n\u00ab\f\u00ab"+
		"\u1127\t\u00ab\u0003\u00ab\u1129\b\u00ab\u0001\u00ab\u0003\u00ab\u112c"+
		"\b\u00ab\u0001\u00ac\u0001\u00ac\u0001\u00ad\u0001\u00ad\u0001\u00ae\u0001"+
		"\u00ae\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0005\u00b0\u1162"+
		"\b\u00b0\n\u00b0\f\u00b0\u1165\t\u00b0\u0001\u00b0\u0001\u00b0\u0003\u00b0"+
		"\u1169\b\u00b0\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1"+
		"\u0001\u00b1\u0001\u00b2\u0001\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b3"+
		"\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3"+
		"\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3"+
		"\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0003\u00b3\u1185\b\u00b3\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0003\u00b4"+
		"\u1193\b\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0005\u00b5\u1198\b"+
		"\u00b5\n\u00b5\f\u00b5\u119b\t\u00b5\u0001\u00b5\u0003\u00b5\u119e\b\u00b5"+
		"\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0003\u00b6\u11a4\b\u00b6"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7"+
		"\u0003\u00b7\u11ac\b\u00b7\u0003\u00b7\u11ae\b\u00b7\u0001\u00b8\u0001"+
		"\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0001\u00b9\u0003\u00b9\u11b9\b\u00b9\u0001\u00ba\u0001\u00ba\u0001"+
		"\u00ba\u0001\u00ba\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0003"+
		"\u00bb\u11c3\b\u00bb\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001"+
		"\u00bc\u0003\u00bc\u11ca\b\u00bc\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0003\u00bd\u11d0\b\u00bd\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00bf\u0001\u00bf\u0003\u00bf\u11d8\b\u00bf\u0001\u00c0\u0001"+
		"\u00c0\u0001\u00c0\u0003\u00c0\u11dd\b\u00c0\u0001\u00c0\u0001\u00c0\u0001"+
		"\u00c0\u0001\u00c0\u0005\u00c0\u11e3\b\u00c0\n\u00c0\f\u00c0\u11e6\t\u00c0"+
		"\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0005\u00c0\u11eb\b\u00c0\n\u00c0"+
		"\f\u00c0\u11ee\t\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0005\u00c0"+
		"\u11f3\b\u00c0\n\u00c0\f\u00c0\u11f6\t\u00c0\u0001\u00c0\u0001\u00c0\u0001"+
		"\u00c0\u0005\u00c0\u11fb\b\u00c0\n\u00c0\f\u00c0\u11fe\t\u00c0\u0001\u00c0"+
		"\u0005\u00c0\u1201\b\u00c0\n\u00c0\f\u00c0\u1204\t\u00c0\u0001\u00c0\u0001"+
		"\u00c0\u0003\u00c0\u1208\b\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0003"+
		"\u00c1\u120d\b\u00c1\u0001\u00c1\u0004\u00c1\u1210\b\u00c1\u000b\u00c1"+
		"\f\u00c1\u1211\u0001\u00c1\u0001\u00c1\u0004\u00c1\u1216\b\u00c1\u000b"+
		"\u00c1\f\u00c1\u1217\u0003\u00c1\u121a\b\u00c1\u0001\u00c1\u0001\u00c1"+
		"\u0001\u00c1\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0004\u00c2"+
		"\u1223\b\u00c2\u000b\u00c2\f\u00c2\u1224\u0001\u00c2\u0005\u00c2\u1228"+
		"\b\u00c2\n\u00c2\f\u00c2\u122b\t\u00c2\u0001\u00c2\u0001\u00c2\u0004\u00c2"+
		"\u122f\b\u00c2\u000b\u00c2\f\u00c2\u1230\u0003\u00c2\u1233\b\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001"+
		"\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0003"+
		"\u00c5\u1241\b\u00c5\u0001\u00c5\u0001\u00c5\u0004\u00c5\u1245\b\u00c5"+
		"\u000b\u00c5\f\u00c5\u1246\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5"+
		"\u124c\b\u00c5\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0003\u00c6\u1251\b"+
		"\u00c6\u0001\u00c6\u0001\u00c6\u0004\u00c6\u1255\b\u00c6\u000b\u00c6\f"+
		"\u00c6\u1256\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6"+
		"\u0003\u00c6\u125e\b\u00c6\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c8"+
		"\u0001\u00c8\u0001\u00c8\u0003\u00c8\u1266\b\u00c8\u0001\u00c8\u0001\u00c8"+
		"\u0001\u00c8\u0001\u00c8\u0004\u00c8\u126c\b\u00c8\u000b\u00c8\f\u00c8"+
		"\u126d\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u1273\b\u00c8\u0001"+
		"\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0003\u00c9\u1279\b\u00c9\u0001"+
		"\u00c9\u0003\u00c9\u127c\b\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001"+
		"\u00c9\u0001\u00c9\u0001\u00c9\u0003\u00c9\u1284\b\u00c9\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0003\u00ca\u128b\b\u00ca\u0001"+
		"\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0003\u00cb\u1294\b\u00cb\u0001\u00cb\u0003\u00cb\u1297\b\u00cb"+
		"\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"+
		"\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd"+
		"\u0001\u00cd\u0005\u00cd\u12a6\b\u00cd\n\u00cd\f\u00cd\u12a9\t\u00cd\u0001"+
		"\u00cd\u0001\u00cd\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce\u12b0"+
		"\b\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001"+
		"\u00ce\u0003\u00ce\u12b8\b\u00ce\u0001\u00cf\u0001\u00cf\u0003\u00cf\u12bc"+
		"\b\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003"+
		"\u00d0\u12c3\b\u00d0\u0001\u00d0\u0001\u00d0\u0004\u00d0\u12c7\b\u00d0"+
		"\u000b\u00d0\f\u00d0\u12c8\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"+
		"\u0004\u00d1\u12cf\b\u00d1\u000b\u00d1\f\u00d1\u12d0\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0005\u00d2\u12d8\b\u00d2\n"+
		"\u00d2\f\u00d2\u12db\t\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0003"+
		"\u00d2\u12e0\b\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0005\u00d2\u12e5"+
		"\b\u00d2\n\u00d2\f\u00d2\u12e8\t\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0003\u00d2\u12ee\b\u00d2\u0001\u00d2\u0005\u00d2\u12f1\b"+
		"\u00d2\n\u00d2\f\u00d2\u12f4\t\u00d2\u0003\u00d2\u12f6\b\u00d2\u0003\u00d2"+
		"\u12f8\b\u00d2\u0001\u00d2\u0001\u00d2\u0004\u00d2\u12fc\b\u00d2\u000b"+
		"\u00d2\f\u00d2\u12fd\u0003\u00d2\u1300\b\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0005\u00d2\u1304\b\u00d2\n\u00d2\f\u00d2\u1307\t\u00d2\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2\u130d\b\u00d2\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0003\u00d2\u1312\b\u00d2\u0001\u00d2\u0001\u00d2\u0003"+
		"\u00d2\u1316\b\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0003"+
		"\u00d2\u131c\b\u00d2\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001"+
		"\u00d3\u0005\u00d3\u1323\b\u00d3\n\u00d3\f\u00d3\u1326\t\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0001\u00d3\u0003\u00d3\u132b\b\u00d3\u0001\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0005\u00d3\u1330\b\u00d3\n\u00d3\f\u00d3\u1333\t\u00d3\u0001"+
		"\u00d3\u0001\u00d3\u0001\u00d3\u0003\u00d3\u1338\b\u00d3\u0001\u00d3\u0001"+
		"\u00d3\u0001\u00d3\u0001\u00d3\u0003\u00d3\u133e\b\u00d3\u0001\u00d3\u0005"+
		"\u00d3\u1341\b\u00d3\n\u00d3\f\u00d3\u1344\t\u00d3\u0003\u00d3\u1346\b"+
		"\u00d3\u0003\u00d3\u1348\b\u00d3\u0001\u00d3\u0001\u00d3\u0004\u00d3\u134c"+
		"\b\u00d3\u000b\u00d3\f\u00d3\u134d\u0003\u00d3\u1350\b\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0005\u00d3\u1354\b\u00d3\n\u00d3\f\u00d3\u1357\t\u00d3\u0001"+
		"\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0003\u00d3\u135d\b\u00d3\u0003"+
		"\u00d3\u135f\b\u00d3\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0003\u00d4\u1364"+
		"\b\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0005\u00d4\u1369\b\u00d4"+
		"\n\u00d4\f\u00d4\u136c\t\u00d4\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001"+
		"\u00d5\u0005\u00d5\u1372\b\u00d5\n\u00d5\f\u00d5\u1375\t\u00d5\u0001\u00d5"+
		"\u0001\u00d5\u0003\u00d5\u1379\b\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5"+
		"\u0001\u00d5\u0001\u00d5\u0005\u00d5\u1380\b\u00d5\n\u00d5\f\u00d5\u1383"+
		"\t\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0003\u00d5\u1389"+
		"\b\u00d5\u0001\u00d5\u0005\u00d5\u138c\b\u00d5\n\u00d5\f\u00d5\u138f\t"+
		"\u00d5\u0003\u00d5\u1391\b\u00d5\u0003\u00d5\u1393\b\u00d5\u0001\u00d5"+
		"\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0005\u00d5\u1399\b\u00d5\n\u00d5"+
		"\f\u00d5\u139c\t\u00d5\u0003\u00d5\u139e\b\u00d5\u0001\u00d5\u0001\u00d5"+
		"\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0003\u00d5\u13a6\b\u00d5"+
		"\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0003\u00d5\u13ab\b\u00d5\u0001\u00d5"+
		"\u0001\u00d5\u0001\u00d5\u0003\u00d5\u13b0\b\u00d5\u0005\u00d5\u13b2\b"+
		"\u00d5\n\u00d5\f\u00d5\u13b5\t\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5"+
		"\u0003\u00d5\u13ba\b\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0003\u00d5"+
		"\u13bf\b\u00d5\u0005\u00d5\u13c1\b\u00d5\n\u00d5\f\u00d5\u13c4\t\u00d5"+
		"\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0003\u00d5\u13c9\b\u00d5\u0003\u00d5"+
		"\u13cb\b\u00d5\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0005\u00d6\u13d4\b\u00d6\n\u00d6\f\u00d6\u13d7"+
		"\t\u00d6\u0003\u00d6\u13d9\b\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6"+
		"\u0005\u00d6\u13de\b\u00d6\n\u00d6\f\u00d6\u13e1\t\u00d6\u0003\u00d6\u13e3"+
		"\b\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001"+
		"\u00d7\u0001\u00d7\u0001\u00d7\u0005\u00d7\u13ed\b\u00d7\n\u00d7\f\u00d7"+
		"\u13f0\t\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0003\u00d7\u13f5\b"+
		"\u00d7\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0005"+
		"\u00d8\u13fc\b\u00d8\n\u00d8\f\u00d8\u13ff\t\u00d8\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0005\u00d9\u1405\b\u00d9\n\u00d9\f\u00d9\u1408"+
		"\t\u00d9\u0001\u00d9\u0001\u00d9\u0003\u00d9\u140c\b\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0005\u00d9\u1413\b\u00d9"+
		"\n\u00d9\f\u00d9\u1416\t\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003"+
		"\u00d9\u141b\b\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001"+
		"\u00d9\u0001\u00d9\u0001\u00d9\u0005\u00d9\u1424\b\u00d9\n\u00d9\f\u00d9"+
		"\u1427\t\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003\u00d9\u142c\b"+
		"\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003\u00d9\u1431\b\u00d9\u0005"+
		"\u00d9\u1433\b\u00d9\n\u00d9\f\u00d9\u1436\t\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0003\u00d9\u143b\b\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0003\u00d9\u1440\b\u00d9\u0005\u00d9\u1442\b\u00d9\n\u00d9\f\u00d9\u1445"+
		"\t\u00d9\u0003\u00d9\u1447\b\u00d9\u0001\u00da\u0001\u00da\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0005\u00da"+
		"\u1451\b\u00da\n\u00da\f\u00da\u1454\t\u00da\u0001\u00db\u0001\u00db\u0001"+
		"\u00db\u0001\u00db\u0003\u00db\u145a\b\u00db\u0001\u00db\u0001\u00db\u0001"+
		"\u00db\u0003\u00db\u145f\b\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0003\u00dd\u1471\b\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0001\u00dd\u0001\u00dd\u0003\u00dd\u1479\b\u00dd\u0001\u00de\u0001"+
		"\u00de\u0001\u00de\u0003\u00de\u147e\b\u00de\u0001\u00de\u0001\u00de\u0001"+
		"\u00de\u0001\u00de\u0003\u00de\u1484\b\u00de\u0001\u00df\u0001\u00df\u0001"+
		"\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0003"+
		"\u00df\u148e\b\u00df\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001"+
		"\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0003\u00e0\u1498\b\u00e0\u0001"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0003\u00e1\u14a2\b\u00e1\u0001\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0003\u00e1\u14a8\b\u00e1\u0001\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u14b1"+
		"\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u14b7"+
		"\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003"+
		"\u00e1\u14be\b\u00e1\u0003\u00e1\u14c0\b\u00e1\u0001\u00e2\u0001\u00e2"+
		"\u0001\u00e2\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3"+
		"\u0003\u00e3\u14ca\b\u00e3\u0001\u00e4\u0001\u00e4\u0003\u00e4\u14ce\b"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u14d2\b\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0003\u00e4\u14dc\b\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003"+
		"\u00e4\u14e1\b\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0003\u00e4\u1524\b\u00e4\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0003\u00e5\u1536\b\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001"+
		"\u00e6\u0001\u00e7\u0001\u00e7\u0003\u00e7\u153e\b\u00e7\u0001\u00e7\u0001"+
		"\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001"+
		"\u00e7\u0005\u00e7\u1548\b\u00e7\n\u00e7\f\u00e7\u154b\t\u00e7\u0001\u00e7"+
		"\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0003\u00e7\u1551\b\u00e7\u0003\u00e7"+
		"\u1553\b\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7"+
		"\u0001\u00e7\u0005\u00e7\u155b\b\u00e7\n\u00e7\f\u00e7\u155e\t\u00e7\u0003"+
		"\u00e7\u1560\b\u00e7\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0005"+
		"\u00e8\u1566\b\u00e8\n\u00e8\f\u00e8\u1569\t\u00e8\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0001\u00e9\u0003\u00e9\u156f\b\u00e9\u0001\u00ea\u0001\u00ea"+
		"\u0003\u00ea\u1573\b\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00eb"+
		"\u0001\u00eb\u0003\u00eb\u157a\b\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0003\u00eb\u157f\b\u00eb\u0001\u00eb\u0003\u00eb\u1582\b\u00eb\u0001"+
		"\u00eb\u0003\u00eb\u1585\b\u00eb\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001"+
		"\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0003\u00ec\u158e\b\u00ec\u0001"+
		"\u00ed\u0001\u00ed\u0003\u00ed\u1592\b\u00ed\u0001\u00ed\u0001\u00ed\u0003"+
		"\u00ed\u1596\b\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001"+
		"\u00ee\u0001\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001"+
		"\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0003\u00f0\u15ad"+
		"\b\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0003"+
		"\u00f0\u15b4\b\u00f0\u0005\u00f0\u15b6\b\u00f0\n\u00f0\f\u00f0\u15b9\t"+
		"\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0003\u00f0\u15bf"+
		"\b\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0003"+
		"\u00f0\u15c6\b\u00f0\u0001\u00f0\u0003\u00f0\u15c9\b\u00f0\u0001\u00f0"+
		"\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0"+
		"\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0005\u00f0"+
		"\u15d7\b\u00f0\n\u00f0\f\u00f0\u15da\t\u00f0\u0003\u00f0\u15dc\b\u00f0"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0003\u00f1\u15e6\b\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0003\u00f1\u15ea\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0003\u00f1\u15f0\b\u00f1\u0001\u00f1\u0003\u00f1\u15f3\b\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u15f8\b\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0003\u00f1\u15fc\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0003\u00f1\u1603\b\u00f1\u0001\u00f1\u0003\u00f1\u1606"+
		"\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u160c"+
		"\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1624"+
		"\b\u00f1\u0001\u00f1\u0003\u00f1\u1627\b\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1633\b\u00f1\u0001\u00f1\u0003\u00f1"+
		"\u1636\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1640\b\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1"+
		"\u1648\b\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u164c\b\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1653"+
		"\b\u00f1\u0001\u00f1\u0003\u00f1\u1656\b\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0005\u00f1\u165d\b\u00f1\n\u00f1"+
		"\f\u00f1\u1660\t\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1"+
		"\u1665\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1"+
		"\u166b\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1675\b\u00f1\u0003\u00f1"+
		"\u1677\b\u00f1\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0003\u00f2"+
		"\u167d\b\u00f2\u0001\u00f2\u0003\u00f2\u1680\b\u00f2\u0001\u00f2\u0003"+
		"\u00f2\u1683\b\u00f2\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001"+
		"\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0003"+
		"\u00f3\u168f\b\u00f3\u0001\u00f3\u0003\u00f3\u1692\b\u00f3\u0001\u00f4"+
		"\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4\u1698\b\u00f4\u0001\u00f5"+
		"\u0003\u00f5\u169b\b\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5"+
		"\u0001\u00f5\u0001\u00f5\u0003\u00f5\u16a3\b\u00f5\u0001\u00f5\u0001\u00f5"+
		"\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0003\u00f5\u16ab\b\u00f5"+
		"\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0003\u00f6\u16b1\b\u00f6"+
		"\u0001\u00f6\u0001\u00f6\u0003\u00f6\u16b5\b\u00f6\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0003\u00f7\u16c3\b\u00f7"+
		"\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00f9\u0005\u00f9\u16cd\b\u00f9\n\u00f9\f\u00f9\u16d0"+
		"\t\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0003\u00f9\u16d6"+
		"\b\u00f9\u0001\u00f9\u0003\u00f9\u16d9\b\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00fa\u0001\u00fa\u0003\u00fa\u16e0\b\u00fa\u0001\u00fa"+
		"\u0001\u00fa\u0001\u00fa\u0005\u00fa\u16e5\b\u00fa\n\u00fa\f\u00fa\u16e8"+
		"\t\u00fa\u0001\u00fb\u0001\u00fb\u0003\u00fb\u16ec\b\u00fb\u0001\u00fb"+
		"\u0001\u00fb\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc"+
		"\u0001\u00fc\u0001\u00fc\u0005\u00fc\u16f7\b\u00fc\n\u00fc\f\u00fc\u16fa"+
		"\t\u00fc\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00ff\u0001\u00ff\u0003\u00ff\u1704\b\u00ff\u0001\u00ff\u0001"+
		"\u00ff\u0001\u00ff\u0001\u00ff\u0003\u00ff\u170a\b\u00ff\u0001\u0100\u0001"+
		"\u0100\u0001\u0100\u0003\u0100\u170f\b\u0100\u0001\u0100\u0001\u0100\u0001"+
		"\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001"+
		"\u0100\u0001\u0100\u0001\u0100\u0003\u0100\u171c\b\u0100\u0003\u0100\u171e"+
		"\b\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0003\u0100\u1723\b\u0100"+
		"\u0001\u0100\u0001\u0100\u0003\u0100\u1727\b\u0100\u0001\u0100\u0003\u0100"+
		"\u172a\b\u0100\u0003\u0100\u172c\b\u0100\u0001\u0101\u0001\u0101\u0001"+
		"\u0101\u0001\u0101\u0001\u0101\u0003\u0101\u1733\b\u0101\u0001\u0102\u0001"+
		"\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0003\u0102\u173a\b\u0102\u0001"+
		"\u0102\u0003\u0102\u173d\b\u0102\u0001\u0102\u0003\u0102\u1740\b\u0102"+
		"\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0003\u0102\u1746\b\u0102"+
		"\u0001\u0102\u0001\u0102\u0003\u0102\u174a\b\u0102\u0001\u0103\u0001\u0103"+
		"\u0001\u0103\u0001\u0103\u0003\u0103\u1750\b\u0103\u0001\u0104\u0001\u0104"+
		"\u0001\u0104\u0001\u0104\u0003\u0104\u1756\b\u0104\u0001\u0104\u0001\u0104"+
		"\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0106\u0001\u0106\u0001\u0106"+
		"\u0001\u0107\u0001\u0107\u0001\u0107\u0003\u0107\u1763\b\u0107\u0001\u0107"+
		"\u0001\u0107\u0001\u0107\u0003\u0107\u1768\b\u0107\u0001\u0107\u0001\u0107"+
		"\u0001\u0107\u0001\u0107\u0005\u0107\u176e\b\u0107\n\u0107\f\u0107\u1771"+
		"\t\u0107\u0003\u0107\u1773\b\u0107\u0001\u0108\u0001\u0108\u0001\u0108"+
		"\u0003\u0108\u1778\b\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0003\u0108"+
		"\u177d\b\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0005\u0108"+
		"\u1783\b\u0108\n\u0108\f\u0108\u1786\t\u0108\u0003\u0108\u1788\b\u0108"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0003\u0109\u1790\b\u0109\u0001\u010a\u0001\u010a\u0003\u010a\u1794\b"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0005\u010a\u179f\b\u010a\n"+
		"\u010a\f\u010a\u17a2\t\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0003"+
		"\u010a\u17a7\b\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0005\u010a\u17b1\b\u010a\n"+
		"\u010a\f\u010a\u17b4\t\u010a\u0003\u010a\u17b6\b\u010a\u0001\u010b\u0001"+
		"\u010b\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0003"+
		"\u010c\u17bf\b\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u17c4"+
		"\b\u010c\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0003\u010d\u17ca"+
		"\b\u010d\u0001\u010e\u0001\u010e\u0001\u010f\u0001\u010f\u0003\u010f\u17d0"+
		"\b\u010f\u0001\u0110\u0001\u0110\u0001\u0110\u0003\u0110\u17d5\b\u0110"+
		"\u0003\u0110\u17d7\b\u0110\u0001\u0110\u0003\u0110\u17da\b\u0110\u0001"+
		"\u0110\u0001\u0110\u0003\u0110\u17de\b\u0110\u0003\u0110\u17e0\b\u0110"+
		"\u0001\u0111\u0001\u0111\u0003\u0111\u17e4\b\u0111\u0001\u0111\u0001\u0111"+
		"\u0001\u0111\u0001\u0111\u0003\u0111\u17ea\b\u0111\u0001\u0111\u0003\u0111"+
		"\u17ed\b\u0111\u0001\u0111\u0003\u0111\u17f0\b\u0111\u0001\u0112\u0001"+
		"\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0003\u0112\u17f7\b\u0112\u0001"+
		"\u0113\u0001\u0113\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0003"+
		"\u0114\u17ff\b\u0114\u0001\u0115\u0001\u0115\u0003\u0115\u1803\b\u0115"+
		"\u0001\u0116\u0001\u0116\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117"+
		"\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117"+
		"\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0004\u0117\u1815\b\u0117"+
		"\u000b\u0117\f\u0117\u1816\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118"+
		"\u0001\u0118\u0003\u0118\u181e\b\u0118\u0003\u0118\u1820\b\u0118\u0001"+
		"\u0119\u0001\u0119\u0001\u0119\u0004\u0119\u1825\b\u0119\u000b\u0119\f"+
		"\u0119\u1826\u0003\u0119\u1829\b\u0119\u0001\u011a\u0001\u011a\u0003\u011a"+
		"\u182d\b\u011a\u0001\u011b\u0001\u011b\u0001\u011b\u0003\u011b\u1832\b"+
		"\u011b\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001"+
		"\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0003\u011c\u183d\b\u011c\u0001"+
		"\u011d\u0001\u011d\u0001\u011d\u0003\u011d\u1842\b\u011d\u0001\u011e\u0001"+
		"\u011e\u0001\u011f\u0001\u011f\u0003\u011f\u1848\b\u011f\u0001\u0120\u0003"+
		"\u0120\u184b\b\u0120\u0001\u0120\u0001\u0120\u0003\u0120\u184f\b\u0120"+
		"\u0001\u0120\u0004\u0120\u1852\b\u0120\u000b\u0120\f\u0120\u1853\u0001"+
		"\u0120\u0003\u0120\u1857\b\u0120\u0001\u0120\u0001\u0120\u0003\u0120\u185b"+
		"\b\u0120\u0001\u0120\u0001\u0120\u0003\u0120\u185f\b\u0120\u0003\u0120"+
		"\u1861\b\u0120\u0001\u0121\u0001\u0121\u0001\u0122\u0003\u0122\u1866\b"+
		"\u0122\u0001\u0122\u0001\u0122\u0001\u0123\u0003\u0123\u186b\b\u0123\u0001"+
		"\u0123\u0001\u0123\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001"+
		"\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0003\u0124\u1878"+
		"\b\u0124\u0001\u0124\u0003\u0124\u187b\b\u0124\u0001\u0125\u0001\u0125"+
		"\u0003\u0125\u187f\b\u0125\u0001\u0125\u0003\u0125\u1882\b\u0125\u0001"+
		"\u0125\u0003\u0125\u1885\b\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003"+
		"\u0125\u188a\b\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u188f"+
		"\b\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u1894\b\u0125"+
		"\u0001\u0125\u0003\u0125\u1897\b\u0125\u0001\u0125\u0001\u0125\u0001\u0125"+
		"\u0003\u0125\u189c\b\u0125\u0001\u0125\u0003\u0125\u189f\b\u0125\u0001"+
		"\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u18a5\b\u0125\u0001"+
		"\u0125\u0003\u0125\u18a8\b\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u18ac"+
		"\b\u0125\u0001\u0125\u0005\u0125\u18af\b\u0125\n\u0125\f\u0125\u18b2\t"+
		"\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u18b6\b\u0125\u0001\u0125\u0005"+
		"\u0125\u18b9\b\u0125\n\u0125\f\u0125\u18bc\t\u0125\u0001\u0125\u0001\u0125"+
		"\u0003\u0125\u18c0\b\u0125\u0001\u0125\u0003\u0125\u18c3\b\u0125\u0001"+
		"\u0125\u0005\u0125\u18c6\b\u0125\n\u0125\f\u0125\u18c9\t\u0125\u0001\u0125"+
		"\u0001\u0125\u0003\u0125\u18cd\b\u0125\u0001\u0125\u0005\u0125\u18d0\b"+
		"\u0125\n\u0125\f\u0125\u18d3\t\u0125\u0001\u0125\u0001\u0125\u0001\u0125"+
		"\u0003\u0125\u18d8\b\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003\u0125"+
		"\u18dd\b\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u18e2\b"+
		"\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u18e7\b\u0125\u0001"+
		"\u0125\u0003\u0125\u18ea\b\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003"+
		"\u0125\u18ef\b\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u18f3\b\u0125"+
		"\u0001\u0125\u0001\u0125\u0003\u0125\u18f7\b\u0125\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0005\u0126\u18fd\b\u0126\n\u0126\f\u0126\u1900"+
		"\t\u0126\u0001\u0126\u0001\u0126\u0001\u0127\u0001\u0127\u0003\u0127\u1906"+
		"\b\u0127\u0001\u0127\u0001\u0127\u0003\u0127\u190a\b\u0127\u0001\u0127"+
		"\u0001\u0127\u0001\u0127\u0003\u0127\u190f\b\u0127\u0001\u0127\u0001\u0127"+
		"\u0001\u0127\u0003\u0127\u1914\b\u0127\u0001\u0127\u0001\u0127\u0003\u0127"+
		"\u1918\b\u0127\u0003\u0127\u191a\b\u0127\u0001\u0127\u0003\u0127\u191d"+
		"\b\u0127\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u012a\u0001"+
		"\u012a\u0001\u012a\u0001\u012a\u0003\u012a\u192d\b\u012a\u0001\u012a\u0001"+
		"\u012a\u0001\u012b\u0001\u012b\u0001\u012b\u0005\u012b\u1934\b\u012b\n"+
		"\u012b\f\u012b\u1937\t\u012b\u0001\u012c\u0001\u012c\u0001\u012c\u0005"+
		"\u012c\u193c\b\u012c\n\u012c\f\u012c\u193f\t\u012c\u0001\u012d\u0001\u012d"+
		"\u0001\u012d\u0005\u012d\u1944\b\u012d\n\u012d\f\u012d\u1947\t\u012d\u0001"+
		"\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0005\u012e\u194d\b\u012e\n"+
		"\u012e\f\u012e\u1950\t\u012e\u0001\u012e\u0001\u012e\u0001\u012f\u0001"+
		"\u012f\u0001\u012f\u0005\u012f\u1957\b\u012f\n\u012f\f\u012f\u195a\t\u012f"+
		"\u0001\u0130\u0001\u0130\u0001\u0130\u0005\u0130\u195f\b\u0130\n\u0130"+
		"\f\u0130\u1962\t\u0130\u0001\u0131\u0001\u0131\u0001\u0131\u0005\u0131"+
		"\u1967\b\u0131\n\u0131\f\u0131\u196a\t\u0131\u0001\u0132\u0001\u0132\u0001"+
		"\u0132\u0005\u0132\u196f\b\u0132\n\u0132\f\u0132\u1972\t\u0132\u0001\u0133"+
		"\u0001\u0133\u0001\u0133\u0005\u0133\u1977\b\u0133\n\u0133\f\u0133\u197a"+
		"\t\u0133\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0001"+
		"\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0003\u0134\u1985\b\u0134\u0001"+
		"\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0003\u0134\u198c"+
		"\b\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0134\u0001"+
		"\u0134\u0001\u0134\u0001\u0134\u0003\u0134\u1996\b\u0134\u0001\u0135\u0001"+
		"\u0135\u0001\u0135\u0003\u0135\u199b\b\u0135\u0001\u0135\u0003\u0135\u199e"+
		"\b\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0003\u0135\u19a3\b\u0135"+
		"\u0001\u0135\u0003\u0135\u19a6\b\u0135\u0001\u0136\u0001\u0136\u0003\u0136"+
		"\u19aa\b\u0136\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0138\u0001\u0138"+
		"\u0001\u0138\u0001\u0138\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u013a"+
		"\u0001\u013a\u0001\u013a\u0003\u013a\u19b9\b\u013a\u0001\u013b\u0001\u013b"+
		"\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0003\u013b\u19c1\b\u013b"+
		"\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0003\u013b"+
		"\u19c8\b\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0003\u013b\u19cd\b"+
		"\u013b\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u19d2\b\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0004\u013c\u19f1"+
		"\b\u013c\u000b\u013c\f\u013c\u19f2\u0001\u013c\u0001\u013c\u0003\u013c"+
		"\u19f7\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0004\u013c"+
		"\u19fd\b\u013c\u000b\u013c\f\u013c\u19fe\u0001\u013c\u0001\u013c\u0003"+
		"\u013c\u1a03\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1a0c\b\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1a14"+
		"\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1a19\b\u013c"+
		"\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c"+
		"\u0003\u013c\u1a21\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c"+
		"\u1a26\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1a2b\b"+
		"\u013c\u0003\u013c\u1a2d\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1a36\b\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1a3b\b\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1a43"+
		"\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1a48\b\u013c"+
		"\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c"+
		"\u0003\u013c\u1a50\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c"+
		"\u0001\u013c\u0001\u013c\u0003\u013c\u1a58\b\u013c\u0001\u013c\u0003\u013c"+
		"\u1a5b\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c"+
		"\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1a65\b\u013c\u0001\u013c"+
		"\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c"+
		"\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c"+
		"\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1a77\b\u013c\u0001\u013c"+
		"\u0003\u013c\u1a7a\b\u013c\u0001\u013c\u0003\u013c\u1a7d\b\u013c\u0001"+
		"\u013c\u0001\u013c\u0003\u013c\u1a81\b\u013c\u0001\u013d\u0001\u013d\u0001"+
		"\u013d\u0001\u013d\u0001\u013d\u0001\u013e\u0001\u013e\u0001\u013e\u0001"+
		"\u013e\u0005\u013e\u1a8c\b\u013e\n\u013e\f\u013e\u1a8f\t\u013e\u0001\u013e"+
		"\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0003\u013e\u1a96\b\u013e"+
		"\u0001\u013f\u0001\u013f\u0003\u013f\u1a9a\b\u013f\u0001\u0140\u0001\u0140"+
		"\u0001\u0140\u0003\u0140\u1a9f\b\u0140\u0001\u0140\u0001\u0140\u0001\u0140"+
		"\u0003\u0140\u1aa4\b\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140"+
		"\u0003\u0140\u1aaa\b\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0003\u0140"+
		"\u1aaf\b\u0140\u0001\u0140\u0001\u0140\u0003\u0140\u1ab3\b\u0140\u0001"+
		"\u0140\u0001\u0140\u0001\u0140\u0003\u0140\u1ab8\b\u0140\u0001\u0140\u0001"+
		"\u0140\u0001\u0140\u0003\u0140\u1abd\b\u0140\u0001\u0140\u0001\u0140\u0001"+
		"\u0140\u0003\u0140\u1ac2\b\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001"+
		"\u0140\u0001\u0140\u0001\u0140\u0005\u0140\u1aca\b\u0140\n\u0140\f\u0140"+
		"\u1acd\t\u0140\u0003\u0140\u1acf\b\u0140\u0001\u0140\u0001\u0140\u0003"+
		"\u0140\u1ad3\b\u0140\u0001\u0140\u0001\u0140\u0003\u0140\u1ad7\b\u0140"+
		"\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0003\u0141"+
		"\u1ade\b\u0141\u0001\u0141\u0001\u0141\u0003\u0141\u1ae2\b\u0141\u0001"+
		"\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001"+
		"\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001"+
		"\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001"+
		"\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001"+
		"\u0141\u0001\u0141\u0001\u0141\u0003\u0141\u1aff\b\u0141\u0001\u0142\u0001"+
		"\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0003\u0142\u1b07"+
		"\b\u0142\u0001\u0143\u0003\u0143\u1b0a\b\u0143\u0001\u0143\u0003\u0143"+
		"\u1b0d\b\u0143\u0001\u0143\u0003\u0143\u1b10\b\u0143\u0001\u0143\u0003"+
		"\u0143\u1b13\b\u0143\u0001\u0144\u0001\u0144\u0001\u0145\u0001\u0145\u0001"+
		"\u0145\u0001\u0146\u0001\u0146\u0001\u0147\u0001\u0147\u0003\u0147\u1b1e"+
		"\b\u0147\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001"+
		"\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001"+
		"\u0149\u0003\u0149\u1b2c\b\u0149\u0001\u014a\u0001\u014a\u0001\u014a\u0001"+
		"\u014a\u0001\u014a\u0005\u014a\u1b33\b\u014a\n\u014a\f\u014a\u1b36\t\u014a"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0003\u014b"+
		"\u1b4f\b\u014b\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c"+
		"\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0003\u014d\u1b5a\b\u014d"+
		"\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0003\u014d"+
		"\u1b61\b\u014d\u0005\u014d\u1b63\b\u014d\n\u014d\f\u014d\u1b66\t\u014d"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003\u014e\u1b6c\b\u014e"+
		"\u0001\u014f\u0001\u014f\u0001\u014f\u0001\u014f\u0001\u014f\u0001\u014f"+
		"\u0003\u014f\u1b74\b\u014f\u0001\u014f\u0001\u014f\u0001\u014f\u0003\u014f"+
		"\u1b79\b\u014f\u0001\u014f\u0001\u014f\u0001\u014f\u0001\u014f\u0005\u014f"+
		"\u1b7f\b\u014f\n\u014f\f\u014f\u1b82\t\u014f\u0001\u0150\u0001\u0150\u0001"+
		"\u0150\u0003\u0150\u1b87\b\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001"+
		"\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0003\u0150\u1b91"+
		"\b\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001"+
		"\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0003"+
		"\u0150\u1b9e\b\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0003"+
		"\u0150\u1ba4\b\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0003"+
		"\u0150\u1baa\b\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001"+
		"\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001"+
		"\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0003\u0150\u1bba\b\u0150\u0001"+
		"\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0003\u0150\u1bc0\b\u0150\u0001"+
		"\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001"+
		"\u0150\u0005\u0150\u1bc9\b\u0150\n\u0150\f\u0150\u1bcc\t\u0150\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0005\u0151\u1bdc\b\u0151\n\u0151\f\u0151\u1bdf\t\u0151\u0001"+
		"\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001"+
		"\u0151\u0004\u0151\u1be8\b\u0151\u000b\u0151\f\u0151\u1be9\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0003\u0151\u1bfb\b\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"+
		"\u0001\u0151\u0005\u0151\u1c0c\b\u0151\n\u0151\f\u0151\u1c0f\t\u0151\u0001"+
		"\u0152\u0001\u0152\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001"+
		"\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001"+
		"\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0003\u0153\u1c21\b\u0153\u0001"+
		"\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001"+
		"\u0154\u0003\u0154\u1c2a\b\u0154\u0001\u0155\u0001\u0155\u0001\u0155\u0001"+
		"\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0003\u0155\u1c33\b\u0155\u0001"+
		"\u0156\u0001\u0156\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0003\u0157\u1c3c\b\u0157\u0001\u0158\u0001\u0158\u0001\u0159\u0001"+
		"\u0159\u0001\u015a\u0001\u015a\u0001\u015b\u0001\u015b\u0001\u015c\u0001"+
		"\u015c\u0001\u015d\u0001\u015d\u0001\u015e\u0001\u015e\u0001\u015e\u0000"+
		"\u0003\u029e\u02a0\u02a2\u015f\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010"+
		"\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPR"+
		"TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e"+
		"\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6"+
		"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be"+
		"\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6"+
		"\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee"+
		"\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106"+
		"\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e"+
		"\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136"+
		"\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e"+
		"\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166"+
		"\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e"+
		"\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196"+
		"\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae"+
		"\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6"+
		"\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de"+
		"\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6"+
		"\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e"+
		"\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226"+
		"\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e"+
		"\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256"+
		"\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e"+
		"\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286"+
		"\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e"+
		"\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6"+
		"\u02b8\u02ba\u02bc\u0000\u008c\u0002\u0000\'\'\u0095\u0095\u0002\u0000"+
		"\u0211\u0211\u0217\u0217\u0003\u0000DD\u009d\u009d\u00b3\u00b3\u0003\u0000"+
		"**\u017e\u017e\u01c4\u01c4\u0004\u0000**\u01a1\u01a1\u020f\u020f\u0261"+
		"\u0261\u0002\u0000\u0200\u0200\u0475\u0475\u0002\u0000MM\u008c\u008c\u0002"+
		"\u0000\u000f\u000f\u014c\u014c\u0003\u0000,,TT\u00b6\u00b6\u0002\u0000"+
		"\u01b0\u01b0\u022c\u022c\u0003\u0000\u01f8\u01f8\u0288\u0288\u0290\u0290"+
		"\u0002\u0000\u0186\u0186\u01ca\u01ca\u0002\u0000\u015e\u015e\u01d8\u01d8"+
		"\u0002\u0000**\u046b\u046c\u0002\u0000\u015c\u015c\u01b9\u01b9\u0002\u0000"+
		"\u01c9\u01c9\u029f\u029f\u0003\u0000OOSS||\u0003\u0000**\u0190\u0190\u01ad"+
		"\u01ad\u0003\u0000**\u018c\u018c\u0313\u0313\u0002\u0000\u027b\u027b\u029e"+
		"\u029e\u0002\u0000PPZZ\u0003\u0000\u01b2\u01b2\u0222\u0222\u0263\u0263"+
		"\u0002\u0000DD\u009d\u009d\u0001\u0000\u0162\u0163\u0001\u0000\u046b\u046c"+
		"\u0002\u0000\u0475\u0475\u047d\u047d\u0002\u0000PP\u0182\u0182\u0002\u0000"+
		"\u021f\u021f\u0475\u0475\u0002\u0000\u0220\u0220\u0475\u0475\u0003\u0000"+
		"\u01ac\u01ac\u01d3\u01d3\u0207\u0207\u0007\u0000**\u0170\u0170\u0172\u0172"+
		"\u0190\u0190\u01ad\u01ad\u023b\u023b\u047d\u047d\u0002\u0000\u0200\u0200"+
		"\u0210\u0210\u0001\u0000\u046c\u046d\u0002\u0000\u0005\u000533\u0004\u0000"+
		"**\u017e\u017e\u01c4\u01c4\u01c8\u01c8\u0002\u0000\u001a\u001a\u001e\u001e"+
		"\u0002\u0000\f\f\u00ad\u00ad\u0002\u0000\u00be\u00be\u02a3\u02a3\u0002"+
		"\u0000\u0015\u0015\u008f\u008f\u0003\u0000++JJii\u0002\u0000ii\u0174\u0174"+
		"\u0002\u0000\u016b\u016b\u01a9\u01a9\u0002\u0000dd\u0257\u0257\u0002\u0000"+
		"++ii\u0002\u0000\u0006\u000611\u0002\u0000\u00ba\u00ba\u029b\u029b\u0004"+
		"\u0000\u01ac\u01ac\u01d3\u01d3\u0206\u0206\u0230\u0230\u0002\u0000\u01ac"+
		"\u01ac\u0206\u0206\u0002\u0000\r\r--\u0003\u0000AAMM\u00b8\u00b8\u0002"+
		"\u0000\"\"RR\u0002\u0000``\u0093\u0093\u0002\u0000\u0006\u000612\u0001"+
		"\u0000\u0270\u0271\u0002\u0000\u00aa\u00aa\u02e1\u02e1\u0002\u0000\u01b5"+
		"\u01b5\u025f\u025f\u0002\u0000\u00e0\u00e0\u01db\u01db\u0005\u0000jj\u01e0"+
		"\u01e1\u01e3\u01e3\u01e7\u01ef\u023d\u023d\u0004\u0000\u01dd\u01de\u01e2"+
		"\u01e2\u01e4\u01e5\u023e\u023e\u0003\u0000kk\u01dc\u01dc\u01e6\u01e6\u0002"+
		"\u0000\u01cc\u01cc\u0272\u0272\u0002\u0000\u026c\u026c\u026e\u026e\u0002"+
		"\u0000\u0156\u0156\u0273\u0273\u0002\u0000YY\u024d\u024d\u0002\u00003"+
		"3\u0184\u0184\u0003\u0000\u001f\u001f<<\u00b1\u00b1\u0003\u0000\u0082"+
		"\u0082\u00aa\u00aa\u01b3\u01b3\u0003\u0000\f\f\u0013\u0013\u00b9\u00b9"+
		"\u0002\u0000**xx\u0002\u0000ff\u00b4\u00b4\u0002\u0000\u0166\u0166\u0264"+
		"\u0264\u0002\u0000((\u029d\u029d\u0002\u0000rr\u01d8\u01d8\u0002\u0000"+
		"\u01a4\u01a4\u0236\u0236\u0004\u0000\u00cc\u00cc\u00ce\u00ce\u00d4\u00d4"+
		"\u027c\u027c\u0002\u0000\u044d\u044d\u045d\u045d\u0002\u0000\u0157\u0157"+
		"\u023f\u023f\u0002\u0000CCOO\u0006\u0000\u0082\u0082\u00aa\u00aa\u00af"+
		"\u00af\u019d\u019d\u01b3\u01b3\u029d\u029d\u0002\u0000\u01ff\u01ff\u0278"+
		"\u0278\u0002\u0000\u019a\u019a\u02a1\u02a1\u0002\u0000\u0082\u0082\u01b3"+
		"\u01b3\u0003\u0000PP[[\u01c2\u01c2\u0003\u0000\u01b5\u01b5\u01d8\u01d8"+
		"\u025f\u025f\u0002\u0000\u0278\u0278\u029c\u029c\u0002\u0000\u0176\u0176"+
		"\u0235\u0235\u0006\u0000\u00e0\u00e0\u0197\u0197\u0199\u0199\u01b4\u01b4"+
		"\u023c\u023c\u0265\u0265\u0002\u0000-.==\u0003\u0000\u01a4\u01a4\u0224"+
		"\u0224\u0370\u0370\u0002\u0000\u01d0\u01d0\u028a\u028a\n\u0000\u0165\u0165"+
		"\u016d\u016d\u0178\u017a\u0181\u0181\u01f9\u01f9\u0201\u0201\u027d\u027d"+
		"\u0284\u0284\u033f\u033f\u03e7\u03e7\u0002\u0000##\u00a6\u00a6\u0002\u0000"+
		"tt\u03de\u03de\u000b\u0000\u0165\u0165\u016d\u016d\u0178\u017a\u0181\u0181"+
		"\u01f9\u01f9\u0201\u0201\u024e\u024e\u027d\u027d\u0284\u0284\u033f\u033f"+
		"\u03e7\u03e7\u0001\u0000\u0481\u0482\u0004\u0000\u0175\u0175\u030e\u0319"+
		"\u0475\u0475\u047d\u047e\u0003\u0000\u046b\u046d\u0476\u0476\u0478\u0478"+
		"\u0002\u0000>>\u00b0\u00b0\u0002\u0000ss\u0479\u0479\u0005\u0000\u0019"+
		"\u0019\u00dc\u00de\u00e5\u00e5\u00e7\u00ea\u0204\u0204\u0002\u0000\u0019"+
		"\u0019\u00dd\u00dd\u0002\u0000\u0019\u0019\u00dc\u00dc\u0001\u0000\u00c2"+
		"\u00cd\u0003\u0000\u00b5\u00b5\u00c1\u00c1\u0262\u0262\u0002\u0000\u00d1"+
		"\u00d6\u01ad\u01ad\u0006\u0000\u00d7\u00d7\u00e2\u00e2\u00e4\u00e4\u00e6"+
		"\u00e6\u00ed\u00ed\u015a\u015b\u0004\u0000\u00d8\u00db\u00e0\u00e1\u00e3"+
		"\u00e3\u0158\u0158\u0002\u0000\u0098\u0098\u00eb\u00eb\u0002\u0000\u01d0"+
		"\u01d0\u031e\u0326\u0002\u0000\u00e0\u00e0\u0204\u0204\u0005\u0000\u00c6"+
		"\u00c6\u00cc\u00cc\u00d7\u00d8\u00da\u00da\u01d0\u01d0\u0002\u0000\u00b5"+
		"\u00b5\u0262\u0262\u0002\u0000\u0139\u013a\u0140\u0140\u0004\u0000%%\u0095"+
		"\u0095\u0137\u013a\u0149\u0149\u0001\u0000\u0143\u0144\u0003\u0000\u0011"+
		"\u0011^^\u00ae\u00ae\u0002\u0000\u00dc\u00dc\u00e0\u00e0\u0002\u0000\u00d7"+
		"\u00d8\u00da\u00da\u0003\u0000\r\r--\u03dc\u03dc\u0003\u0000\u011c\u011c"+
		"\u0128\u0129\u0133\u0133\u0003\u0000\u011d\u011f\u012f\u0132\u0134\u0136"+
		"\u0002\u0000\u0125\u0125\u0127\u0127\u0002\u0000\u0123\u0123\u0126\u0126"+
		"\u0002\u0000\u0121\u0122\u012c\u012e\u0002\u0000\u0084\u0084\u0257\u0257"+
		"\u0002\u0000\u01af\u01af\u022d\u022d\u0002\u0000\u0215\u0215\u0225\u0225"+
		"\u0002\u0000qq\u0460\u0460\u0003\u0000>>\u00b0\u00b0\u0294\u0294\u0002"+
		"\u0000\u0088\u0088\u0094\u0094\u0003\u0000\u0006\u0006\u014f\u014f\u0268"+
		"\u0268\u0003\u0000qq\u0459\u045a\u0460\u0461\u0001\u0000\u0456\u045c\u0002"+
		"\u0000\u00e0\u00e0\u02e5\u030d\u0001\u0000\u031a\u031d\u0005\u0000\u02c0"+
		"\u02c1\u02d0\u02d2\u02d8\u02d8\u02de\u02df\u02e1\u02e1\u0001\u0000\u02af"+
		"\u02b6\u0003\u0000\u00d7\u00db\u00e8\u00e8\u00eb\u00eb7\u0000\u000e\u000e"+
		"\u0012\u0012\u001d\u001d##%%**0077::HHNN]]ttxx{{\u0081\u0081\u00a6\u00a6"+
		"\u00ed\u00ed\u0119\u0120\u0124\u0124\u0128\u0129\u012f\u0136\u014a\u017f"+
		"\u0181\u0191\u0193\u0193\u0195\u01ae\u01b0\u01c0\u01c2\u01c8\u01ca\u0207"+
		"\u0209\u0209\u020d\u021e\u0221\u022c\u022e\u024b\u024d\u024e\u0250\u025c"+
		"\u025e\u027a\u027c\u029e\u02a0\u02a1\u02a3\u02a8\u02aa\u02ae\u02b7\u02b7"+
		"\u02b9\u02bf\u02c2\u02c3\u02c8\u02c9\u02cb\u02cf\u02d3\u02d7\u02d9\u02d9"+
		"\u02db\u02dd\u02e0\u02e0\u02e2\u02e4\u0313\u0313\u033f\u033f\u0366\u0366"+
		"\u03e2\u03e2\u03e7\u03e7\u0016\u0000\'\'``\u0093\u0093\u0095\u0095\u00d7"+
		"\u00d9\u00db\u00db\u00f9\u0118\u0120\u0123\u0125\u0127\u012a\u012e\u0142"+
		"\u0142\u01c9\u01c9\u029f\u029f\u02af\u02b6\u02db\u02db\u031e\u031e\u0321"+
		"\u033e\u0340\u0365\u0367\u03e1\u03e3\u03e6\u03e8\u044c\u045c\u045c\u2147"+
		"\u0000\u02bf\u0001\u0000\u0000\u0000\u0002\u02d2\u0001\u0000\u0000\u0000"+
		"\u0004\u02e7\u0001\u0000\u0000\u0000\u0006\u02e9\u0001\u0000\u0000\u0000"+
		"\b\u0311\u0001\u0000\u0000\u0000\n\u031e\u0001\u0000\u0000\u0000\f\u0329"+
		"\u0001\u0000\u0000\u0000\u000e\u033a\u0001\u0000\u0000\u0000\u0010\u033f"+
		"\u0001\u0000\u0000\u0000\u0012\u034b\u0001\u0000\u0000\u0000\u0014\u0366"+
		"\u0001\u0000\u0000\u0000\u0016\u036f\u0001\u0000\u0000\u0000\u0018\u0371"+
		"\u0001\u0000\u0000\u0000\u001a\u037d\u0001\u0000\u0000\u0000\u001c\u039b"+
		"\u0001\u0000\u0000\u0000\u001e\u03bf\u0001\u0000\u0000\u0000 \u03f2\u0001"+
		"\u0000\u0000\u0000\"\u040c\u0001\u0000\u0000\u0000$\u0430\u0001\u0000"+
		"\u0000\u0000&\u043d\u0001\u0000\u0000\u0000(\u049e\u0001\u0000\u0000\u0000"+
		"*\u04a0\u0001\u0000\u0000\u0000,\u04b2\u0001\u0000\u0000\u0000.\u04ef"+
		"\u0001\u0000\u0000\u00000\u0502\u0001\u0000\u0000\u00002\u0508\u0001\u0000"+
		"\u0000\u00004\u051e\u0001\u0000\u0000\u00006\u0520\u0001\u0000\u0000\u0000"+
		"8\u0522\u0001\u0000\u0000\u0000:\u0572\u0001\u0000\u0000\u0000<\u0579"+
		"\u0001\u0000\u0000\u0000>\u057b\u0001\u0000\u0000\u0000@\u05a7\u0001\u0000"+
		"\u0000\u0000B\u05ad\u0001\u0000\u0000\u0000D\u05af\u0001\u0000\u0000\u0000"+
		"F\u05c4\u0001\u0000\u0000\u0000H\u05cb\u0001\u0000\u0000\u0000J\u05cd"+
		"\u0001\u0000\u0000\u0000L\u05e6\u0001\u0000\u0000\u0000N\u05e9\u0001\u0000"+
		"\u0000\u0000P\u05ee\u0001\u0000\u0000\u0000R\u0608\u0001\u0000\u0000\u0000"+
		"T\u0618\u0001\u0000\u0000\u0000V\u061a\u0001\u0000\u0000\u0000X\u062a"+
		"\u0001\u0000\u0000\u0000Z\u062c\u0001\u0000\u0000\u0000\\\u0668\u0001"+
		"\u0000\u0000\u0000^\u06af\u0001\u0000\u0000\u0000`\u06b1\u0001\u0000\u0000"+
		"\u0000b\u06cd\u0001\u0000\u0000\u0000d\u06d5\u0001\u0000\u0000\u0000f"+
		"\u06f3\u0001\u0000\u0000\u0000h\u07ae\u0001\u0000\u0000\u0000j\u07b0\u0001"+
		"\u0000\u0000\u0000l\u07b2\u0001\u0000\u0000\u0000n\u07b5\u0001\u0000\u0000"+
		"\u0000p\u07ff\u0001\u0000\u0000\u0000r\u0816\u0001\u0000\u0000\u0000t"+
		"\u08aa\u0001\u0000\u0000\u0000v\u08af\u0001\u0000\u0000\u0000x\u08b1\u0001"+
		"\u0000\u0000\u0000z\u08bb\u0001\u0000\u0000\u0000|\u08f3\u0001\u0000\u0000"+
		"\u0000~\u0907\u0001\u0000\u0000\u0000\u0080\u0909\u0001\u0000\u0000\u0000"+
		"\u0082\u092c\u0001\u0000\u0000\u0000\u0084\u0935\u0001\u0000\u0000\u0000"+
		"\u0086\u093c\u0001\u0000\u0000\u0000\u0088\u0953\u0001\u0000\u0000\u0000"+
		"\u008a\u095c\u0001\u0000\u0000\u0000\u008c\u096b\u0001\u0000\u0000\u0000"+
		"\u008e\u0984\u0001\u0000\u0000\u0000\u0090\u0998\u0001\u0000\u0000\u0000"+
		"\u0092\u0b35\u0001\u0000\u0000\u0000\u0094\u0b37\u0001\u0000\u0000\u0000"+
		"\u0096\u0b3e\u0001\u0000\u0000\u0000\u0098\u0b45\u0001\u0000\u0000\u0000"+
		"\u009a\u0b5c\u0001\u0000\u0000\u0000\u009c\u0b64\u0001\u0000\u0000\u0000"+
		"\u009e\u0b6b\u0001\u0000\u0000\u0000\u00a0\u0b72\u0001\u0000\u0000\u0000"+
		"\u00a2\u0b79\u0001\u0000\u0000\u0000\u00a4\u0b85\u0001\u0000\u0000\u0000"+
		"\u00a6\u0b8f\u0001\u0000\u0000\u0000\u00a8\u0b96\u0001\u0000\u0000\u0000"+
		"\u00aa\u0ba6\u0001\u0000\u0000\u0000\u00ac\u0bd4\u0001\u0000\u0000\u0000"+
		"\u00ae\u0bd6\u0001\u0000\u0000\u0000\u00b0\u0be0\u0001\u0000\u0000\u0000"+
		"\u00b2\u0be4\u0001\u0000\u0000\u0000\u00b4\u0bea\u0001\u0000\u0000\u0000"+
		"\u00b6\u0bf6\u0001\u0000\u0000\u0000\u00b8\u0bf8\u0001\u0000\u0000\u0000"+
		"\u00ba\u0bff\u0001\u0000\u0000\u0000\u00bc\u0c01\u0001\u0000\u0000\u0000"+
		"\u00be\u0c34\u0001\u0000\u0000\u0000\u00c0\u0c7e\u0001\u0000\u0000\u0000"+
		"\u00c2\u0cb9\u0001\u0000\u0000\u0000\u00c4\u0d18\u0001\u0000\u0000\u0000"+
		"\u00c6\u0d1c\u0001\u0000\u0000\u0000\u00c8\u0d1e\u0001\u0000\u0000\u0000"+
		"\u00ca\u0d41\u0001\u0000\u0000\u0000\u00cc\u0d43\u0001\u0000\u0000\u0000"+
		"\u00ce\u0d4b\u0001\u0000\u0000\u0000\u00d0\u0d53\u0001\u0000\u0000\u0000"+
		"\u00d2\u0d55\u0001\u0000\u0000\u0000\u00d4\u0d73\u0001\u0000\u0000\u0000"+
		"\u00d6\u0daa\u0001\u0000\u0000\u0000\u00d8\u0db3\u0001\u0000\u0000\u0000"+
		"\u00da\u0dc7\u0001\u0000\u0000\u0000\u00dc\u0dd3\u0001\u0000\u0000\u0000"+
		"\u00de\u0dd7\u0001\u0000\u0000\u0000\u00e0\u0df8\u0001\u0000\u0000\u0000"+
		"\u00e2\u0e0d\u0001\u0000\u0000\u0000\u00e4\u0e17\u0001\u0000\u0000\u0000"+
		"\u00e6\u0e1b\u0001\u0000\u0000\u0000\u00e8\u0e35\u0001\u0000\u0000\u0000"+
		"\u00ea\u0e5f\u0001\u0000\u0000\u0000\u00ec\u0e61\u0001\u0000\u0000\u0000"+
		"\u00ee\u0e70\u0001\u0000\u0000\u0000\u00f0\u0ea4\u0001\u0000\u0000\u0000"+
		"\u00f2\u0eae\u0001\u0000\u0000\u0000\u00f4\u0eb8\u0001\u0000\u0000\u0000"+
		"\u00f6\u0ef0\u0001\u0000\u0000\u0000\u00f8\u0ef2\u0001\u0000\u0000\u0000"+
		"\u00fa\u0f0a\u0001\u0000\u0000\u0000\u00fc\u0f10\u0001\u0000\u0000\u0000"+
		"\u00fe\u0f18\u0001\u0000\u0000\u0000\u0100\u0f29\u0001\u0000\u0000\u0000"+
		"\u0102\u0f39\u0001\u0000\u0000\u0000\u0104\u0f5e\u0001\u0000\u0000\u0000"+
		"\u0106\u0f64\u0001\u0000\u0000\u0000\u0108\u0f6d\u0001\u0000\u0000\u0000"+
		"\u010a\u0f7a\u0001\u0000\u0000\u0000\u010c\u0f7e\u0001\u0000\u0000\u0000"+
		"\u010e\u0fa4\u0001\u0000\u0000\u0000\u0110\u0fca\u0001\u0000\u0000\u0000"+
		"\u0112\u0fd8\u0001\u0000\u0000\u0000\u0114\u0fe0\u0001\u0000\u0000\u0000"+
		"\u0116\u0fe4\u0001\u0000\u0000\u0000\u0118\u0fea\u0001\u0000\u0000\u0000"+
		"\u011a\u0ff8\u0001\u0000\u0000\u0000\u011c\u0ffb\u0001\u0000\u0000\u0000"+
		"\u011e\u100d\u0001\u0000\u0000\u0000\u0120\u1011\u0001\u0000\u0000\u0000"+
		"\u0122\u1021\u0001\u0000\u0000\u0000\u0124\u1023\u0001\u0000\u0000\u0000"+
		"\u0126\u102f\u0001\u0000\u0000\u0000\u0128\u1033\u0001\u0000\u0000\u0000"+
		"\u012a\u1044\u0001\u0000\u0000\u0000\u012c\u1055\u0001\u0000\u0000\u0000"+
		"\u012e\u1058\u0001\u0000\u0000\u0000\u0130\u1062\u0001\u0000\u0000\u0000"+
		"\u0132\u1066\u0001\u0000\u0000\u0000\u0134\u1073\u0001\u0000\u0000\u0000"+
		"\u0136\u1076\u0001\u0000\u0000\u0000\u0138\u107b\u0001\u0000\u0000\u0000"+
		"\u013a\u108f\u0001\u0000\u0000\u0000\u013c\u1091\u0001\u0000\u0000\u0000"+
		"\u013e\u10a2\u0001\u0000\u0000\u0000\u0140\u10ab\u0001\u0000\u0000\u0000"+
		"\u0142\u10b4\u0001\u0000\u0000\u0000\u0144\u10b6\u0001\u0000\u0000\u0000"+
		"\u0146\u10c4\u0001\u0000\u0000\u0000\u0148\u10cf\u0001\u0000\u0000\u0000"+
		"\u014a\u10d8\u0001\u0000\u0000\u0000\u014c\u10db\u0001\u0000\u0000\u0000"+
		"\u014e\u10e3\u0001\u0000\u0000\u0000\u0150\u10fc\u0001\u0000\u0000\u0000"+
		"\u0152\u1108\u0001\u0000\u0000\u0000\u0154\u110b\u0001\u0000\u0000\u0000"+
		"\u0156\u112b\u0001\u0000\u0000\u0000\u0158\u112d\u0001\u0000\u0000\u0000"+
		"\u015a\u112f\u0001\u0000\u0000\u0000\u015c\u1131\u0001\u0000\u0000\u0000"+
		"\u015e\u1133\u0001\u0000\u0000\u0000\u0160\u1168\u0001\u0000\u0000\u0000"+
		"\u0162\u116a\u0001\u0000\u0000\u0000\u0164\u1170\u0001\u0000\u0000\u0000"+
		"\u0166\u1184\u0001\u0000\u0000\u0000\u0168\u1192\u0001\u0000\u0000\u0000"+
		"\u016a\u119d\u0001\u0000\u0000\u0000\u016c\u119f\u0001\u0000\u0000\u0000"+
		"\u016e\u11a5\u0001\u0000\u0000\u0000\u0170\u11af\u0001\u0000\u0000\u0000"+
		"\u0172\u11b3\u0001\u0000\u0000\u0000\u0174\u11ba\u0001\u0000\u0000\u0000"+
		"\u0176\u11be\u0001\u0000\u0000\u0000\u0178\u11c4\u0001\u0000\u0000\u0000"+
		"\u017a\u11cb\u0001\u0000\u0000\u0000\u017c\u11d1\u0001\u0000\u0000\u0000"+
		"\u017e\u11d7\u0001\u0000\u0000\u0000\u0180\u11dc\u0001\u0000\u0000\u0000"+
		"\u0182\u1209\u0001\u0000\u0000\u0000\u0184\u121e\u0001\u0000\u0000\u0000"+
		"\u0186\u1237\u0001\u0000\u0000\u0000\u0188\u123a\u0001\u0000\u0000\u0000"+
		"\u018a\u1240\u0001\u0000\u0000\u0000\u018c\u1250\u0001\u0000\u0000\u0000"+
		"\u018e\u125f\u0001\u0000\u0000\u0000\u0190\u1265\u0001\u0000\u0000\u0000"+
		"\u0192\u1283\u0001\u0000\u0000\u0000\u0194\u1285\u0001\u0000\u0000\u0000"+
		"\u0196\u128c\u0001\u0000\u0000\u0000\u0198\u1298\u0001\u0000\u0000\u0000"+
		"\u019a\u129e\u0001\u0000\u0000\u0000\u019c\u12b7\u0001\u0000\u0000\u0000"+
		"\u019e\u12bb\u0001\u0000\u0000\u0000\u01a0\u12bf\u0001\u0000\u0000\u0000"+
		"\u01a2\u12ca\u0001\u0000\u0000\u0000\u01a4\u131b\u0001\u0000\u0000\u0000"+
		"\u01a6\u135e\u0001\u0000\u0000\u0000\u01a8\u1360\u0001\u0000\u0000\u0000"+
		"\u01aa\u13ca\u0001\u0000\u0000\u0000\u01ac\u13e2\u0001\u0000\u0000\u0000"+
		"\u01ae\u13e4\u0001\u0000\u0000\u0000\u01b0\u13f6\u0001\u0000\u0000\u0000"+
		"\u01b2\u1446\u0001\u0000\u0000\u0000\u01b4\u1448\u0001\u0000\u0000\u0000"+
		"\u01b6\u1455\u0001\u0000\u0000\u0000\u01b8\u1460\u0001\u0000\u0000\u0000"+
		"\u01ba\u1478\u0001\u0000\u0000\u0000\u01bc\u1483\u0001\u0000\u0000\u0000"+
		"\u01be\u148d\u0001\u0000\u0000\u0000\u01c0\u1497\u0001\u0000\u0000\u0000"+
		"\u01c2\u14bf\u0001\u0000\u0000\u0000\u01c4\u14c1\u0001\u0000\u0000\u0000"+
		"\u01c6\u14c4\u0001\u0000\u0000\u0000\u01c8\u1523\u0001\u0000\u0000\u0000"+
		"\u01ca\u1535\u0001\u0000\u0000\u0000\u01cc\u1537\u0001\u0000\u0000\u0000"+
		"\u01ce\u153b\u0001\u0000\u0000\u0000\u01d0\u1561\u0001\u0000\u0000\u0000"+
		"\u01d2\u156a\u0001\u0000\u0000\u0000\u01d4\u1570\u0001\u0000\u0000\u0000"+
		"\u01d6\u1577\u0001\u0000\u0000\u0000\u01d8\u158d\u0001\u0000\u0000\u0000"+
		"\u01da\u158f\u0001\u0000\u0000\u0000\u01dc\u159d\u0001\u0000\u0000\u0000"+
		"\u01de\u15a3\u0001\u0000\u0000\u0000\u01e0\u15db\u0001\u0000\u0000\u0000"+
		"\u01e2\u1676\u0001\u0000\u0000\u0000\u01e4\u1682\u0001\u0000\u0000\u0000"+
		"\u01e6\u1691\u0001\u0000\u0000\u0000\u01e8\u1697\u0001\u0000\u0000\u0000"+
		"\u01ea\u16aa\u0001\u0000\u0000\u0000\u01ec\u16b4\u0001\u0000\u0000\u0000"+
		"\u01ee\u16c2\u0001\u0000\u0000\u0000\u01f0\u16c4\u0001\u0000\u0000\u0000"+
		"\u01f2\u16c7\u0001\u0000\u0000\u0000\u01f4\u16dd\u0001\u0000\u0000\u0000"+
		"\u01f6\u16e9\u0001\u0000\u0000\u0000\u01f8\u16ef\u0001\u0000\u0000\u0000"+
		"\u01fa\u16fb\u0001\u0000\u0000\u0000\u01fc\u16ff\u0001\u0000\u0000\u0000"+
		"\u01fe\u1701\u0001\u0000\u0000\u0000\u0200\u172b\u0001\u0000\u0000\u0000"+
		"\u0202\u1732\u0001\u0000\u0000\u0000\u0204\u1734\u0001\u0000\u0000\u0000"+
		"\u0206\u174b\u0001\u0000\u0000\u0000\u0208\u1751\u0001\u0000\u0000\u0000"+
		"\u020a\u1759\u0001\u0000\u0000\u0000\u020c\u175c\u0001\u0000\u0000\u0000"+
		"\u020e\u175f\u0001\u0000\u0000\u0000\u0210\u1774\u0001\u0000\u0000\u0000"+
		"\u0212\u1789\u0001\u0000\u0000\u0000\u0214\u1791\u0001\u0000\u0000\u0000"+
		"\u0216\u17b7\u0001\u0000\u0000\u0000\u0218\u17c3\u0001\u0000\u0000\u0000"+
		"\u021a\u17c5\u0001\u0000\u0000\u0000\u021c\u17cb\u0001\u0000\u0000\u0000"+
		"\u021e\u17cf\u0001\u0000\u0000\u0000\u0220\u17df\u0001\u0000\u0000\u0000"+
		"\u0222\u17ec\u0001\u0000\u0000\u0000\u0224\u17f6\u0001\u0000\u0000\u0000"+
		"\u0226\u17f8\u0001\u0000\u0000\u0000\u0228\u17fe\u0001\u0000\u0000\u0000"+
		"\u022a\u1802\u0001\u0000\u0000\u0000\u022c\u1804\u0001\u0000\u0000\u0000"+
		"\u022e\u1806\u0001\u0000\u0000\u0000\u0230\u1818\u0001\u0000\u0000\u0000"+
		"\u0232\u1828\u0001\u0000\u0000\u0000\u0234\u182c\u0001\u0000\u0000\u0000"+
		"\u0236\u1831\u0001\u0000\u0000\u0000\u0238\u183c\u0001\u0000\u0000\u0000"+
		"\u023a\u1841\u0001\u0000\u0000\u0000\u023c\u1843\u0001\u0000\u0000\u0000"+
		"\u023e\u1847\u0001\u0000\u0000\u0000\u0240\u1860\u0001\u0000\u0000\u0000"+
		"\u0242\u1862\u0001\u0000\u0000\u0000\u0244\u1865\u0001\u0000\u0000\u0000"+
		"\u0246\u186a\u0001\u0000\u0000\u0000\u0248\u187a\u0001\u0000\u0000\u0000"+
		"\u024a\u18f6\u0001\u0000\u0000\u0000\u024c\u18f8\u0001\u0000\u0000\u0000"+
		"\u024e\u1919\u0001\u0000\u0000\u0000\u0250\u191e\u0001\u0000\u0000\u0000"+
		"\u0252\u1922\u0001\u0000\u0000\u0000\u0254\u1928\u0001\u0000\u0000\u0000"+
		"\u0256\u1930\u0001\u0000\u0000\u0000\u0258\u1938\u0001\u0000\u0000\u0000"+
		"\u025a\u1940\u0001\u0000\u0000\u0000\u025c\u1948\u0001\u0000\u0000\u0000"+
		"\u025e\u1953\u0001\u0000\u0000\u0000\u0260\u195b\u0001\u0000\u0000\u0000"+
		"\u0262\u1963\u0001\u0000\u0000\u0000\u0264\u196b\u0001\u0000\u0000\u0000"+
		"\u0266\u1973\u0001\u0000\u0000\u0000\u0268\u1995\u0001\u0000\u0000\u0000"+
		"\u026a\u19a5\u0001\u0000\u0000\u0000\u026c\u19a9\u0001\u0000\u0000\u0000"+
		"\u026e\u19ab\u0001\u0000\u0000\u0000\u0270\u19ae\u0001\u0000\u0000\u0000"+
		"\u0272\u19b2\u0001\u0000\u0000\u0000\u0274\u19b8\u0001\u0000\u0000\u0000"+
		"\u0276\u19cc\u0001\u0000\u0000\u0000\u0278\u1a80\u0001\u0000\u0000\u0000"+
		"\u027a\u1a82\u0001\u0000\u0000\u0000\u027c\u1a95\u0001\u0000\u0000\u0000"+
		"\u027e\u1a97\u0001\u0000\u0000\u0000\u0280\u1ad6\u0001\u0000\u0000\u0000"+
		"\u0282\u1afe\u0001\u0000\u0000\u0000\u0284\u1b00\u0001\u0000\u0000\u0000"+
		"\u0286\u1b09\u0001\u0000\u0000\u0000\u0288\u1b14\u0001\u0000\u0000\u0000"+
		"\u028a\u1b16\u0001\u0000\u0000\u0000\u028c\u1b19\u0001\u0000\u0000\u0000"+
		"\u028e\u1b1d\u0001\u0000\u0000\u0000\u0290\u1b1f\u0001\u0000\u0000\u0000"+
		"\u0292\u1b2b\u0001\u0000\u0000\u0000\u0294\u1b2d\u0001\u0000\u0000\u0000"+
		"\u0296\u1b4e\u0001\u0000\u0000\u0000\u0298\u1b50\u0001\u0000\u0000\u0000"+
		"\u029a\u1b59\u0001\u0000\u0000\u0000\u029c\u1b6b\u0001\u0000\u0000\u0000"+
		"\u029e\u1b78\u0001\u0000\u0000\u0000\u02a0\u1b83\u0001\u0000\u0000\u0000"+
		"\u02a2\u1bfa\u0001\u0000\u0000\u0000\u02a4\u1c10\u0001\u0000\u0000\u0000"+
		"\u02a6\u1c20\u0001\u0000\u0000\u0000\u02a8\u1c29\u0001\u0000\u0000\u0000"+
		"\u02aa\u1c32\u0001\u0000\u0000\u0000\u02ac\u1c34\u0001\u0000\u0000\u0000"+
		"\u02ae\u1c3b\u0001\u0000\u0000\u0000\u02b0\u1c3d\u0001\u0000\u0000\u0000"+
		"\u02b2\u1c3f\u0001\u0000\u0000\u0000\u02b4\u1c41\u0001\u0000\u0000\u0000"+
		"\u02b6\u1c43\u0001\u0000\u0000\u0000\u02b8\u1c45\u0001\u0000\u0000\u0000"+
		"\u02ba\u1c47\u0001\u0000\u0000\u0000\u02bc\u1c49\u0001\u0000\u0000\u0000"+
		"\u02be\u02c0\u0003\u0002\u0001\u0000\u02bf\u02be\u0001\u0000\u0000\u0000"+
		"\u02bf\u02c0\u0001\u0000\u0000\u0000\u02c0\u02c3\u0001\u0000\u0000\u0000"+
		"\u02c1\u02c2\u0005\u045a\u0000\u0000\u02c2\u02c4\u0005\u045a\u0000\u0000"+
		"\u02c3\u02c1\u0001\u0000\u0000\u0000\u02c3\u02c4\u0001\u0000\u0000\u0000"+
		"\u02c4\u02c5\u0001\u0000\u0000\u0000\u02c5\u02c6\u0005\u0000\u0000\u0001"+
		"\u02c6\u0001\u0001\u0000\u0000\u0000\u02c7\u02ca\u0003\u0004\u0002\u0000"+
		"\u02c8\u02c9\u0005\u045a\u0000\u0000\u02c9\u02cb\u0005\u045a\u0000\u0000"+
		"\u02ca\u02c8\u0001\u0000\u0000\u0000\u02ca\u02cb\u0001\u0000\u0000\u0000"+
		"\u02cb\u02cd\u0001\u0000\u0000\u0000\u02cc\u02ce\u0005\u0469\u0000\u0000"+
		"\u02cd\u02cc\u0001\u0000\u0000\u0000\u02cd\u02ce\u0001\u0000\u0000\u0000"+
		"\u02ce\u02d1\u0001\u0000\u0000\u0000\u02cf\u02d1\u0003\u0006\u0003\u0000"+
		"\u02d0\u02c7\u0001\u0000\u0000\u0000\u02d0\u02cf\u0001\u0000\u0000\u0000"+
		"\u02d1\u02d4\u0001\u0000\u0000\u0000\u02d2\u02d0\u0001\u0000\u0000\u0000"+
		"\u02d2\u02d3\u0001\u0000\u0000\u0000\u02d3\u02de\u0001\u0000\u0000\u0000"+
		"\u02d4\u02d2\u0001\u0000\u0000\u0000\u02d5\u02db\u0003\u0004\u0002\u0000"+
		"\u02d6\u02d7\u0005\u045a\u0000\u0000\u02d7\u02d9\u0005\u045a\u0000\u0000"+
		"\u02d8\u02d6\u0001\u0000\u0000\u0000\u02d8\u02d9\u0001\u0000\u0000\u0000"+
		"\u02d9\u02da\u0001\u0000\u0000\u0000\u02da\u02dc\u0005\u0469\u0000\u0000"+
		"\u02db\u02d8\u0001\u0000\u0000\u0000\u02db\u02dc\u0001\u0000\u0000\u0000"+
		"\u02dc\u02df\u0001\u0000\u0000\u0000\u02dd\u02df\u0003\u0006\u0003\u0000"+
		"\u02de\u02d5\u0001\u0000\u0000\u0000\u02de\u02dd\u0001\u0000\u0000\u0000"+
		"\u02df\u0003\u0001\u0000\u0000\u0000\u02e0\u02e8\u0003\b\u0004\u0000\u02e1"+
		"\u02e8\u0003\n\u0005\u0000\u02e2\u02e8\u0003\f\u0006\u0000\u02e3\u02e8"+
		"\u0003\u000e\u0007\u0000\u02e4\u02e8\u0003\u0010\b\u0000\u02e5\u02e8\u0003"+
		"\u0014\n\u0000\u02e6\u02e8\u0003\u0016\u000b\u0000\u02e7\u02e0\u0001\u0000"+
		"\u0000\u0000\u02e7\u02e1\u0001\u0000\u0000\u0000\u02e7\u02e2\u0001\u0000"+
		"\u0000\u0000\u02e7\u02e3\u0001\u0000\u0000\u0000\u02e7\u02e4\u0001\u0000"+
		"\u0000\u0000\u02e7\u02e5\u0001\u0000\u0000\u0000\u02e7\u02e6\u0001\u0000"+
		"\u0000\u0000\u02e8\u0005\u0001\u0000\u0000\u0000\u02e9\u02ea\u0005\u0469"+
		"\u0000\u0000\u02ea\u0007\u0001\u0000\u0000\u0000\u02eb\u0312\u0003\u0018"+
		"\f\u0000\u02ec\u0312\u0003\u001a\r\u0000\u02ed\u0312\u0003\u001c\u000e"+
		"\u0000\u02ee\u0312\u0003\u001e\u000f\u0000\u02ef\u0312\u0003 \u0010\u0000"+
		"\u02f0\u0312\u0003\"\u0011\u0000\u02f1\u0312\u0003&\u0013\u0000\u02f2"+
		"\u0312\u0003(\u0014\u0000\u02f3\u0312\u0003*\u0015\u0000\u02f4\u0312\u0003"+
		",\u0016\u0000\u02f5\u0312\u0003.\u0017\u0000\u02f6\u0312\u00038\u001c"+
		"\u0000\u02f7\u0312\u0003$\u0012\u0000\u02f8\u0312\u0003~?\u0000\u02f9"+
		"\u0312\u0003\u0080@\u0000\u02fa\u0312\u0003\u0082A\u0000\u02fb\u0312\u0003"+
		"\u0084B\u0000\u02fc\u0312\u0003\u0086C\u0000\u02fd\u0312\u0003\u0088D"+
		"\u0000\u02fe\u0312\u0003\u008aE\u0000\u02ff\u0312\u0003\u008cF\u0000\u0300"+
		"\u0312\u0003\u008eG\u0000\u0301\u0312\u0003\u0090H\u0000\u0302\u0312\u0003"+
		"\u0094J\u0000\u0303\u0312\u0003\u0096K\u0000\u0304\u0312\u0003\u0098L"+
		"\u0000\u0305\u0312\u0003\u009aM\u0000\u0306\u0312\u0003\u009cN\u0000\u0307"+
		"\u0312\u0003\u009eO\u0000\u0308\u0312\u0003\u00a0P\u0000\u0309\u0312\u0003"+
		"\u00a2Q\u0000\u030a\u0312\u0003\u00a4R\u0000\u030b\u0312\u0003\u00a6S"+
		"\u0000\u030c\u0312\u0003\u00a8T\u0000\u030d\u0312\u0003\u00aaU\u0000\u030e"+
		"\u0312\u0003\u00acV\u0000\u030f\u0312\u0003\u00aeW\u0000\u0310\u0312\u0003"+
		"\u00b2Y\u0000\u0311\u02eb\u0001\u0000\u0000\u0000\u0311\u02ec\u0001\u0000"+
		"\u0000\u0000\u0311\u02ed\u0001\u0000\u0000\u0000\u0311\u02ee\u0001\u0000"+
		"\u0000\u0000\u0311\u02ef\u0001\u0000\u0000\u0000\u0311\u02f0\u0001\u0000"+
		"\u0000\u0000\u0311\u02f1\u0001\u0000\u0000\u0000\u0311\u02f2\u0001\u0000"+
		"\u0000\u0000\u0311\u02f3\u0001\u0000\u0000\u0000\u0311\u02f4\u0001\u0000"+
		"\u0000\u0000\u0311\u02f5\u0001\u0000\u0000\u0000\u0311\u02f6\u0001\u0000"+
		"\u0000\u0000\u0311\u02f7\u0001\u0000\u0000\u0000\u0311\u02f8\u0001\u0000"+
		"\u0000\u0000\u0311\u02f9\u0001\u0000\u0000\u0000\u0311\u02fa\u0001\u0000"+
		"\u0000\u0000\u0311\u02fb\u0001\u0000\u0000\u0000\u0311\u02fc\u0001\u0000"+
		"\u0000\u0000\u0311\u02fd\u0001\u0000\u0000\u0000\u0311\u02fe\u0001\u0000"+
		"\u0000\u0000\u0311\u02ff\u0001\u0000\u0000\u0000\u0311\u0300\u0001\u0000"+
		"\u0000\u0000\u0311\u0301\u0001\u0000\u0000\u0000\u0311\u0302\u0001\u0000"+
		"\u0000\u0000\u0311\u0303\u0001\u0000\u0000\u0000\u0311\u0304\u0001\u0000"+
		"\u0000\u0000\u0311\u0305\u0001\u0000\u0000\u0000\u0311\u0306\u0001\u0000"+
		"\u0000\u0000\u0311\u0307\u0001\u0000\u0000\u0000\u0311\u0308\u0001\u0000"+
		"\u0000\u0000\u0311\u0309\u0001\u0000\u0000\u0000\u0311\u030a\u0001\u0000"+
		"\u0000\u0000\u0311\u030b\u0001\u0000\u0000\u0000\u0311\u030c\u0001\u0000"+
		"\u0000\u0000\u0311\u030d\u0001\u0000\u0000\u0000\u0311\u030e\u0001\u0000"+
		"\u0000\u0000\u0311\u030f\u0001\u0000\u0000\u0000\u0311\u0310\u0001\u0000"+
		"\u0000\u0000\u0312\t\u0001\u0000\u0000\u0000\u0313\u031f\u0003\u00c4b"+
		"\u0000\u0314\u031f\u0003\u00bc^\u0000\u0315\u031f\u0003\u00c6c\u0000\u0316"+
		"\u031f\u0003\u00b6[\u0000\u0317\u031f\u0003\u00c2a\u0000\u0318\u031f\u0003"+
		"\u00b4Z\u0000\u0319\u031f\u0003\u00be_\u0000\u031a\u031f\u0003\u00c0`"+
		"\u0000\u031b\u031f\u0003\u00b8\\\u0000\u031c\u031f\u0003\u00ba]\u0000"+
		"\u031d\u031f\u0003\u00c8d\u0000\u031e\u0313\u0001\u0000\u0000\u0000\u031e"+
		"\u0314\u0001\u0000\u0000\u0000\u031e\u0315\u0001\u0000\u0000\u0000\u031e"+
		"\u0316\u0001\u0000\u0000\u0000\u031e\u0317\u0001\u0000\u0000\u0000\u031e"+
		"\u0318\u0001\u0000\u0000\u0000\u031e\u0319\u0001\u0000\u0000\u0000\u031e"+
		"\u031a\u0001\u0000\u0000\u0000\u031e\u031b\u0001\u0000\u0000\u0000\u031e"+
		"\u031c\u0001\u0000\u0000\u0000\u031e\u031d\u0001\u0000\u0000\u0000\u031f"+
		"\u000b\u0001\u0000\u0000\u0000\u0320\u032a\u0003\u0124\u0092\u0000\u0321"+
		"\u032a\u0003\u0126\u0093\u0000\u0322\u032a\u0003\u0128\u0094\u0000\u0323"+
		"\u032a\u0003\u012a\u0095\u0000\u0324\u032a\u0003\u012c\u0096\u0000\u0325"+
		"\u032a\u0003\u012e\u0097\u0000\u0326\u032a\u0003\u0130\u0098\u0000\u0327"+
		"\u032a\u0003\u0132\u0099\u0000\u0328\u032a\u0003\u0134\u009a\u0000\u0329"+
		"\u0320\u0001\u0000\u0000\u0000\u0329\u0321\u0001\u0000\u0000\u0000\u0329"+
		"\u0322\u0001\u0000\u0000\u0000\u0329\u0323\u0001\u0000\u0000\u0000\u0329"+
		"\u0324\u0001\u0000\u0000\u0000\u0329\u0325\u0001\u0000\u0000\u0000\u0329"+
		"\u0326\u0001\u0000\u0000\u0000\u0329\u0327\u0001\u0000\u0000\u0000\u0329"+
		"\u0328\u0001\u0000\u0000\u0000\u032a\r\u0001\u0000\u0000\u0000\u032b\u033b"+
		"\u0003\u0144\u00a2\u0000\u032c\u033b\u0003\u0146\u00a3\u0000\u032d\u033b"+
		"\u0003\u0148\u00a4\u0000\u032e\u033b\u0003\u014a\u00a5\u0000\u032f\u033b"+
		"\u0003\u014c\u00a6\u0000\u0330\u033b\u0003\u014e\u00a7\u0000\u0331\u033b"+
		"\u0003\u0150\u00a8\u0000\u0332\u033b\u0003\u0152\u00a9\u0000\u0333\u033b"+
		"\u0003\u0154\u00aa\u0000\u0334\u033b\u0003\u016c\u00b6\u0000\u0335\u033b"+
		"\u0003\u016e\u00b7\u0000\u0336\u033b\u0003\u0170\u00b8\u0000\u0337\u033b"+
		"\u0003\u0172\u00b9\u0000\u0338\u033b\u0003\u0174\u00ba\u0000\u0339\u033b"+
		"\u0003\u0176\u00bb\u0000\u033a\u032b\u0001\u0000\u0000\u0000\u033a\u032c"+
		"\u0001\u0000\u0000\u0000\u033a\u032d\u0001\u0000\u0000\u0000\u033a\u032e"+
		"\u0001\u0000\u0000\u0000\u033a\u032f\u0001\u0000\u0000\u0000\u033a\u0330"+
		"\u0001\u0000\u0000\u0000\u033a\u0331\u0001\u0000\u0000\u0000\u033a\u0332"+
		"\u0001\u0000\u0000\u0000\u033a\u0333\u0001\u0000\u0000\u0000\u033a\u0334"+
		"\u0001\u0000\u0000\u0000\u033a\u0335\u0001\u0000\u0000\u0000\u033a\u0336"+
		"\u0001\u0000\u0000\u0000\u033a\u0337\u0001\u0000\u0000\u0000\u033a\u0338"+
		"\u0001\u0000\u0000\u0000\u033a\u0339\u0001\u0000\u0000\u0000\u033b\u000f"+
		"\u0001\u0000\u0000\u0000\u033c\u0340\u0003\u0178\u00bc\u0000\u033d\u0340"+
		"\u0003\u017a\u00bd\u0000\u033e\u0340\u0003\u017c\u00be\u0000\u033f\u033c"+
		"\u0001\u0000\u0000\u0000\u033f\u033d\u0001\u0000\u0000\u0000\u033f\u033e"+
		"\u0001\u0000\u0000\u0000\u0340\u0011\u0001\u0000\u0000\u0000\u0341\u034c"+
		"\u0003\u0180\u00c0\u0000\u0342\u034c\u0003\u0182\u00c1\u0000\u0343\u034c"+
		"\u0003\u0184\u00c2\u0000\u0344\u034c\u0003\u0188\u00c4\u0000\u0345\u034c"+
		"\u0003\u018a\u00c5\u0000\u0346\u034c\u0003\u018c\u00c6\u0000\u0347\u034c"+
		"\u0003\u0190\u00c8\u0000\u0348\u034c\u0003\u0186\u00c3\u0000\u0349\u034c"+
		"\u0003\u018e\u00c7\u0000\u034a\u034c\u0003\u0192\u00c9\u0000\u034b\u0341"+
		"\u0001\u0000\u0000\u0000\u034b\u0342\u0001\u0000\u0000\u0000\u034b\u0343"+
		"\u0001\u0000\u0000\u0000\u034b\u0344\u0001\u0000\u0000\u0000\u034b\u0345"+
		"\u0001\u0000\u0000\u0000\u034b\u0346\u0001\u0000\u0000\u0000\u034b\u0347"+
		"\u0001\u0000\u0000\u0000\u034b\u0348\u0001\u0000\u0000\u0000\u034b\u0349"+
		"\u0001\u0000\u0000\u0000\u034b\u034a\u0001\u0000\u0000\u0000\u034c\u0013"+
		"\u0001\u0000\u0000\u0000\u034d\u0367\u0003\u01a4\u00d2\u0000\u034e\u0367"+
		"\u0003\u01a6\u00d3\u0000\u034f\u0367\u0003\u01a8\u00d4\u0000\u0350\u0367"+
		"\u0003\u01aa\u00d5\u0000\u0351\u0367\u0003\u01ae\u00d7\u0000\u0352\u0367"+
		"\u0003\u01b0\u00d8\u0000\u0353\u0367\u0003\u01b2\u00d9\u0000\u0354\u0367"+
		"\u0003\u01b4\u00da\u0000\u0355\u0367\u0003\u01ce\u00e7\u0000\u0356\u0367"+
		"\u0003\u01d0\u00e8\u0000\u0357\u0367\u0003\u01d2\u00e9\u0000\u0358\u0367"+
		"\u0003\u01d4\u00ea\u0000\u0359\u0367\u0003\u01d6\u00eb\u0000\u035a\u0367"+
		"\u0003\u01da\u00ed\u0000\u035b\u0367\u0003\u01dc\u00ee\u0000\u035c\u0367"+
		"\u0003\u01de\u00ef\u0000\u035d\u0367\u0003\u01e0\u00f0\u0000\u035e\u0367"+
		"\u0003\u01e2\u00f1\u0000\u035f\u0367\u0003\u01f0\u00f8\u0000\u0360\u0367"+
		"\u0003\u01f2\u00f9\u0000\u0361\u0367\u0003\u01f4\u00fa\u0000\u0362\u0367"+
		"\u0003\u01f6\u00fb\u0000\u0363\u0367\u0003\u01f8\u00fc\u0000\u0364\u0367"+
		"\u0003\u01fa\u00fd\u0000\u0365\u0367\u0003\u01fc\u00fe\u0000\u0366\u034d"+
		"\u0001\u0000\u0000\u0000\u0366\u034e\u0001\u0000\u0000\u0000\u0366\u034f"+
		"\u0001\u0000\u0000\u0000\u0366\u0350\u0001\u0000\u0000\u0000\u0366\u0351"+
		"\u0001\u0000\u0000\u0000\u0366\u0352\u0001\u0000\u0000\u0000\u0366\u0353"+
		"\u0001\u0000\u0000\u0000\u0366\u0354\u0001\u0000\u0000\u0000\u0366\u0355"+
		"\u0001\u0000\u0000\u0000\u0366\u0356\u0001\u0000\u0000\u0000\u0366\u0357"+
		"\u0001\u0000\u0000\u0000\u0366\u0358\u0001\u0000\u0000\u0000\u0366\u0359"+
		"\u0001\u0000\u0000\u0000\u0366\u035a\u0001\u0000\u0000\u0000\u0366\u035b"+
		"\u0001\u0000\u0000\u0000\u0366\u035c\u0001\u0000\u0000\u0000\u0366\u035d"+
		"\u0001\u0000\u0000\u0000\u0366\u035e\u0001\u0000\u0000\u0000\u0366\u035f"+
		"\u0001\u0000\u0000\u0000\u0366\u0360\u0001\u0000\u0000\u0000\u0366\u0361"+
		"\u0001\u0000\u0000\u0000\u0366\u0362\u0001\u0000\u0000\u0000\u0366\u0363"+
		"\u0001\u0000\u0000\u0000\u0366\u0364\u0001\u0000\u0000\u0000\u0366\u0365"+
		"\u0001\u0000\u0000\u0000\u0367\u0015\u0001\u0000\u0000\u0000\u0368\u0370"+
		"\u0003\u0206\u0103\u0000\u0369\u0370\u0003\u0208\u0104\u0000\u036a\u0370"+
		"\u0003\u020a\u0105\u0000\u036b\u0370\u0003\u020c\u0106\u0000\u036c\u0370"+
		"\u0003\u020e\u0107\u0000\u036d\u0370\u0003\u0210\u0108\u0000\u036e\u0370"+
		"\u0003\u0214\u010a\u0000\u036f\u0368\u0001\u0000\u0000\u0000\u036f\u0369"+
		"\u0001\u0000\u0000\u0000\u036f\u036a\u0001\u0000\u0000\u0000\u036f\u036b"+
		"\u0001\u0000\u0000\u0000\u036f\u036c\u0001\u0000\u0000\u0000\u036f\u036d"+
		"\u0001\u0000\u0000\u0000\u036f\u036e\u0001\u0000\u0000\u0000\u0370\u0017"+
		"\u0001\u0000\u0000\u0000\u0371\u0372\u0005!\u0000\u0000\u0372\u0374\u0007"+
		"\u0000\u0000\u0000\u0373\u0375\u0003\u0270\u0138\u0000\u0374\u0373\u0001"+
		"\u0000\u0000\u0000\u0374\u0375\u0001\u0000\u0000\u0000\u0375\u0376\u0001"+
		"\u0000\u0000\u0000\u0376\u037a\u0003\u0236\u011b\u0000\u0377\u0379\u0003"+
		":\u001d\u0000\u0378\u0377\u0001\u0000\u0000\u0000\u0379\u037c\u0001\u0000"+
		"\u0000\u0000\u037a\u0378\u0001\u0000\u0000\u0000\u037a\u037b\u0001\u0000"+
		"\u0000\u0000\u037b\u0019\u0001\u0000\u0000\u0000\u037c\u037a\u0001\u0000"+
		"\u0000\u0000\u037d\u037f\u0005!\u0000\u0000\u037e\u0380\u0003>\u001f\u0000"+
		"\u037f\u037e\u0001\u0000\u0000\u0000\u037f\u0380\u0001\u0000\u0000\u0000"+
		"\u0380\u0381\u0001\u0000\u0000\u0000\u0381\u0383\u0005\u019d\u0000\u0000"+
		"\u0382\u0384\u0003\u0270\u0138\u0000\u0383\u0382\u0001\u0000\u0000\u0000"+
		"\u0383\u0384\u0001\u0000\u0000\u0000\u0384\u0385\u0001\u0000\u0000\u0000"+
		"\u0385\u0386\u0003\u021a\u010d\u0000\u0386\u0387\u0005u\u0000\u0000\u0387"+
		"\u0388\u0005\u025b\u0000\u0000\u0388\u038f\u0003@ \u0000\u0389\u038a\u0005"+
		"u\u0000\u0000\u038a\u038c\u0005\u0171\u0000\u0000\u038b\u038d\u0005q\u0000"+
		"\u0000\u038c\u038b\u0001\u0000\u0000\u0000\u038c\u038d\u0001\u0000\u0000"+
		"\u0000\u038d\u038e\u0001\u0000\u0000\u0000\u038e\u0390\u0005\u022f\u0000"+
		"\u0000\u038f\u0389\u0001\u0000\u0000\u0000\u038f\u0390\u0001\u0000\u0000"+
		"\u0000\u0390\u0392\u0001\u0000\u0000\u0000\u0391\u0393\u0003H$\u0000\u0392"+
		"\u0391\u0001\u0000\u0000\u0000\u0392\u0393\u0001\u0000\u0000\u0000\u0393"+
		"\u0396\u0001\u0000\u0000\u0000\u0394\u0395\u0005\u016e\u0000\u0000\u0395"+
		"\u0397\u0005\u0475\u0000\u0000\u0396\u0394\u0001\u0000\u0000\u0000\u0396"+
		"\u0397\u0001\u0000\u0000\u0000\u0397\u0398\u0001\u0000\u0000\u0000\u0398"+
		"\u0399\u0005\u018d\u0000\u0000\u0399\u039a\u0003\u017e\u00bf\u0000\u039a"+
		"\u001b\u0001\u0000\u0000\u0000\u039b\u039d\u0005!\u0000\u0000\u039c\u039e"+
		"\u0007\u0001\u0000\u0000\u039d\u039c\u0001\u0000\u0000\u0000\u039d\u039e"+
		"\u0001\u0000\u0000\u0000\u039e\u03a0\u0001\u0000\u0000\u0000\u039f\u03a1"+
		"\u0007\u0002\u0000\u0000\u03a0\u039f\u0001\u0000\u0000\u0000\u03a0\u03a1"+
		"\u0001\u0000\u0000\u0000\u03a1\u03a2\u0001\u0000\u0000\u0000\u03a2\u03a3"+
		"\u0005P\u0000\u0000\u03a3\u03a5\u0003\u0236\u011b\u0000\u03a4\u03a6\u0003"+
		"J%\u0000\u03a5\u03a4\u0001\u0000\u0000\u0000\u03a5\u03a6\u0001\u0000\u0000"+
		"\u0000\u03a6\u03a7\u0001\u0000\u0000\u0000\u03a7\u03a8\u0005u\u0000\u0000"+
		"\u03a8\u03a9\u0003\u021c\u010e\u0000\u03a9\u03ad\u0003\u025c\u012e\u0000"+
		"\u03aa\u03ac\u0003L&\u0000\u03ab\u03aa\u0001\u0000\u0000\u0000\u03ac\u03af"+
		"\u0001\u0000\u0000\u0000\u03ad\u03ab\u0001\u0000\u0000\u0000\u03ad\u03ae"+
		"\u0001\u0000\u0000\u0000\u03ae\u03bc\u0001\u0000\u0000\u0000\u03af\u03ad"+
		"\u0001\u0000\u0000\u0000\u03b0\u03b2\u0005\u014e\u0000\u0000\u03b1\u03b3"+
		"\u0005\u045d\u0000\u0000\u03b2\u03b1\u0001\u0000\u0000\u0000\u03b2\u03b3"+
		"\u0001\u0000\u0000\u0000\u03b3\u03b4\u0001\u0000\u0000\u0000\u03b4\u03bb"+
		"\u0007\u0003\u0000\u0000\u03b5\u03b7\u0005f\u0000\u0000\u03b6\u03b8\u0005"+
		"\u045d\u0000\u0000\u03b7\u03b6\u0001\u0000\u0000\u0000\u03b7\u03b8\u0001"+
		"\u0000\u0000\u0000\u03b8\u03b9\u0001\u0000\u0000\u0000\u03b9\u03bb\u0007"+
		"\u0004\u0000\u0000\u03ba\u03b0\u0001\u0000\u0000\u0000\u03ba\u03b5\u0001"+
		"\u0000\u0000\u0000\u03bb\u03be\u0001\u0000\u0000\u0000\u03bc\u03ba\u0001"+
		"\u0000\u0000\u0000\u03bc\u03bd\u0001\u0000\u0000\u0000\u03bd\u001d\u0001"+
		"\u0000\u0000\u0000\u03be\u03bc\u0001\u0000\u0000\u0000\u03bf\u03c0\u0005"+
		"!\u0000\u0000\u03c0\u03c1\u0005\u01d9\u0000\u0000\u03c1\u03c2\u0005H\u0000"+
		"\u0000\u03c2\u03c3\u0003\u0236\u011b\u0000\u03c3\u03c4\u0005\u0005\u0000"+
		"\u0000\u03c4\u03c5\u0005\u0291\u0000\u0000\u03c5\u03cb\u0005\u0475\u0000"+
		"\u0000\u03c6\u03c8\u0005\u01c3\u0000\u0000\u03c7\u03c9\u0005\u045d\u0000"+
		"\u0000\u03c8\u03c7\u0001\u0000\u0000\u0000\u03c8\u03c9\u0001\u0000\u0000"+
		"\u0000\u03c9\u03ca\u0001\u0000\u0000\u0000\u03ca\u03cc\u0003\u023e\u011f"+
		"\u0000\u03cb\u03c6\u0001\u0000\u0000\u0000\u03cb\u03cc\u0001\u0000\u0000"+
		"\u0000\u03cc\u03d2\u0001\u0000\u0000\u0000\u03cd\u03cf\u0005\u0292\u0000"+
		"\u0000\u03ce\u03d0\u0005\u045d\u0000\u0000\u03cf\u03ce\u0001\u0000\u0000"+
		"\u0000\u03cf\u03d0\u0001\u0000\u0000\u0000\u03d0\u03d1\u0001\u0000\u0000";
	private static final String _serializedATNSegment1 =
		"\u0000\u03d1\u03d3\u0003\u023e\u011f\u0000\u03d2\u03cd\u0001\u0000\u0000"+
		"\u0000\u03d2\u03d3\u0001\u0000\u0000\u0000\u03d3\u03d9\u0001\u0000\u0000"+
		"\u0000\u03d4\u03d6\u0005\u023a\u0000\u0000\u03d5\u03d7\u0005\u045d\u0000"+
		"\u0000\u03d6\u03d5\u0001\u0000\u0000\u0000\u03d6\u03d7\u0001\u0000\u0000"+
		"\u0000\u03d7\u03d8\u0001\u0000\u0000\u0000\u03d8\u03da\u0003\u023e\u011f"+
		"\u0000\u03d9\u03d4\u0001\u0000\u0000\u0000\u03d9\u03da\u0001\u0000\u0000"+
		"\u0000\u03da\u03e0\u0001\u0000\u0000\u0000\u03db\u03dd\u0005\u020e\u0000"+
		"\u0000\u03dc\u03de\u0005\u045d\u0000\u0000\u03dd\u03dc\u0001\u0000\u0000"+
		"\u0000\u03dd\u03de\u0001\u0000\u0000\u0000\u03de\u03df\u0001\u0000\u0000"+
		"\u0000\u03df\u03e1\u0003\u0236\u011b\u0000\u03e0\u03db\u0001\u0000\u0000"+
		"\u0000\u03e0\u03e1\u0001\u0000\u0000\u0000\u03e1\u03e3\u0001\u0000\u0000"+
		"\u0000\u03e2\u03e4\u0005\u02a0\u0000\u0000\u03e3\u03e2\u0001\u0000\u0000"+
		"\u0000\u03e3\u03e4\u0001\u0000\u0000\u0000\u03e4\u03ea\u0001\u0000\u0000"+
		"\u0000\u03e5\u03e7\u0005\u016e\u0000\u0000\u03e6\u03e8\u0005\u045d\u0000"+
		"\u0000\u03e7\u03e6\u0001\u0000\u0000\u0000\u03e7\u03e8\u0001\u0000\u0000"+
		"\u0000\u03e8\u03e9\u0001\u0000\u0000\u0000\u03e9\u03eb\u0005\u0475\u0000"+
		"\u0000\u03ea\u03e5\u0001\u0000\u0000\u0000\u03ea\u03eb\u0001\u0000\u0000"+
		"\u0000\u03eb\u03ec\u0001\u0000\u0000\u0000\u03ec\u03ee\u0005\u0197\u0000"+
		"\u0000\u03ed\u03ef\u0005\u045d\u0000\u0000\u03ee\u03ed\u0001\u0000\u0000"+
		"\u0000\u03ee\u03ef\u0001\u0000\u0000\u0000\u03ef\u03f0\u0001\u0000\u0000"+
		"\u0000\u03f0\u03f1\u0003\u022c\u0116\u0000\u03f1\u001f\u0001\u0000\u0000"+
		"\u0000\u03f2\u03f4\u0005!\u0000\u0000\u03f3\u03f5\u0003>\u001f\u0000\u03f4"+
		"\u03f3\u0001\u0000\u0000\u0000\u03f4\u03f5\u0001\u0000\u0000\u0000\u03f5"+
		"\u03f6\u0001\u0000\u0000\u0000\u03f6\u03f7\u0005\u0082\u0000\u0000\u03f7"+
		"\u03f8\u0003\u021a\u010d\u0000\u03f8\u03fa\u0005\u0466\u0000\u0000\u03f9"+
		"\u03fb\u0003N\'\u0000\u03fa\u03f9\u0001\u0000\u0000\u0000\u03fa\u03fb"+
		"\u0001\u0000\u0000\u0000\u03fb\u0400\u0001\u0000\u0000\u0000\u03fc\u03fd"+
		"\u0005\u0468\u0000\u0000\u03fd\u03ff\u0003N\'\u0000\u03fe\u03fc\u0001"+
		"\u0000\u0000\u0000\u03ff\u0402\u0001\u0000\u0000\u0000\u0400\u03fe\u0001"+
		"\u0000\u0000\u0000\u0400\u0401\u0001\u0000\u0000\u0000\u0401\u0403\u0001"+
		"\u0000\u0000\u0000\u0402\u0400\u0001\u0000\u0000\u0000\u0403\u0407\u0005"+
		"\u0467\u0000\u0000\u0404\u0406\u0003R)\u0000\u0405\u0404\u0001\u0000\u0000"+
		"\u0000\u0406\u0409\u0001\u0000\u0000\u0000\u0407\u0405\u0001\u0000\u0000"+
		"\u0000\u0407\u0408\u0001\u0000\u0000\u0000\u0408\u040a\u0001\u0000\u0000"+
		"\u0000\u0409\u0407\u0001\u0000\u0000\u0000\u040a\u040b\u0003\u017e\u00bf"+
		"\u0000\u040b!\u0001\u0000\u0000\u0000\u040c\u040e\u0005!\u0000\u0000\u040d"+
		"\u040f\u0003>\u001f\u0000\u040e\u040d\u0001\u0000\u0000\u0000\u040e\u040f"+
		"\u0001\u0000\u0000\u0000\u040f\u0411\u0001\u0000\u0000\u0000\u0410\u0412"+
		"\u0005\u014d\u0000\u0000\u0411\u0410\u0001\u0000\u0000\u0000\u0411\u0412"+
		"\u0001\u0000\u0000\u0000\u0412\u0413\u0001\u0000\u0000\u0000\u0413\u0415"+
		"\u0005\u01b3\u0000\u0000\u0414\u0416\u0003\u0270\u0138\u0000\u0415\u0414"+
		"\u0001\u0000\u0000\u0000\u0415\u0416\u0001\u0000\u0000\u0000\u0416\u0417"+
		"\u0001\u0000\u0000\u0000\u0417\u0418\u0003\u021a\u010d\u0000\u0418\u041a"+
		"\u0005\u0466\u0000\u0000\u0419\u041b\u0003P(\u0000\u041a\u0419\u0001\u0000"+
		"\u0000\u0000\u041a\u041b\u0001\u0000\u0000\u0000\u041b\u0420\u0001\u0000"+
		"\u0000\u0000\u041c\u041d\u0005\u0468\u0000\u0000\u041d\u041f\u0003P(\u0000"+
		"\u041e\u041c\u0001\u0000\u0000\u0000\u041f\u0422\u0001\u0000\u0000\u0000"+
		"\u0420\u041e\u0001\u0000\u0000\u0000\u0420\u0421\u0001\u0000\u0000\u0000"+
		"\u0421\u0423\u0001\u0000\u0000\u0000\u0422\u0420\u0001\u0000\u0000\u0000"+
		"\u0423\u0424\u0005\u0467\u0000\u0000\u0424\u0425\u0005\u0250\u0000\u0000"+
		"\u0425\u0429\u0003\u024a\u0125\u0000\u0426\u0428\u0003R)\u0000\u0427\u0426"+
		"\u0001\u0000\u0000\u0000\u0428\u042b\u0001\u0000\u0000\u0000\u0429\u0427"+
		"\u0001\u0000\u0000\u0000\u0429\u042a\u0001\u0000\u0000\u0000\u042a\u042e"+
		"\u0001\u0000\u0000\u0000\u042b\u0429\u0001\u0000\u0000\u0000\u042c\u042f"+
		"\u0003\u017e\u00bf\u0000\u042d\u042f\u0003\u018e\u00c7\u0000\u042e\u042c"+
		"\u0001\u0000\u0000\u0000\u042e\u042d\u0001\u0000\u0000\u0000\u042f#\u0001"+
		"\u0000\u0000\u0000\u0430\u0431\u0005!\u0000\u0000\u0431\u0433\u0005\u0252"+
		"\u0000\u0000\u0432\u0434\u0003\u0270\u0138\u0000\u0433\u0432\u0001\u0000"+
		"\u0000\u0000\u0433\u0434\u0001\u0000\u0000\u0000\u0434\u0435\u0001\u0000"+
		"\u0000\u0000\u0435\u043a\u0003\u021e\u010f\u0000\u0436\u0437\u0005\u0468"+
		"\u0000\u0000\u0437\u0439\u0003\u021e\u010f\u0000\u0438\u0436\u0001\u0000"+
		"\u0000\u0000\u0439\u043c\u0001\u0000\u0000\u0000\u043a\u0438\u0001\u0000"+
		"\u0000\u0000\u043a\u043b\u0001\u0000\u0000\u0000\u043b%\u0001\u0000\u0000"+
		"\u0000\u043c\u043a\u0001\u0000\u0000\u0000\u043d\u043e\u0005!\u0000\u0000"+
		"\u043e\u043f\u0005\u025e\u0000\u0000\u043f\u0440\u0003\u0236\u011b\u0000"+
		"\u0440\u0441\u0005B\u0000\u0000\u0441\u0442\u0005\u0182\u0000\u0000\u0442"+
		"\u0443\u0005\u02a5\u0000\u0000\u0443\u0444\u0007\u0005\u0000\u0000\u0444"+
		"\u0445\u0005\u021b\u0000\u0000\u0445\u0446\u0005\u0466\u0000\u0000\u0446"+
		"\u044b\u0003T*\u0000\u0447\u0448\u0005\u0468\u0000\u0000\u0448\u044a\u0003"+
		"T*\u0000\u0449\u0447\u0001\u0000\u0000\u0000\u044a\u044d\u0001\u0000\u0000"+
		"\u0000\u044b\u0449\u0001\u0000\u0000\u0000\u044b\u044c\u0001\u0000\u0000"+
		"\u0000\u044c\u044e\u0001\u0000\u0000\u0000\u044d\u044b\u0001\u0000\u0000"+
		"\u0000\u044e\u044f\u0005\u0467\u0000\u0000\u044f\'\u0001\u0000\u0000\u0000"+
		"\u0450\u0452\u0005!\u0000\u0000\u0451\u0453\u0005\u0287\u0000\u0000\u0452"+
		"\u0451\u0001\u0000\u0000\u0000\u0452\u0453\u0001\u0000\u0000\u0000\u0453"+
		"\u0454\u0001\u0000\u0000\u0000\u0454\u0456\u0005\u00aa\u0000\u0000\u0455"+
		"\u0457\u0003\u0270\u0138\u0000\u0456\u0455\u0001\u0000\u0000\u0000\u0456"+
		"\u0457\u0001\u0000\u0000\u0000\u0457\u0458\u0001\u0000\u0000\u0000\u0458"+
		"\u0460\u0003\u021c\u010e\u0000\u0459\u045a\u0005a\u0000\u0000\u045a\u0461"+
		"\u0003\u021c\u010e\u0000\u045b\u045c\u0005\u0466\u0000\u0000\u045c\u045d"+
		"\u0005a\u0000\u0000\u045d\u045e\u0003\u021c\u010e\u0000\u045e\u045f\u0005"+
		"\u0467\u0000\u0000\u045f\u0461\u0001\u0000\u0000\u0000\u0460\u0459\u0001"+
		"\u0000\u0000\u0000\u0460\u045b\u0001\u0000\u0000\u0000\u0461\u049f\u0001"+
		"\u0000\u0000\u0000\u0462\u0464\u0005!\u0000\u0000\u0463\u0465\u0005\u0287"+
		"\u0000\u0000\u0464\u0463\u0001\u0000\u0000\u0000\u0464\u0465\u0001\u0000"+
		"\u0000\u0000\u0465\u0466\u0001\u0000\u0000\u0000\u0466\u0468\u0005\u00aa"+
		"\u0000\u0000\u0467\u0469\u0003\u0270\u0138\u0000\u0468\u0467\u0001\u0000"+
		"\u0000\u0000\u0468\u0469\u0001\u0000\u0000\u0000\u0469\u046a\u0001\u0000"+
		"\u0000\u0000\u046a\u046c\u0003\u021c\u010e\u0000\u046b\u046d\u0003V+\u0000"+
		"\u046c\u046b\u0001\u0000\u0000\u0000\u046c\u046d\u0001\u0000\u0000\u0000"+
		"\u046d\u0478\u0001\u0000\u0000\u0000\u046e\u0475\u0003h4\u0000\u046f\u0471"+
		"\u0005\u0468\u0000\u0000\u0470\u046f\u0001\u0000\u0000\u0000\u0470\u0471"+
		"\u0001\u0000\u0000\u0000\u0471\u0472\u0001\u0000\u0000\u0000\u0472\u0474"+
		"\u0003h4\u0000\u0473\u0470\u0001\u0000\u0000\u0000\u0474\u0477\u0001\u0000"+
		"\u0000\u0000\u0475\u0473\u0001\u0000\u0000\u0000\u0475\u0476\u0001\u0000"+
		"\u0000\u0000\u0476\u0479\u0001\u0000\u0000\u0000\u0477\u0475\u0001\u0000"+
		"\u0000\u0000\u0478\u046e\u0001\u0000\u0000\u0000\u0478\u0479\u0001\u0000"+
		"\u0000\u0000\u0479\u047b\u0001\u0000\u0000\u0000\u047a\u047c\u0003n7\u0000"+
		"\u047b\u047a\u0001\u0000\u0000\u0000\u047b\u047c\u0001\u0000\u0000\u0000"+
		"\u047c\u047e\u0001\u0000\u0000\u0000\u047d\u047f\u0007\u0006\u0000\u0000"+
		"\u047e\u047d\u0001\u0000\u0000\u0000\u047e\u047f\u0001\u0000\u0000\u0000"+
		"\u047f\u0481\u0001\u0000\u0000\u0000\u0480\u0482\u0005\f\u0000\u0000\u0481"+
		"\u0480\u0001\u0000\u0000\u0000\u0481\u0482\u0001\u0000\u0000\u0000\u0482"+
		"\u0483\u0001\u0000\u0000\u0000\u0483\u0484\u0003\u00c4b\u0000\u0484\u049f"+
		"\u0001\u0000\u0000\u0000\u0485\u0487\u0005!\u0000\u0000\u0486\u0488\u0005"+
		"\u0287\u0000\u0000\u0487\u0486\u0001\u0000\u0000\u0000\u0487\u0488\u0001"+
		"\u0000\u0000\u0000\u0488\u0489\u0001\u0000\u0000\u0000\u0489\u048b\u0005"+
		"\u00aa\u0000\u0000\u048a\u048c\u0003\u0270\u0138\u0000\u048b\u048a\u0001"+
		"\u0000\u0000\u0000\u048b\u048c\u0001\u0000\u0000\u0000\u048c\u048d\u0001"+
		"\u0000\u0000\u0000\u048d\u048e\u0003\u021c\u010e\u0000\u048e\u0499\u0003"+
		"V+\u0000\u048f\u0496\u0003h4\u0000\u0490\u0492\u0005\u0468\u0000\u0000"+
		"\u0491\u0490\u0001\u0000\u0000\u0000\u0491\u0492\u0001\u0000\u0000\u0000"+
		"\u0492\u0493\u0001\u0000\u0000\u0000\u0493\u0495\u0003h4\u0000\u0494\u0491"+
		"\u0001\u0000\u0000\u0000\u0495\u0498\u0001\u0000\u0000\u0000\u0496\u0494"+
		"\u0001\u0000\u0000\u0000\u0496\u0497\u0001\u0000\u0000\u0000\u0497\u049a"+
		"\u0001\u0000\u0000\u0000\u0498\u0496\u0001\u0000\u0000\u0000\u0499\u048f"+
		"\u0001\u0000\u0000\u0000\u0499\u049a\u0001\u0000\u0000\u0000\u049a\u049c"+
		"\u0001\u0000\u0000\u0000\u049b\u049d\u0003n7\u0000\u049c\u049b\u0001\u0000"+
		"\u0000\u0000\u049c\u049d\u0001\u0000\u0000\u0000\u049d\u049f\u0001\u0000"+
		"\u0000\u0000\u049e\u0450\u0001\u0000\u0000\u0000\u049e\u0462\u0001\u0000"+
		"\u0000\u0000\u049e\u0485\u0001\u0000\u0000\u0000\u049f)\u0001\u0000\u0000"+
		"\u0000\u04a0\u04a1\u0005!\u0000\u0000\u04a1\u04a2\u0005\u0285\u0000\u0000"+
		"\u04a2\u04a3\u0003\u0236\u011b\u0000\u04a3\u04a4\u0005\u0005\u0000\u0000"+
		"\u04a4\u04a5\u0005\u0183\u0000\u0000\u04a5\u04a9\u0005\u0475\u0000\u0000"+
		"\u04a6\u04a7\u0005\u01aa\u0000\u0000\u04a7\u04a8\u0005\u045d\u0000\u0000"+
		"\u04a8\u04aa\u0003\u023e\u011f\u0000\u04a9\u04a6\u0001\u0000\u0000\u0000"+
		"\u04a9\u04aa\u0001\u0000\u0000\u0000\u04aa\u04b0\u0001\u0000\u0000\u0000"+
		"\u04ab\u04ad\u0005\u0197\u0000\u0000\u04ac\u04ae\u0005\u045d\u0000\u0000"+
		"\u04ad\u04ac\u0001\u0000\u0000\u0000\u04ad\u04ae\u0001\u0000\u0000\u0000"+
		"\u04ae\u04af\u0001\u0000\u0000\u0000\u04af\u04b1\u0003\u022c\u0116\u0000"+
		"\u04b0\u04ab\u0001\u0000\u0000\u0000\u04b0\u04b1\u0001\u0000\u0000\u0000"+
		"\u04b1+\u0001\u0000\u0000\u0000\u04b2\u04b3\u0005!\u0000\u0000\u04b3\u04b4"+
		"\u0005\u0285\u0000\u0000\u04b4\u04b5\u0003\u0236\u011b\u0000\u04b5\u04b6"+
		"\u0005\u0005\u0000\u0000\u04b6\u04b7\u0005\u0183\u0000\u0000\u04b7\u04b8"+
		"\u0005\u0475\u0000\u0000\u04b8\u04b9\u0005\u00b8\u0000\u0000\u04b9\u04ba"+
		"\u0005\u01d9\u0000\u0000\u04ba\u04bb\u0005H\u0000\u0000\u04bb\u04c1\u0003"+
		"\u0236\u011b\u0000\u04bc\u04be\u0005\u01a5\u0000\u0000\u04bd\u04bf\u0005"+
		"\u045d\u0000\u0000\u04be\u04bd\u0001\u0000\u0000\u0000\u04be\u04bf\u0001"+
		"\u0000\u0000\u0000\u04bf\u04c0\u0001\u0000\u0000\u0000\u04c0\u04c2\u0003"+
		"\u023e\u011f\u0000\u04c1\u04bc\u0001\u0000\u0000\u0000\u04c1\u04c2\u0001"+
		"\u0000\u0000\u0000\u04c2\u04c8\u0001\u0000\u0000\u0000\u04c3\u04c5\u0005"+
		"\u01c3\u0000\u0000\u04c4\u04c6\u0005\u045d\u0000\u0000\u04c5\u04c4\u0001"+
		"\u0000\u0000\u0000\u04c5\u04c6\u0001\u0000\u0000\u0000\u04c6\u04c7\u0001"+
		"\u0000\u0000\u0000\u04c7\u04c9\u0003\u023e\u011f\u0000\u04c8\u04c3\u0001"+
		"\u0000\u0000\u0000\u04c8\u04c9\u0001\u0000\u0000\u0000\u04c9\u04cf\u0001"+
		"\u0000\u0000\u0000\u04ca\u04cc\u0005\u0153\u0000\u0000\u04cb\u04cd\u0005"+
		"\u045d\u0000\u0000\u04cc\u04cb\u0001\u0000\u0000\u0000\u04cc\u04cd\u0001"+
		"\u0000\u0000\u0000\u04cd\u04ce\u0001\u0000\u0000\u0000\u04ce\u04d0\u0003"+
		"\u023e\u011f\u0000\u04cf\u04ca\u0001\u0000\u0000\u0000\u04cf\u04d0\u0001"+
		"\u0000\u0000\u0000\u04d0\u04d6\u0001\u0000\u0000\u0000\u04d1\u04d3\u0005"+
		"\u01f3\u0000\u0000\u04d2\u04d4\u0005\u045d\u0000\u0000\u04d3\u04d2\u0001"+
		"\u0000\u0000\u0000\u04d3\u04d4\u0001\u0000\u0000\u0000\u04d4\u04d5\u0001"+
		"\u0000\u0000\u0000\u04d5\u04d7\u0003\u023e\u011f\u0000\u04d6\u04d1\u0001"+
		"\u0000\u0000\u0000\u04d6\u04d7\u0001\u0000\u0000\u0000\u04d7\u04dd\u0001"+
		"\u0000\u0000\u0000\u04d8\u04da\u0005\u020e\u0000\u0000\u04d9\u04db\u0005"+
		"\u045d\u0000\u0000\u04da\u04d9\u0001\u0000\u0000\u0000\u04da\u04db\u0001"+
		"\u0000\u0000\u0000\u04db\u04dc\u0001\u0000\u0000\u0000\u04dc\u04de\u0003"+
		"\u0236\u011b\u0000\u04dd\u04d8\u0001\u0000\u0000\u0000\u04dd\u04de\u0001"+
		"\u0000\u0000\u0000\u04de\u04e0\u0001\u0000\u0000\u0000\u04df\u04e1\u0005"+
		"\u02a0\u0000\u0000\u04e0\u04df\u0001\u0000\u0000\u0000\u04e0\u04e1\u0001"+
		"\u0000\u0000\u0000\u04e1\u04e7\u0001\u0000\u0000\u0000\u04e2\u04e4\u0005"+
		"\u016e\u0000\u0000\u04e3\u04e5\u0005\u045d\u0000\u0000\u04e4\u04e3\u0001"+
		"\u0000\u0000\u0000\u04e4\u04e5\u0001\u0000\u0000\u0000\u04e5\u04e6\u0001"+
		"\u0000\u0000\u0000\u04e6\u04e8\u0005\u0475\u0000\u0000\u04e7\u04e2\u0001"+
		"\u0000\u0000\u0000\u04e7\u04e8\u0001\u0000\u0000\u0000\u04e8\u04e9\u0001"+
		"\u0000\u0000\u0000\u04e9\u04eb\u0005\u0197\u0000\u0000\u04ea\u04ec\u0005"+
		"\u045d\u0000\u0000\u04eb\u04ea\u0001\u0000\u0000\u0000\u04eb\u04ec\u0001"+
		"\u0000\u0000\u0000\u04ec\u04ed\u0001\u0000\u0000\u0000\u04ed\u04ee\u0003"+
		"\u022c\u0116\u0000\u04ee-\u0001\u0000\u0000\u0000\u04ef\u04f1\u0005!\u0000"+
		"\u0000\u04f0\u04f2\u0003>\u001f\u0000\u04f1\u04f0\u0001\u0000\u0000\u0000"+
		"\u04f1\u04f2\u0001\u0000\u0000\u0000\u04f2\u04f3\u0001\u0000\u0000\u0000"+
		"\u04f3\u04f4\u0005\u00af\u0000\u0000\u04f4\u04f5\u0003\u021a\u010d\u0000"+
		"\u04f5\u04f6\u0007\u0007\u0000\u0000\u04f6\u04f7\u0007\b\u0000\u0000\u04f7"+
		"\u04f8\u0005u\u0000\u0000\u04f8\u04f9\u0003\u021c\u010e\u0000\u04f9\u04fa"+
		"\u0005@\u0000\u0000\u04fa\u04fb\u00054\u0000\u0000\u04fb\u04fe\u0005\u0256"+
		"\u0000\u0000\u04fc\u04fd\u0007\t\u0000\u0000\u04fd\u04ff\u0003\u021a\u010d"+
		"\u0000\u04fe\u04fc\u0001\u0000\u0000\u0000\u04fe\u04ff\u0001\u0000\u0000"+
		"\u0000\u04ff\u0500\u0001\u0000\u0000\u0000\u0500\u0501\u0003\u017e\u00bf"+
		"\u0000\u0501/\u0001\u0000\u0000\u0000\u0502\u0504\u0005\u00be\u0000\u0000"+
		"\u0503\u0505\u0005\u0239\u0000\u0000\u0504\u0503\u0001\u0000\u0000\u0000"+
		"\u0504\u0505\u0001\u0000\u0000\u0000\u0505\u0506\u0001\u0000\u0000\u0000"+
		"\u0506\u0507\u00032\u0019\u0000\u05071\u0001\u0000\u0000\u0000\u0508\u0514"+
		"\u00034\u001a\u0000\u0509\u050a\u0005\u0466\u0000\u0000\u050a\u050f\u0003"+
		"6\u001b\u0000\u050b\u050c\u0005\u0468\u0000\u0000\u050c\u050e\u00036\u001b"+
		"\u0000\u050d\u050b\u0001\u0000\u0000\u0000\u050e\u0511\u0001\u0000\u0000"+
		"\u0000\u050f\u050d\u0001\u0000\u0000\u0000\u050f\u0510\u0001\u0000\u0000"+
		"\u0000\u0510\u0512\u0001\u0000\u0000\u0000\u0511\u050f\u0001\u0000\u0000"+
		"\u0000\u0512\u0513\u0005\u0467\u0000\u0000\u0513\u0515\u0001\u0000\u0000"+
		"\u0000\u0514\u0509\u0001\u0000\u0000\u0000\u0514\u0515\u0001\u0000\u0000"+
		"\u0000\u0515\u0516\u0001\u0000\u0000\u0000\u0516\u0517\u0005\f\u0000\u0000"+
		"\u0517\u0518\u0005\u0466\u0000\u0000\u0518\u0519\u0003\n\u0005\u0000\u0519"+
		"\u051c\u0005\u0467\u0000\u0000\u051a\u051b\u0005\u0468\u0000\u0000\u051b"+
		"\u051d\u00032\u0019\u0000\u051c\u051a\u0001\u0000\u0000\u0000\u051c\u051d"+
		"\u0001\u0000\u0000\u0000\u051d3\u0001\u0000\u0000\u0000\u051e\u051f\u0003"+
		"\u0236\u011b\u0000\u051f5\u0001\u0000\u0000\u0000\u0520\u0521\u0003\u0236"+
		"\u011b\u0000\u05217\u0001\u0000\u0000\u0000\u0522\u0524\u0005!\u0000\u0000"+
		"\u0523\u0525\u0003\u0272\u0139\u0000\u0524\u0523\u0001\u0000\u0000\u0000"+
		"\u0524\u0525\u0001\u0000\u0000\u0000\u0525\u0529\u0001\u0000\u0000\u0000"+
		"\u0526\u0527\u0005\u014e\u0000\u0000\u0527\u0528\u0005\u045d\u0000\u0000"+
		"\u0528\u052a\u0007\n\u0000\u0000\u0529\u0526\u0001\u0000\u0000\u0000\u0529"+
		"\u052a\u0001\u0000\u0000\u0000\u052a\u052c\u0001\u0000\u0000\u0000\u052b"+
		"\u052d\u0003>\u001f\u0000\u052c\u052b\u0001\u0000\u0000\u0000\u052c\u052d"+
		"\u0001\u0000\u0000\u0000\u052d\u0531\u0001\u0000\u0000\u0000\u052e\u052f"+
		"\u0005\u009e\u0000\u0000\u052f\u0530\u0005\u025c\u0000\u0000\u0530\u0532"+
		"\u0007\u000b\u0000\u0000\u0531\u052e\u0001\u0000\u0000\u0000\u0531\u0532"+
		"\u0001\u0000\u0000\u0000\u0532\u0533\u0001\u0000\u0000\u0000\u0533\u0534"+
		"\u0005\u029d\u0000\u0000\u0534\u0539\u0003\u021a\u010d\u0000\u0535\u0536"+
		"\u0005\u0466\u0000\u0000\u0536\u0537\u0003\u0256\u012b\u0000\u0537\u0538"+
		"\u0005\u0467\u0000\u0000\u0538\u053a\u0001\u0000\u0000\u0000\u0539\u0535"+
		"\u0001\u0000\u0000\u0000\u0539\u053a\u0001\u0000\u0000\u0000\u053a\u053b"+
		"\u0001\u0000\u0000\u0000\u053b\u054f\u0005\f\u0000\u0000\u053c\u053e\u0005"+
		"\u0466\u0000\u0000\u053d\u053f\u00030\u0018\u0000\u053e\u053d\u0001\u0000"+
		"\u0000\u0000\u053e\u053f\u0001\u0000\u0000\u0000\u053f\u0540\u0001\u0000"+
		"\u0000\u0000\u0540\u0541\u0003\u00c4b\u0000\u0541\u0542\u0005\u0467\u0000"+
		"\u0000\u0542\u0550\u0001\u0000\u0000\u0000\u0543\u0545\u00030\u0018\u0000"+
		"\u0544\u0543\u0001\u0000\u0000\u0000\u0544\u0545\u0001\u0000\u0000\u0000"+
		"\u0545\u0546\u0001\u0000\u0000\u0000\u0546\u054d\u0003\u00c4b\u0000\u0547"+
		"\u0549\u0005\u00be\u0000\u0000\u0548\u054a\u0007\f\u0000\u0000\u0549\u0548"+
		"\u0001\u0000\u0000\u0000\u0549\u054a\u0001\u0000\u0000\u0000\u054a\u054b"+
		"\u0001\u0000\u0000\u0000\u054b\u054c\u0005\u001a\u0000\u0000\u054c\u054e"+
		"\u0005w\u0000\u0000\u054d\u0547\u0001\u0000\u0000\u0000\u054d\u054e\u0001"+
		"\u0000\u0000\u0000\u054e\u0550\u0001\u0000\u0000\u0000\u054f\u053c\u0001"+
		"\u0000\u0000\u0000\u054f\u0544\u0001\u0000\u0000\u0000\u05509\u0001\u0000"+
		"\u0000\u0000\u0551\u0553\u0005*\u0000\u0000\u0552\u0551\u0001\u0000\u0000"+
		"\u0000\u0552\u0553\u0001\u0000\u0000\u0000\u0553\u0554\u0001\u0000\u0000"+
		"\u0000\u0554\u0556\u0003<\u001e\u0000\u0555\u0557\u0005\u045d\u0000\u0000"+
		"\u0556\u0555\u0001\u0000\u0000\u0000\u0556\u0557\u0001\u0000\u0000\u0000"+
		"\u0557\u055a\u0001\u0000\u0000\u0000\u0558\u055b\u0003\u0228\u0114\u0000"+
		"\u0559\u055b\u0005*\u0000\u0000\u055a\u0558\u0001\u0000\u0000\u0000\u055a"+
		"\u0559\u0001\u0000\u0000\u0000\u055b\u0573\u0001\u0000\u0000\u0000\u055c"+
		"\u055e\u0005*\u0000\u0000\u055d\u055c\u0001\u0000\u0000\u0000\u055d\u055e"+
		"\u0001\u0000\u0000\u0000\u055e\u055f\u0001\u0000\u0000\u0000\u055f\u0561"+
		"\u0005\u001b\u0000\u0000\u0560\u0562\u0005\u045d\u0000\u0000\u0561\u0560"+
		"\u0001\u0000\u0000\u0000\u0561\u0562\u0001\u0000\u0000\u0000\u0562\u0563"+
		"\u0001\u0000\u0000\u0000\u0563\u0573\u0003\u022a\u0115\u0000\u0564\u0566"+
		"\u0005*\u0000\u0000\u0565\u0564\u0001\u0000\u0000\u0000\u0565\u0566\u0001"+
		"\u0000\u0000\u0000\u0566\u0567\u0001\u0000\u0000\u0000\u0567\u0569\u0005"+
		"\u0193\u0000\u0000\u0568\u056a\u0005\u045d\u0000\u0000\u0569\u0568\u0001"+
		"\u0000\u0000\u0000\u0569\u056a\u0001\u0000\u0000\u0000\u056a\u056b\u0001"+
		"\u0000\u0000\u0000\u056b\u0573\u0005\u0475\u0000\u0000\u056c\u056d\u0005"+
		"\u0085\u0000\u0000\u056d\u056f\u0005\u0218\u0000\u0000\u056e\u0570\u0005"+
		"\u045d\u0000\u0000\u056f\u056e\u0001\u0000\u0000\u0000\u056f\u0570\u0001"+
		"\u0000\u0000\u0000\u0570\u0571\u0001\u0000\u0000\u0000\u0571\u0573\u0007"+
		"\r\u0000\u0000\u0572\u0552\u0001\u0000\u0000\u0000\u0572\u055d\u0001\u0000"+
		"\u0000\u0000\u0572\u0565\u0001\u0000\u0000\u0000\u0572\u056c\u0001\u0000"+
		"\u0000\u0000\u0573;\u0001\u0000\u0000\u0000\u0574\u0575\u0005\u0019\u0000"+
		"\u0000\u0575\u057a\u0005\u0098\u0000\u0000\u0576\u057a\u0005\u0344\u0000"+
		"\u0000\u0577\u0578\u0005\u00dc\u0000\u0000\u0578\u057a\u0005\u0098\u0000"+
		"\u0000\u0579\u0574\u0001\u0000\u0000\u0000\u0579\u0576\u0001\u0000\u0000"+
		"\u0000\u0579\u0577\u0001\u0000\u0000\u0000\u057a=\u0001\u0000\u0000\u0000"+
		"\u057b\u057c\u0005\u0186\u0000\u0000\u057c\u0583\u0005\u045d\u0000\u0000"+
		"\u057d\u0584\u0003\u0224\u0112\u0000\u057e\u0581\u0005%\u0000\u0000\u057f"+
		"\u0580\u0005\u0466\u0000\u0000\u0580\u0582\u0005\u0467\u0000\u0000\u0581"+
		"\u057f\u0001\u0000\u0000\u0000\u0581\u0582\u0001\u0000\u0000\u0000\u0582"+
		"\u0584\u0001\u0000\u0000\u0000\u0583\u057d\u0001\u0000\u0000\u0000\u0583"+
		"\u057e\u0001\u0000\u0000\u0000\u0584?\u0001\u0000\u0000\u0000\u0585\u0586"+
		"\u0005\u0150\u0000\u0000\u0586\u058a\u0003B!\u0000\u0587\u0589\u0003D"+
		"\"\u0000\u0588\u0587\u0001\u0000\u0000\u0000\u0589\u058c\u0001\u0000\u0000"+
		"\u0000\u058a\u0588\u0001\u0000\u0000\u0000\u058a\u058b\u0001\u0000\u0000"+
		"\u0000\u058b\u05a8\u0001\u0000\u0000\u0000\u058c\u058a\u0001\u0000\u0000"+
		"\u0000\u058d\u0590\u0005\u019f\u0000\u0000\u058e\u0591\u0003\u023c\u011e"+
		"\u0000\u058f\u0591\u0003\u029e\u014f\u0000\u0590\u058e\u0001\u0000\u0000"+
		"\u0000\u0590\u058f\u0001\u0000\u0000\u0000\u0591\u0592\u0001\u0000\u0000"+
		"\u0000\u0592\u059b\u0003F#\u0000\u0593\u0594\u0005\u0274\u0000\u0000\u0594"+
		"\u0598\u0003B!\u0000\u0595\u0597\u0003D\"\u0000\u0596\u0595\u0001\u0000"+
		"\u0000\u0000\u0597\u059a\u0001\u0000\u0000\u0000\u0598\u0596\u0001\u0000"+
		"\u0000\u0000\u0598\u0599\u0001\u0000\u0000\u0000\u0599\u059c\u0001\u0000"+
		"\u0000\u0000\u059a\u0598\u0001\u0000\u0000\u0000\u059b\u0593\u0001\u0000"+
		"\u0000\u0000\u059b\u059c\u0001\u0000\u0000\u0000\u059c\u05a5\u0001\u0000"+
		"\u0000\u0000\u059d\u059e\u0005\u0196\u0000\u0000\u059e\u05a2\u0003B!\u0000"+
		"\u059f\u05a1\u0003D\"\u0000\u05a0\u059f\u0001\u0000\u0000\u0000\u05a1"+
		"\u05a4\u0001\u0000\u0000\u0000\u05a2\u05a0\u0001\u0000\u0000\u0000\u05a2"+
		"\u05a3\u0001\u0000\u0000\u0000\u05a3\u05a6\u0001\u0000\u0000\u0000\u05a4"+
		"\u05a2\u0001\u0000\u0000\u0000\u05a5\u059d\u0001\u0000\u0000\u0000\u05a5"+
		"\u05a6\u0001\u0000\u0000\u0000\u05a6\u05a8\u0001\u0000\u0000\u0000\u05a7"+
		"\u0585\u0001\u0000\u0000\u0000\u05a7\u058d\u0001\u0000\u0000\u0000\u05a8"+
		"A\u0001\u0000\u0000\u0000\u05a9\u05ae\u0005\u0139\u0000\u0000\u05aa\u05ae"+
		"\u0003\u0240\u0120\u0000\u05ab\u05ae\u0003\u023c\u011e\u0000\u05ac\u05ae"+
		"\u0003\u029e\u014f\u0000\u05ad\u05a9\u0001\u0000\u0000\u0000\u05ad\u05aa"+
		"\u0001\u0000\u0000\u0000\u05ad\u05ab\u0001\u0000\u0000\u0000\u05ad\u05ac"+
		"\u0001\u0000\u0000\u0000\u05aeC\u0001\u0000\u0000\u0000\u05af\u05b0\u0005"+
		"\u0459\u0000\u0000\u05b0\u05b3\u0005U\u0000\u0000\u05b1\u05b4\u0003\u023c"+
		"\u011e\u0000\u05b2\u05b4\u0003\u029e\u014f\u0000\u05b3\u05b1\u0001\u0000"+
		"\u0000\u0000\u05b3\u05b2\u0001\u0000\u0000\u0000\u05b4\u05b5\u0001\u0000"+
		"\u0000\u0000\u05b5\u05b6\u0003F#\u0000\u05b6E\u0001\u0000\u0000\u0000"+
		"\u05b7\u05c5\u0003\u02b6\u015b\u0000\u05b8\u05c5\u0005\u00db\u0000\u0000"+
		"\u05b9\u05c5\u0005\u00ee\u0000\u0000\u05ba\u05c5\u0005\u00ef\u0000\u0000"+
		"\u05bb\u05c5\u0005\u00f0\u0000\u0000\u05bc\u05c5\u0005\u00f1\u0000\u0000"+
		"\u05bd\u05c5\u0005\u00f2\u0000\u0000\u05be\u05c5\u0005\u00f3\u0000\u0000"+
		"\u05bf\u05c5\u0005\u00f4\u0000\u0000\u05c0\u05c5\u0005\u00f5\u0000\u0000"+
		"\u05c1\u05c5\u0005\u00f6\u0000\u0000\u05c2\u05c5\u0005\u00f7\u0000\u0000"+
		"\u05c3\u05c5\u0005\u00f8\u0000\u0000\u05c4\u05b7\u0001\u0000\u0000\u0000"+
		"\u05c4\u05b8\u0001\u0000\u0000\u0000\u05c4\u05b9\u0001\u0000\u0000\u0000"+
		"\u05c4\u05ba\u0001\u0000\u0000\u0000\u05c4\u05bb\u0001\u0000\u0000\u0000"+
		"\u05c4\u05bc\u0001\u0000\u0000\u0000\u05c4\u05bd\u0001\u0000\u0000\u0000"+
		"\u05c4\u05be\u0001\u0000\u0000\u0000\u05c4\u05bf\u0001\u0000\u0000\u0000"+
		"\u05c4\u05c0\u0001\u0000\u0000\u0000\u05c4\u05c1\u0001\u0000\u0000\u0000"+
		"\u05c4\u05c2\u0001\u0000\u0000\u0000\u05c4\u05c3\u0001\u0000\u0000\u0000"+
		"\u05c5G\u0001\u0000\u0000\u0000\u05c6\u05cc\u0005\u0191\u0000\u0000\u05c7"+
		"\u05cc\u0005\u018a\u0000\u0000\u05c8\u05c9\u0005\u018a\u0000\u0000\u05c9"+
		"\u05ca\u0005u\u0000\u0000\u05ca\u05cc\u0005\u0264\u0000\u0000\u05cb\u05c6"+
		"\u0001\u0000\u0000\u0000\u05cb\u05c7\u0001\u0000\u0000\u0000\u05cb\u05c8"+
		"\u0001\u0000\u0000\u0000\u05ccI\u0001\u0000\u0000\u0000\u05cd\u05ce\u0005"+
		"\u00b9\u0000\u0000\u05ce\u05cf\u0007\u000e\u0000\u0000\u05cfK\u0001\u0000"+
		"\u0000\u0000\u05d0\u05d2\u0005\u01d1\u0000\u0000\u05d1\u05d3\u0005\u045d"+
		"\u0000\u0000\u05d2\u05d1\u0001\u0000\u0000\u0000\u05d2\u05d3\u0001\u0000"+
		"\u0000\u0000\u05d3\u05d4\u0001\u0000\u0000\u0000\u05d4\u05e7\u0003\u023e"+
		"\u011f\u0000\u05d5\u05e7\u0003J%\u0000\u05d6\u05d7\u0005\u00be\u0000\u0000"+
		"\u05d7\u05d8\u0005\u0221\u0000\u0000\u05d8\u05e7\u0003\u0236\u011b\u0000"+
		"\u05d9\u05da\u0005\u016e\u0000\u0000\u05da\u05e7\u0005\u0475\u0000\u0000"+
		"\u05db\u05e7\u0007\u000f\u0000\u0000\u05dc\u05de\u0005\u0366\u0000\u0000"+
		"\u05dd\u05df\u0005\u045d\u0000\u0000\u05de\u05dd\u0001\u0000\u0000\u0000"+
		"\u05de\u05df\u0001\u0000\u0000\u0000\u05df\u05e0\u0001\u0000\u0000\u0000"+
		"\u05e0\u05e7\u0005\u0475\u0000\u0000\u05e1\u05e3\u0005\u03e2\u0000\u0000"+
		"\u05e2\u05e4\u0005\u045d\u0000\u0000\u05e3\u05e2\u0001\u0000\u0000\u0000"+
		"\u05e3\u05e4\u0001\u0000\u0000\u0000\u05e4\u05e5\u0001\u0000\u0000\u0000"+
		"\u05e5\u05e7\u0005\u0475\u0000\u0000\u05e6\u05d0\u0001\u0000\u0000\u0000"+
		"\u05e6\u05d5\u0001\u0000\u0000\u0000\u05e6\u05d6\u0001\u0000\u0000\u0000"+
		"\u05e6\u05d9\u0001\u0000\u0000\u0000\u05e6\u05db\u0001\u0000\u0000\u0000"+
		"\u05e6\u05dc\u0001\u0000\u0000\u0000\u05e6\u05e1\u0001\u0000\u0000\u0000"+
		"\u05e7M\u0001\u0000\u0000\u0000\u05e8\u05ea\u0007\u0010\u0000\u0000\u05e9"+
		"\u05e8\u0001\u0000\u0000\u0000\u05e9\u05ea\u0001\u0000\u0000\u0000\u05ea"+
		"\u05eb\u0001\u0000\u0000\u0000\u05eb\u05ec\u0003\u0236\u011b\u0000\u05ec"+
		"\u05ed\u0003\u024a\u0125\u0000\u05edO\u0001\u0000\u0000\u0000\u05ee\u05ef"+
		"\u0003\u0236\u011b\u0000\u05ef\u05f0\u0003\u024a\u0125\u0000\u05f0Q\u0001"+
		"\u0000\u0000\u0000\u05f1\u05f2\u0005\u016e\u0000\u0000\u05f2\u0609\u0005"+
		"\u0475\u0000\u0000\u05f3\u05f4\u0005\u01d2\u0000\u0000\u05f4\u0609\u0005"+
		"\u009e\u0000\u0000\u05f5\u05f7\u0005q\u0000\u0000\u05f6\u05f5\u0001\u0000"+
		"\u0000\u0000\u05f6\u05f7\u0001\u0000\u0000\u0000\u05f7\u05f8\u0001\u0000"+
		"\u0000\u0000\u05f8\u0609\u0005/\u0000\u0000\u05f9\u05fa\u0005\u017b\u0000"+
		"\u0000\u05fa\u0604\u0005\u009e\u0000\u0000\u05fb\u05fc\u0005\u0207\u0000"+
		"\u0000\u05fc\u0604\u0005\u009e\u0000\u0000\u05fd\u05fe\u0005\u0086\u0000"+
		"\u0000\u05fe\u05ff\u0005\u009e\u0000\u0000\u05ff\u0604\u0005\u0182\u0000"+
		"\u0000\u0600\u0601\u0005o\u0000\u0000\u0601\u0602\u0005\u009e\u0000\u0000"+
		"\u0602\u0604\u0005\u0182\u0000\u0000\u0603\u05f9\u0001\u0000\u0000\u0000"+
		"\u0603\u05fb\u0001\u0000\u0000\u0000\u0603\u05fd\u0001\u0000\u0000\u0000"+
		"\u0603\u0600\u0001\u0000\u0000\u0000\u0604\u0609\u0001\u0000\u0000\u0000"+
		"\u0605\u0606\u0005\u009e\u0000\u0000\u0606\u0607\u0005\u025c\u0000\u0000"+
		"\u0607\u0609\u0007\u000b\u0000\u0000\u0608\u05f1\u0001\u0000\u0000\u0000"+
		"\u0608\u05f3\u0001\u0000\u0000\u0000\u0608\u05f6\u0001\u0000\u0000\u0000"+
		"\u0608\u0603\u0001\u0000\u0000\u0000\u0608\u0605\u0001\u0000\u0000\u0000"+
		"\u0609S\u0001\u0000\u0000\u0000\u060a\u060b\u0005\u01bc\u0000\u0000\u060b"+
		"\u0619\u0005\u0475\u0000\u0000\u060c\u060d\u0005\'\u0000\u0000\u060d\u0619"+
		"\u0005\u0475\u0000\u0000\u060e\u060f\u0005\u0297\u0000\u0000\u060f\u0619"+
		"\u0005\u0475\u0000\u0000\u0610\u0611\u0005\u0225\u0000\u0000\u0611\u0619"+
		"\u0005\u0475\u0000\u0000\u0612\u0613\u0005\u0267\u0000\u0000\u0613\u0619"+
		"\u0005\u0475\u0000\u0000\u0614\u0615\u0005\u021c\u0000\u0000\u0615\u0619"+
		"\u0005\u0475\u0000\u0000\u0616\u0617\u0005\u022b\u0000\u0000\u0617\u0619"+
		"\u0003\u023c\u011e\u0000\u0618\u060a\u0001\u0000\u0000\u0000\u0618\u060c"+
		"\u0001\u0000\u0000\u0000\u0618\u060e\u0001\u0000\u0000\u0000\u0618\u0610"+
		"\u0001\u0000\u0000\u0000\u0618\u0612\u0001\u0000\u0000\u0000\u0618\u0614"+
		"\u0001\u0000\u0000\u0000\u0618\u0616\u0001\u0000\u0000\u0000\u0619U\u0001"+
		"\u0000\u0000\u0000\u061a\u061b\u0005\u0466\u0000\u0000\u061b\u0620\u0003"+
		"X,\u0000\u061c\u061d\u0005\u0468\u0000\u0000\u061d\u061f\u0003X,\u0000"+
		"\u061e\u061c\u0001\u0000\u0000\u0000\u061f\u0622\u0001\u0000\u0000\u0000"+
		"\u0620\u061e\u0001\u0000\u0000\u0000\u0620\u0621\u0001\u0000\u0000\u0000"+
		"\u0621\u0623\u0001\u0000\u0000\u0000\u0622\u0620\u0001\u0000\u0000\u0000"+
		"\u0623\u0624\u0005\u0467\u0000\u0000\u0624W\u0001\u0000\u0000\u0000\u0625"+
		"\u0626\u0003\u0220\u0110\u0000\u0626\u0627\u0003Z-\u0000\u0627\u062b\u0001"+
		"\u0000\u0000\u0000\u0628\u062b\u0003^/\u0000\u0629\u062b\u0003f3\u0000"+
		"\u062a\u0625\u0001\u0000\u0000\u0000\u062a\u0628\u0001\u0000\u0000\u0000"+
		"\u062a\u0629\u0001\u0000\u0000\u0000\u062bY\u0001\u0000\u0000\u0000\u062c"+
		"\u0630\u0003\u024a\u0125\u0000\u062d\u062f\u0003\\.\u0000\u062e\u062d"+
		"\u0001\u0000\u0000\u0000\u062f\u0632\u0001\u0000\u0000\u0000\u0630\u062e"+
		"\u0001\u0000\u0000\u0000\u0630\u0631\u0001\u0000\u0000\u0000\u0631[\u0001"+
		"\u0000\u0000\u0000\u0632\u0630\u0001\u0000\u0000\u0000\u0633\u0669\u0003"+
		"\u0246\u0123\u0000\u0634\u0635\u0005*\u0000\u0000\u0635\u0669\u0003\u0268"+
		"\u0134\u0000\u0636\u0669\u0005\u029f\u0000\u0000\u0637\u0669\u0005\u01c9"+
		"\u0000\u0000\u0638\u063d\u0005\u0154\u0000\u0000\u0639\u063a\u0005u\u0000"+
		"\u0000\u063a\u063b\u0005\u00b6\u0000\u0000\u063b\u063d\u0003\u026a\u0135"+
		"\u0000\u063c\u0638\u0001\u0000\u0000\u0000\u063c\u0639\u0001\u0000\u0000"+
		"\u0000\u063d\u0669\u0001\u0000\u0000\u0000\u063e\u0640\u0005\u0081\u0000"+
		"\u0000\u063f\u063e\u0001\u0000\u0000\u0000\u063f\u0640\u0001\u0000\u0000"+
		"\u0000\u0640\u0641\u0001\u0000\u0000\u0000\u0641\u0669\u0005Z\u0000\u0000"+
		"\u0642\u0644\u0005\u00b3\u0000\u0000\u0643\u0645\u0005Z\u0000\u0000\u0644"+
		"\u0643\u0001\u0000\u0000\u0000\u0644\u0645\u0001\u0000\u0000\u0000\u0645"+
		"\u0669\u0001\u0000\u0000\u0000\u0646\u0647\u0005\u016e\u0000\u0000\u0647"+
		"\u0669\u0005\u0475\u0000\u0000\u0648\u0649\u0005\u016c\u0000\u0000\u0649"+
		"\u0669\u0007\u0011\u0000\u0000\u064a\u064b\u0005\u027a\u0000\u0000\u064b"+
		"\u0669\u0007\u0012\u0000\u0000\u064c\u0669\u0003`0\u0000\u064d\u064e\u0005"+
		"\u001b\u0000\u0000\u064e\u0669\u0003\u022a\u0115\u0000\u064f\u0650\u0005"+
		"E\u0000\u0000\u0650\u0652\u0005\b\u0000\u0000\u0651\u064f\u0001\u0000"+
		"\u0000\u0000\u0651\u0652\u0001\u0000\u0000\u0000\u0652\u0653\u0001\u0000"+
		"\u0000\u0000\u0653\u0654\u0005\f\u0000\u0000\u0654\u0655\u0005\u0466\u0000"+
		"\u0000\u0655\u0656\u0003\u029e\u014f\u0000\u0656\u0658\u0005\u0467\u0000"+
		"\u0000\u0657\u0659\u0007\u0013\u0000\u0000\u0658\u0657\u0001\u0000\u0000"+
		"\u0000\u0658\u0659\u0001\u0000\u0000\u0000\u0659\u0669\u0001\u0000\u0000"+
		"\u0000\u065a\u065b\u0005\u00ed\u0000\u0000\u065b\u065c\u0005*\u0000\u0000"+
		"\u065c\u0669\u0005\u029b\u0000\u0000\u065d\u065f\u0005\u001e\u0000\u0000"+
		"\u065e\u0660\u0003\u0236\u011b\u0000\u065f\u065e\u0001\u0000\u0000\u0000"+
		"\u065f\u0660\u0001\u0000\u0000\u0000\u0660\u0662\u0001\u0000\u0000\u0000"+
		"\u0661\u065d\u0001\u0000\u0000\u0000\u0661\u0662\u0001\u0000\u0000\u0000"+
		"\u0662\u0663\u0001\u0000\u0000\u0000\u0663\u0664\u0005\u001a\u0000\u0000"+
		"\u0664\u0665\u0005\u0466\u0000\u0000\u0665\u0666\u0003\u029e\u014f\u0000"+
		"\u0666\u0667\u0005\u0467\u0000\u0000\u0667\u0669\u0001\u0000\u0000\u0000"+
		"\u0668\u0633\u0001\u0000\u0000\u0000\u0668\u0634\u0001\u0000\u0000\u0000"+
		"\u0668\u0636\u0001\u0000\u0000\u0000\u0668\u0637\u0001\u0000\u0000\u0000"+
		"\u0668\u063c\u0001\u0000\u0000\u0000\u0668\u063f\u0001\u0000\u0000\u0000"+
		"\u0668\u0642\u0001\u0000\u0000\u0000\u0668\u0646\u0001\u0000\u0000\u0000"+
		"\u0668\u0648\u0001\u0000\u0000\u0000\u0668\u064a\u0001\u0000\u0000\u0000"+
		"\u0668\u064c\u0001\u0000\u0000\u0000\u0668\u064d\u0001\u0000\u0000\u0000"+
		"\u0668\u0651\u0001\u0000\u0000\u0000\u0668\u065a\u0001\u0000\u0000\u0000"+
		"\u0668\u0661\u0001\u0000\u0000\u0000\u0669]\u0001\u0000\u0000\u0000\u066a"+
		"\u066c\u0005\u001e\u0000\u0000\u066b\u066d\u0003\u0236\u011b\u0000\u066c"+
		"\u066b\u0001\u0000\u0000\u0000\u066c\u066d\u0001\u0000\u0000\u0000\u066d"+
		"\u066f\u0001\u0000\u0000\u0000\u066e\u066a\u0001\u0000\u0000\u0000\u066e"+
		"\u066f\u0001\u0000\u0000\u0000\u066f\u0670\u0001\u0000\u0000\u0000\u0670"+
		"\u0671\u0005\u0081\u0000\u0000\u0671\u0673\u0005Z\u0000\u0000\u0672\u0674"+
		"\u0003\u0236\u011b\u0000\u0673\u0672\u0001\u0000\u0000\u0000\u0673\u0674"+
		"\u0001\u0000\u0000\u0000\u0674\u0676\u0001\u0000\u0000\u0000\u0675\u0677"+
		"\u0003J%\u0000\u0676\u0675\u0001\u0000\u0000\u0000\u0676\u0677\u0001\u0000"+
		"\u0000\u0000\u0677\u0678\u0001\u0000\u0000\u0000\u0678\u067c\u0003\u025c"+
		"\u012e\u0000\u0679\u067b\u0003L&\u0000\u067a\u0679\u0001\u0000\u0000\u0000"+
		"\u067b\u067e\u0001\u0000\u0000\u0000\u067c\u067a\u0001\u0000\u0000\u0000"+
		"\u067c\u067d\u0001\u0000\u0000\u0000\u067d\u06b0\u0001\u0000\u0000\u0000"+
		"\u067e\u067c\u0001\u0000\u0000\u0000\u067f\u0681\u0005\u001e\u0000\u0000"+
		"\u0680\u0682\u0003\u0236\u011b\u0000\u0681\u0680\u0001\u0000\u0000\u0000"+
		"\u0681\u0682\u0001\u0000\u0000\u0000\u0682\u0684\u0001\u0000\u0000\u0000"+
		"\u0683\u067f\u0001\u0000\u0000\u0000\u0683\u0684\u0001\u0000\u0000\u0000"+
		"\u0684\u0685\u0001\u0000\u0000\u0000\u0685\u0687\u0005\u00b3\u0000\u0000"+
		"\u0686\u0688\u0007\u0014\u0000\u0000\u0687\u0686\u0001\u0000\u0000\u0000"+
		"\u0687\u0688\u0001\u0000\u0000\u0000\u0688\u068a\u0001\u0000\u0000\u0000"+
		"\u0689\u068b\u0003\u0236\u011b\u0000\u068a\u0689\u0001\u0000\u0000\u0000"+
		"\u068a\u068b\u0001\u0000\u0000\u0000\u068b\u068d\u0001\u0000\u0000\u0000"+
		"\u068c\u068e\u0003J%\u0000\u068d\u068c\u0001\u0000\u0000\u0000\u068d\u068e"+
		"\u0001\u0000\u0000\u0000\u068e\u068f\u0001\u0000\u0000\u0000\u068f\u0693"+
		"\u0003\u025c\u012e\u0000\u0690\u0692\u0003L&\u0000\u0691\u0690\u0001\u0000"+
		"\u0000\u0000\u0692\u0695\u0001\u0000\u0000\u0000\u0693\u0691\u0001\u0000"+
		"\u0000\u0000\u0693\u0694\u0001\u0000\u0000\u0000\u0694\u06b0\u0001\u0000"+
		"\u0000\u0000\u0695\u0693\u0001\u0000\u0000\u0000\u0696\u0698\u0005\u001e"+
		"\u0000\u0000\u0697\u0699\u0003\u0236\u011b\u0000\u0698\u0697\u0001\u0000"+
		"\u0000\u0000\u0698\u0699\u0001\u0000\u0000\u0000\u0699\u069b\u0001\u0000"+
		"\u0000\u0000\u069a\u0696\u0001\u0000\u0000\u0000\u069a\u069b\u0001\u0000"+
		"\u0000\u0000\u069b\u069c\u0001\u0000\u0000\u0000\u069c\u069d\u0005B\u0000"+
		"\u0000\u069d\u069f\u0005Z\u0000\u0000\u069e\u06a0\u0003\u0236\u011b\u0000"+
		"\u069f\u069e\u0001\u0000\u0000\u0000\u069f\u06a0\u0001\u0000\u0000\u0000"+
		"\u06a0\u06a1\u0001\u0000\u0000\u0000\u06a1\u06a2\u0003\u025c\u012e\u0000"+
		"\u06a2\u06a3\u0003`0\u0000\u06a3\u06b0\u0001\u0000\u0000\u0000\u06a4\u06a6"+
		"\u0005\u001e\u0000\u0000\u06a5\u06a7\u0003\u0236\u011b\u0000\u06a6\u06a5"+
		"\u0001\u0000\u0000\u0000\u06a6\u06a7\u0001\u0000\u0000\u0000\u06a7\u06a9"+
		"\u0001\u0000\u0000\u0000\u06a8\u06a4\u0001\u0000\u0000\u0000\u06a8\u06a9"+
		"\u0001\u0000\u0000\u0000\u06a9\u06aa\u0001\u0000\u0000\u0000\u06aa\u06ab"+
		"\u0005\u001a\u0000\u0000\u06ab\u06ac\u0005\u0466\u0000\u0000\u06ac\u06ad"+
		"\u0003\u029e\u014f\u0000\u06ad\u06ae\u0005\u0467\u0000\u0000\u06ae\u06b0"+
		"\u0001\u0000\u0000\u0000\u06af\u066e\u0001\u0000\u0000\u0000\u06af\u0683"+
		"\u0001\u0000\u0000\u0000\u06af\u069a\u0001\u0000\u0000\u0000\u06af\u06a8"+
		"\u0001\u0000\u0000\u0000\u06b0_\u0001\u0000\u0000\u0000\u06b1\u06b2\u0005"+
		"\u0087\u0000\u0000\u06b2\u06b4\u0003\u021c\u010e\u0000\u06b3\u06b5\u0003"+
		"\u025c\u012e\u0000\u06b4\u06b3\u0001\u0000\u0000\u0000\u06b4\u06b5\u0001"+
		"\u0000\u0000\u0000\u06b5\u06b8\u0001\u0000\u0000\u0000\u06b6\u06b7\u0005"+
		"l\u0000\u0000\u06b7\u06b9\u0007\u0015\u0000\u0000\u06b8\u06b6\u0001\u0000"+
		"\u0000\u0000\u06b8\u06b9\u0001\u0000\u0000\u0000\u06b9\u06bb\u0001\u0000"+
		"\u0000\u0000\u06ba\u06bc\u0003b1\u0000\u06bb\u06ba\u0001\u0000\u0000\u0000"+
		"\u06bb\u06bc\u0001\u0000\u0000\u0000\u06bca\u0001\u0000\u0000\u0000\u06bd"+
		"\u06be\u0005u\u0000\u0000\u06be\u06bf\u0005,\u0000\u0000\u06bf\u06c3\u0003"+
		"d2\u0000\u06c0\u06c1\u0005u\u0000\u0000\u06c1\u06c2\u0005\u00b6\u0000"+
		"\u0000\u06c2\u06c4\u0003d2\u0000\u06c3\u06c0\u0001\u0000\u0000\u0000\u06c3"+
		"\u06c4\u0001\u0000\u0000\u0000\u06c4\u06ce\u0001\u0000\u0000\u0000\u06c5"+
		"\u06c6\u0005u\u0000\u0000\u06c6\u06c7\u0005\u00b6\u0000\u0000\u06c7\u06cb"+
		"\u0003d2\u0000\u06c8\u06c9\u0005u\u0000\u0000\u06c9\u06ca\u0005,\u0000"+
		"\u0000\u06ca\u06cc\u0003d2\u0000\u06cb\u06c8\u0001\u0000\u0000\u0000\u06cb"+
		"\u06cc\u0001\u0000\u0000\u0000\u06cc\u06ce\u0001\u0000\u0000\u0000\u06cd"+
		"\u06bd\u0001\u0000\u0000\u0000\u06cd\u06c5\u0001\u0000\u0000\u0000\u06ce"+
		"c\u0001\u0000\u0000\u0000\u06cf\u06d6\u0005\u008f\u0000\u0000\u06d0\u06d6"+
		"\u0005\u0015\u0000\u0000\u06d1\u06d2\u0005\u0098\u0000\u0000\u06d2\u06d6"+
		"\u0005s\u0000\u0000\u06d3\u06d4\u0005\u0207\u0000\u0000\u06d4\u06d6\u0005"+
		"\u014b\u0000\u0000\u06d5\u06cf\u0001\u0000\u0000\u0000\u06d5\u06d0\u0001"+
		"\u0000\u0000\u0000\u06d5\u06d1\u0001\u0000\u0000\u0000\u06d5\u06d3\u0001"+
		"\u0000\u0000\u0000\u06d6e\u0001\u0000\u0000\u0000\u06d7\u06d9\u0007\u0014"+
		"\u0000\u0000\u06d8\u06da\u0003\u0236\u011b\u0000\u06d9\u06d8\u0001\u0000"+
		"\u0000\u0000\u06d9\u06da\u0001\u0000\u0000\u0000\u06da\u06dc\u0001\u0000"+
		"\u0000\u0000\u06db\u06dd\u0003J%\u0000\u06dc\u06db\u0001\u0000\u0000\u0000"+
		"\u06dc\u06dd\u0001\u0000\u0000\u0000\u06dd\u06de\u0001\u0000\u0000\u0000"+
		"\u06de\u06e2\u0003\u025c\u012e\u0000\u06df\u06e1\u0003L&\u0000\u06e0\u06df"+
		"\u0001\u0000\u0000\u0000\u06e1\u06e4\u0001\u0000\u0000\u0000\u06e2\u06e0"+
		"\u0001\u0000\u0000\u0000\u06e2\u06e3\u0001\u0000\u0000\u0000\u06e3\u06f4"+
		"\u0001\u0000\u0000\u0000\u06e4\u06e2\u0001\u0000\u0000\u0000\u06e5\u06e7"+
		"\u0007\u0016\u0000\u0000\u06e6\u06e8\u0007\u0014\u0000\u0000\u06e7\u06e6"+
		"\u0001\u0000\u0000\u0000\u06e7\u06e8\u0001\u0000\u0000\u0000\u06e8\u06ea"+
		"\u0001\u0000\u0000\u0000\u06e9\u06eb\u0003\u0236\u011b\u0000\u06ea\u06e9"+
		"\u0001\u0000\u0000\u0000\u06ea\u06eb\u0001\u0000\u0000\u0000\u06eb\u06ec"+
		"\u0001\u0000\u0000\u0000\u06ec\u06f0\u0003\u025c\u012e\u0000\u06ed\u06ef"+
		"\u0003L&\u0000\u06ee\u06ed\u0001\u0000\u0000\u0000\u06ef\u06f2\u0001\u0000"+
		"\u0000\u0000\u06f0\u06ee\u0001\u0000\u0000\u0000\u06f0\u06f1\u0001\u0000"+
		"\u0000\u0000\u06f1\u06f4\u0001\u0000\u0000\u0000\u06f2\u06f0\u0001\u0000"+
		"\u0000\u0000\u06f3\u06d7\u0001\u0000\u0000\u0000\u06f3\u06e5\u0001\u0000"+
		"\u0000\u0000\u06f4g\u0001\u0000\u0000\u0000\u06f5\u06f7\u0005\u0197\u0000"+
		"\u0000\u06f6\u06f8\u0005\u045d\u0000\u0000\u06f7\u06f6\u0001\u0000\u0000"+
		"\u0000\u06f7\u06f8\u0001\u0000\u0000\u0000\u06f8\u06fa\u0001\u0000\u0000"+
		"\u0000\u06f9\u06fb\u0003\u022c\u0116\u0000\u06fa\u06f9\u0001\u0000\u0000"+
		"\u0000\u06fa\u06fb\u0001\u0000\u0000\u0000\u06fb\u07af\u0001\u0000\u0000"+
		"\u0000\u06fc\u06fe\u0005\u0366\u0000\u0000\u06fd\u06ff\u0005\u045d\u0000"+
		"\u0000\u06fe\u06fd\u0001\u0000\u0000\u0000\u06fe\u06ff\u0001\u0000\u0000"+
		"\u0000\u06ff\u0700\u0001\u0000\u0000\u0000\u0700\u07af\u0005\u0475\u0000"+
		"\u0000\u0701\u0703\u0005\u0153\u0000\u0000\u0702\u0704\u0005\u045d\u0000"+
		"\u0000\u0703\u0702\u0001\u0000\u0000\u0000\u0703\u0704\u0001\u0000\u0000"+
		"\u0000\u0704\u0705\u0001\u0000\u0000\u0000\u0705\u07af\u0003\u023c\u011e"+
		"\u0000\u0706\u0708\u0005\u0154\u0000\u0000\u0707\u0709\u0005\u045d\u0000"+
		"\u0000\u0708\u0707\u0001\u0000\u0000\u0000\u0708\u0709\u0001\u0000\u0000"+
		"\u0000\u0709\u070a\u0001\u0000\u0000\u0000\u070a\u07af\u0003\u023c\u011e"+
		"\u0000\u070b\u070d\u0005\u0155\u0000\u0000\u070c\u070e\u0005\u045d\u0000"+
		"\u0000\u070d\u070c\u0001\u0000\u0000\u0000\u070d\u070e\u0001\u0000\u0000"+
		"\u0000\u070e\u070f\u0001\u0000\u0000\u0000\u070f\u07af\u0003\u023c\u011e"+
		"\u0000\u0710\u0712\u0005*\u0000\u0000\u0711\u0710\u0001\u0000\u0000\u0000"+
		"\u0711\u0712\u0001\u0000\u0000\u0000\u0712\u0713\u0001\u0000\u0000\u0000"+
		"\u0713\u0715\u0003<\u001e\u0000\u0714\u0716\u0005\u045d\u0000\u0000\u0715"+
		"\u0714\u0001\u0000\u0000\u0000\u0715\u0716\u0001\u0000\u0000\u0000\u0716"+
		"\u0719\u0001\u0000\u0000\u0000\u0717\u071a\u0003\u0228\u0114\u0000\u0718"+
		"\u071a\u0005*\u0000\u0000\u0719\u0717\u0001\u0000\u0000\u0000\u0719\u0718"+
		"\u0001\u0000\u0000\u0000\u071a\u07af\u0001\u0000\u0000\u0000\u071b\u071d"+
		"\u0007\u0017\u0000\u0000\u071c\u071e\u0005\u045d\u0000\u0000\u071d\u071c"+
		"\u0001\u0000\u0000\u0000\u071d\u071e\u0001\u0000\u0000\u0000\u071e\u071f"+
		"\u0001\u0000\u0000\u0000\u071f\u07af\u0007\u0018\u0000\u0000\u0720\u0722"+
		"\u0005*\u0000\u0000\u0721\u0720\u0001\u0000\u0000\u0000\u0721\u0722\u0001"+
		"\u0000\u0000\u0000\u0722\u0723\u0001\u0000\u0000\u0000\u0723\u0725\u0005"+
		"\u001b\u0000\u0000\u0724\u0726\u0005\u045d\u0000\u0000\u0725\u0724\u0001"+
		"\u0000\u0000\u0000\u0725\u0726\u0001\u0000\u0000\u0000\u0726\u0727\u0001"+
		"\u0000\u0000\u0000\u0727\u07af\u0003\u022a\u0115\u0000\u0728\u072a\u0005"+
		"\u016e\u0000\u0000\u0729\u072b\u0005\u045d\u0000\u0000\u072a\u0729\u0001"+
		"\u0000\u0000\u0000\u072a\u072b\u0001\u0000\u0000\u0000\u072b\u072c\u0001"+
		"\u0000\u0000\u0000\u072c\u07af\u0005\u0475\u0000\u0000\u072d\u072f\u0005"+
		"\u0173\u0000\u0000\u072e\u0730\u0005\u045d\u0000\u0000\u072f\u072e\u0001"+
		"\u0000\u0000\u0000\u072f\u0730\u0001\u0000\u0000\u0000\u0730\u0731\u0001"+
		"\u0000\u0000\u0000\u0731\u07af\u0007\u0019\u0000\u0000\u0732\u0734\u0005"+
		"\u0176\u0000\u0000\u0733\u0735\u0005\u045d\u0000\u0000\u0734\u0733\u0001"+
		"\u0000\u0000\u0000\u0734\u0735\u0001\u0000\u0000\u0000\u0735\u0736\u0001"+
		"\u0000\u0000\u0000\u0736\u07af\u0005\u0475\u0000\u0000\u0737\u0738\u0007"+
		"\u001a\u0000\u0000\u0738\u073a\u0005\u0189\u0000\u0000\u0739\u073b\u0005"+
		"\u045d\u0000\u0000\u073a\u0739\u0001\u0000\u0000\u0000\u073a\u073b\u0001"+
		"\u0000\u0000\u0000\u073b\u073c\u0001\u0000\u0000\u0000\u073c\u07af\u0005"+
		"\u0475\u0000\u0000\u073d\u073f\u0005\u0187\u0000\u0000\u073e\u0740\u0005"+
		"\u045d\u0000\u0000\u073f\u073e\u0001\u0000\u0000\u0000\u073f\u0740\u0001"+
		"\u0000\u0000\u0000\u0740\u0741\u0001\u0000\u0000\u0000\u0741\u07af\u0007"+
		"\u0018\u0000\u0000\u0742\u0744\u0005\u0193\u0000\u0000\u0743\u0745\u0005"+
		"\u045d\u0000\u0000\u0744\u0743\u0001\u0000\u0000\u0000\u0744\u0745\u0001"+
		"\u0000\u0000\u0000\u0745\u0746\u0001\u0000\u0000\u0000\u0746\u07af\u0005"+
		"\u0475\u0000\u0000\u0747\u0749\u0007\u001b\u0000\u0000\u0748\u074a\u0005"+
		"\u045d\u0000\u0000\u0749\u0748\u0001\u0000\u0000\u0000\u0749\u074a\u0001"+
		"\u0000\u0000\u0000\u074a\u074b\u0001\u0000\u0000\u0000\u074b\u07af\u0007"+
		"\u0018\u0000\u0000\u074c\u074e\u0007\u001c\u0000\u0000\u074d\u074f\u0005"+
		"\u045d\u0000\u0000\u074e\u074d\u0001\u0000\u0000\u0000\u074e\u074f\u0001"+
		"\u0000\u0000\u0000\u074f\u0750\u0001\u0000\u0000\u0000\u0750\u07af\u0003"+
		"\u023c\u011e\u0000\u0751\u0753\u0005\u0194\u0000\u0000\u0752\u0754\u0005"+
		"\u045d\u0000\u0000\u0753\u0752\u0001\u0000\u0000\u0000\u0753\u0754\u0001"+
		"\u0000\u0000\u0000\u0754\u0755\u0001\u0000\u0000\u0000\u0755\u07af\u0003"+
		"\u023c\u011e\u0000\u0756\u0757\u0005P\u0000\u0000\u0757\u0759\u0005\u0189"+
		"\u0000\u0000\u0758\u075a\u0005\u045d\u0000\u0000\u0759\u0758\u0001\u0000"+
		"\u0000\u0000\u0759\u075a\u0001\u0000\u0000\u0000\u075a\u075b\u0001\u0000"+
		"\u0000\u0000\u075b\u07af\u0005\u0475\u0000\u0000\u075c\u075e\u0005\u01c5"+
		"\u0000\u0000\u075d\u075f\u0005\u045d\u0000\u0000\u075e\u075d\u0001\u0000"+
		"\u0000\u0000\u075e\u075f\u0001\u0000\u0000\u0000\u075f\u0760\u0001\u0000"+
		"\u0000\u0000\u0760\u07af\u0007\u001d\u0000\u0000\u0761\u0763\u0005\u01d1"+
		"\u0000\u0000\u0762\u0764\u0005\u045d\u0000\u0000\u0763\u0762\u0001\u0000"+
		"\u0000\u0000\u0763\u0764\u0001\u0000\u0000\u0000\u0764\u0765\u0001\u0000"+
		"\u0000\u0000\u0765\u07af\u0003\u023e\u011f\u0000\u0766\u0768\u0005\u01f2"+
		"\u0000\u0000\u0767\u0769\u0005\u045d\u0000\u0000\u0768\u0767\u0001\u0000"+
		"\u0000\u0000\u0768\u0769\u0001\u0000\u0000\u0000\u0769\u076a\u0001\u0000"+
		"\u0000\u0000\u076a\u07af\u0003\u023c\u011e\u0000\u076b\u076d\u0005\u01fc"+
		"\u0000\u0000\u076c\u076e\u0005\u045d\u0000\u0000\u076d\u076c\u0001\u0000"+
		"\u0000\u0000\u076d\u076e\u0001\u0000\u0000\u0000\u076e\u076f\u0001\u0000"+
		"\u0000\u0000\u076f\u07af\u0003\u023c\u011e\u0000\u0770\u0772\u0005\u021d"+
		"\u0000\u0000\u0771\u0773\u0005\u045d\u0000\u0000\u0772\u0771\u0001\u0000"+
		"\u0000\u0000\u0772\u0773\u0001\u0000\u0000\u0000\u0773\u0774\u0001\u0000"+
		"\u0000\u0000\u0774\u07af\u0007\r\u0000\u0000\u0775\u0777\u0005\u0225\u0000"+
		"\u0000\u0776\u0778\u0005\u045d\u0000\u0000\u0777\u0776\u0001\u0000\u0000"+
		"\u0000\u0777\u0778\u0001\u0000\u0000\u0000\u0778\u0779\u0001\u0000\u0000"+
		"\u0000\u0779\u07af\u0005\u0475\u0000\u0000\u077a\u077c\u0005\u0258\u0000"+
		"\u0000\u077b\u077d\u0005\u045d\u0000\u0000\u077c\u077b\u0001\u0000\u0000"+
		"\u0000\u077c\u077d\u0001\u0000\u0000\u0000\u077d\u077e\u0001\u0000\u0000"+
		"\u0000\u077e\u07af\u0007\u001e\u0000\u0000\u077f\u0780\u0005\u0273\u0000"+
		"\u0000\u0780\u07af\u0005\u028b\u0000\u0000\u0781\u0783\u0005\u03e2\u0000"+
		"\u0000\u0782\u0784\u0005\u045d\u0000\u0000\u0783\u0782\u0001\u0000\u0000"+
		"\u0000\u0783\u0784\u0001\u0000\u0000\u0000\u0784\u0785\u0001\u0000\u0000"+
		"\u0000\u0785\u07af\u0005\u0475\u0000\u0000\u0786\u0788\u0005\u0275\u0000"+
		"\u0000\u0787\u0789\u0005\u045d\u0000\u0000\u0788\u0787\u0001\u0000\u0000"+
		"\u0000\u0788\u0789\u0001\u0000\u0000\u0000\u0789\u078a\u0001\u0000\u0000"+
		"\u0000\u078a\u07af\u0007\r\u0000\u0000\u078b\u078d\u0005\u0276\u0000\u0000"+
		"\u078c\u078e\u0005\u045d\u0000\u0000\u078d\u078c\u0001\u0000\u0000\u0000"+
		"\u078d\u078e\u0001\u0000\u0000\u0000\u078e\u078f\u0001\u0000\u0000\u0000"+
		"\u078f\u07af\u0007\r\u0000\u0000\u0790\u0792\u0005\u0277\u0000\u0000\u0791"+
		"\u0793\u0005\u045d\u0000\u0000\u0792\u0791\u0001\u0000\u0000\u0000\u0792"+
		"\u0793\u0001\u0000\u0000\u0000\u0793\u0796\u0001\u0000\u0000\u0000\u0794"+
		"\u0797\u0005*\u0000\u0000\u0795\u0797\u0003\u023c\u011e\u0000\u0796\u0794"+
		"\u0001\u0000\u0000\u0000\u0796\u0795\u0001\u0000\u0000\u0000\u0797\u07af"+
		"\u0001\u0000\u0000\u0000\u0798\u0799\u0005\u0285\u0000\u0000\u0799\u079b"+
		"\u0003\u0236\u011b\u0000\u079a\u079c\u0003l6\u0000\u079b\u079a\u0001\u0000"+
		"\u0000\u0000\u079b\u079c\u0001\u0000\u0000\u0000\u079c\u07af\u0001\u0000"+
		"\u0000\u0000\u079d\u079e\u0005\u0286\u0000\u0000\u079e\u079f\u0005\u045d"+
		"\u0000\u0000\u079f\u07af\u0003j5\u0000\u07a0\u07af\u0003l6\u0000\u07a1"+
		"\u07a3\u0005\u028c\u0000\u0000\u07a2\u07a4\u0005\u045d\u0000\u0000\u07a3"+
		"\u07a2\u0001\u0000\u0000\u0000\u07a3\u07a4\u0001\u0000\u0000\u0000\u07a4"+
		"\u07a5\u0001\u0000\u0000\u0000\u07a5\u07af\u0007\u0018\u0000\u0000\u07a6"+
		"\u07a8\u0005\u00b2\u0000\u0000\u07a7\u07a9\u0005\u045d\u0000\u0000\u07a8"+
		"\u07a7\u0001\u0000\u0000\u0000\u07a8\u07a9\u0001\u0000\u0000\u0000\u07a9"+
		"\u07aa\u0001\u0000\u0000\u0000\u07aa\u07ab\u0005\u0466\u0000\u0000\u07ab"+
		"\u07ac\u0003\u025a\u012d\u0000\u07ac\u07ad\u0005\u0467\u0000\u0000\u07ad"+
		"\u07af\u0001\u0000\u0000\u0000\u07ae\u06f5\u0001\u0000\u0000\u0000\u07ae"+
		"\u06fc\u0001\u0000\u0000\u0000\u07ae\u0701\u0001\u0000\u0000\u0000\u07ae"+
		"\u0706\u0001\u0000\u0000\u0000\u07ae\u070b\u0001\u0000\u0000\u0000\u07ae"+
		"\u0711\u0001\u0000\u0000\u0000\u07ae\u071b\u0001\u0000\u0000\u0000\u07ae"+
		"\u0721\u0001\u0000\u0000\u0000\u07ae\u0728\u0001\u0000\u0000\u0000\u07ae"+
		"\u072d\u0001\u0000\u0000\u0000\u07ae\u0732\u0001\u0000\u0000\u0000\u07ae"+
		"\u0737\u0001\u0000\u0000\u0000\u07ae\u073d\u0001\u0000\u0000\u0000\u07ae"+
		"\u0742\u0001\u0000\u0000\u0000\u07ae\u0747\u0001\u0000\u0000\u0000\u07ae"+
		"\u074c\u0001\u0000\u0000\u0000\u07ae\u0751\u0001\u0000\u0000\u0000\u07ae"+
		"\u0756\u0001\u0000\u0000\u0000\u07ae\u075c\u0001\u0000\u0000\u0000\u07ae"+
		"\u0761\u0001\u0000\u0000\u0000\u07ae\u0766\u0001\u0000\u0000\u0000\u07ae"+
		"\u076b\u0001\u0000\u0000\u0000\u07ae\u0770\u0001\u0000\u0000\u0000\u07ae"+
		"\u0775\u0001\u0000\u0000\u0000\u07ae\u077a\u0001\u0000\u0000\u0000\u07ae"+
		"\u077f\u0001\u0000\u0000\u0000\u07ae\u0781\u0001\u0000\u0000\u0000\u07ae"+
		"\u0786\u0001\u0000\u0000\u0000\u07ae\u078b\u0001\u0000\u0000\u0000\u07ae"+
		"\u0790\u0001\u0000\u0000\u0000\u07ae\u0798\u0001\u0000\u0000\u0000\u07ae"+
		"\u079d\u0001\u0000\u0000\u0000\u07ae\u07a0\u0001\u0000\u0000\u0000\u07ae"+
		"\u07a1\u0001\u0000\u0000\u0000\u07ae\u07a6\u0001\u0000\u0000\u0000\u07af"+
		"i\u0001\u0000\u0000\u0000\u07b0\u07b1\u0007\u001f\u0000\u0000\u07b1k\u0001"+
		"\u0000\u0000\u0000\u07b2\u07b3\u0005\u027a\u0000\u0000\u07b3\u07b4\u0007"+
		"\u0012\u0000\u0000\u07b4m\u0001\u0000\u0000\u0000\u07b5\u07b6\u0005\u0080"+
		"\u0000\u0000\u07b6\u07b7\u0005\u0013\u0000\u0000\u07b7\u07ba\u0003p8\u0000"+
		"\u07b8\u07b9\u0005\u0224\u0000\u0000\u07b9\u07bb\u0003\u023c\u011e\u0000"+
		"\u07ba\u07b8\u0001\u0000\u0000\u0000\u07ba\u07bb\u0001\u0000\u0000\u0000"+
		"\u07bb\u07c3\u0001\u0000\u0000\u0000\u07bc\u07bd\u0005\u027f\u0000\u0000"+
		"\u07bd\u07be\u0005\u0013\u0000\u0000\u07be\u07c1\u0003r9\u0000\u07bf\u07c0"+
		"\u0005\u0280\u0000\u0000\u07c0\u07c2\u0003\u023c\u011e\u0000\u07c1\u07bf"+
		"\u0001\u0000\u0000\u0000\u07c1\u07c2\u0001\u0000\u0000\u0000\u07c2\u07c4"+
		"\u0001\u0000\u0000\u0000\u07c3\u07bc\u0001\u0000\u0000\u0000\u07c3\u07c4"+
		"\u0001\u0000\u0000\u0000\u07c4\u07d0\u0001\u0000\u0000\u0000\u07c5\u07c6"+
		"\u0005\u0466\u0000\u0000\u07c6\u07cb\u0003t:\u0000\u07c7\u07c8\u0005\u0468"+
		"\u0000\u0000\u07c8\u07ca\u0003t:\u0000\u07c9\u07c7\u0001\u0000\u0000\u0000"+
		"\u07ca\u07cd\u0001\u0000\u0000\u0000\u07cb\u07c9\u0001\u0000\u0000\u0000"+
		"\u07cb\u07cc\u0001\u0000\u0000\u0000\u07cc\u07ce\u0001\u0000\u0000\u0000"+
		"\u07cd\u07cb\u0001\u0000\u0000\u0000\u07ce\u07cf\u0005\u0467\u0000\u0000"+
		"\u07cf\u07d1\u0001\u0000\u0000\u0000\u07d0\u07c5\u0001\u0000\u0000\u0000"+
		"\u07d0\u07d1\u0001\u0000\u0000\u0000\u07d1o\u0001\u0000\u0000\u0000\u07d2"+
		"\u07d4\u0005c\u0000\u0000\u07d3\u07d2\u0001\u0000\u0000\u0000\u07d3\u07d4"+
		"\u0001\u0000\u0000\u0000\u07d4\u07d5\u0001\u0000\u0000\u0000\u07d5\u07d6"+
		"\u0005\u01b9\u0000\u0000\u07d6\u07d7\u0005\u0466\u0000\u0000\u07d7\u07d8"+
		"\u0003\u029e\u014f\u0000\u07d8\u07d9\u0005\u0467\u0000\u0000\u07d9\u0800"+
		"\u0001\u0000\u0000\u0000\u07da\u07dc\u0005c\u0000\u0000\u07db\u07da\u0001"+
		"\u0000\u0000\u0000\u07db\u07dc\u0001\u0000\u0000\u0000\u07dc\u07dd\u0001"+
		"\u0000\u0000\u0000\u07dd\u07e1\u0005Z\u0000\u0000\u07de\u07df\u0005\u014e"+
		"\u0000\u0000\u07df\u07e0\u0005\u045d\u0000\u0000\u07e0\u07e2\u0007 \u0000"+
		"\u0000\u07e1\u07de\u0001\u0000\u0000\u0000\u07e1\u07e2\u0001\u0000\u0000"+
		"\u0000\u07e2\u07e3\u0001\u0000\u0000\u0000\u07e3\u07e4\u0005\u0466\u0000"+
		"\u0000\u07e4\u07e5\u0003\u0256\u012b\u0000\u07e5\u07e6\u0005\u0467\u0000"+
		"\u0000\u07e6\u0800\u0001\u0000\u0000\u0000\u07e7\u07f1\u0005\u0084\u0000"+
		"\u0000\u07e8\u07e9\u0005\u0466\u0000\u0000\u07e9\u07ea\u0003\u029e\u014f"+
		"\u0000\u07ea\u07eb\u0005\u0467\u0000\u0000\u07eb\u07f2\u0001\u0000\u0000"+
		"\u0000\u07ec\u07ed\u0005\u016b\u0000\u0000\u07ed\u07ee\u0005\u0466\u0000"+
		"\u0000\u07ee\u07ef\u0003\u0256\u012b\u0000\u07ef\u07f0\u0005\u0467\u0000"+
		"\u0000\u07f0\u07f2\u0001\u0000\u0000\u0000\u07f1\u07e8\u0001\u0000\u0000"+
		"\u0000\u07f1\u07ec\u0001\u0000\u0000\u0000\u07f2\u0800\u0001\u0000\u0000"+
		"\u0000\u07f3\u07fd\u0005\u01d7\u0000\u0000\u07f4\u07f5\u0005\u0466\u0000"+
		"\u0000\u07f5\u07f6\u0003\u029e\u014f\u0000\u07f6\u07f7\u0005\u0467\u0000"+
		"\u0000\u07f7\u07fe\u0001\u0000\u0000\u0000\u07f8\u07f9\u0005\u016b\u0000"+
		"\u0000\u07f9\u07fa\u0005\u0466\u0000\u0000\u07fa\u07fb\u0003\u0256\u012b"+
		"\u0000\u07fb\u07fc\u0005\u0467\u0000\u0000\u07fc\u07fe\u0001\u0000\u0000"+
		"\u0000\u07fd\u07f4\u0001\u0000\u0000\u0000\u07fd\u07f8\u0001\u0000\u0000"+
		"\u0000\u07fe\u0800\u0001\u0000\u0000\u0000\u07ff\u07d3\u0001\u0000\u0000"+
		"\u0000\u07ff\u07db\u0001\u0000\u0000\u0000\u07ff\u07e7\u0001\u0000\u0000"+
		"\u0000\u07ff\u07f3\u0001\u0000\u0000\u0000\u0800q\u0001\u0000\u0000\u0000"+
		"\u0801\u0803\u0005c\u0000\u0000\u0802\u0801\u0001\u0000\u0000\u0000\u0802"+
		"\u0803\u0001\u0000\u0000\u0000\u0803\u0804\u0001\u0000\u0000\u0000\u0804"+
		"\u0805\u0005\u01b9\u0000\u0000\u0805\u0806\u0005\u0466\u0000\u0000\u0806"+
		"\u0807\u0003\u029e\u014f\u0000\u0807\u0808\u0005\u0467\u0000\u0000\u0808"+
		"\u0817\u0001\u0000\u0000\u0000\u0809\u080b\u0005c\u0000\u0000\u080a\u0809"+
		"\u0001\u0000\u0000\u0000\u080a\u080b\u0001\u0000\u0000\u0000\u080b\u080c"+
		"\u0001\u0000\u0000\u0000\u080c\u0810\u0005Z\u0000\u0000\u080d\u080e\u0005"+
		"\u014e\u0000\u0000\u080e\u080f\u0005\u045d\u0000\u0000\u080f\u0811\u0007"+
		" \u0000\u0000\u0810\u080d\u0001\u0000\u0000\u0000\u0810\u0811\u0001\u0000"+
		"\u0000\u0000\u0811\u0812\u0001\u0000\u0000\u0000\u0812\u0813\u0005\u0466"+
		"\u0000\u0000\u0813\u0814\u0003\u0256\u012b\u0000\u0814\u0815\u0005\u0467"+
		"\u0000\u0000\u0815\u0817\u0001\u0000\u0000\u0000\u0816\u0802\u0001\u0000"+
		"\u0000\u0000\u0816\u080a\u0001\u0000\u0000\u0000\u0817s\u0001\u0000\u0000"+
		"\u0000\u0818\u0819\u0005\u0080\u0000\u0000\u0819\u081a\u0003\u0236\u011b"+
		"\u0000\u081a\u081b\u0005\u00ba\u0000\u0000\u081b\u081c\u0005\u01d5\u0000"+
		"\u0000\u081c\u081d\u0005\u0289\u0000\u0000\u081d\u081e\u0005\u0466\u0000"+
		"\u0000\u081e\u0823\u0003v;\u0000\u081f\u0820\u0005\u0468\u0000\u0000\u0820"+
		"\u0822\u0003v;\u0000\u0821\u081f\u0001\u0000\u0000\u0000\u0822\u0825\u0001"+
		"\u0000\u0000\u0000\u0823\u0821\u0001\u0000\u0000\u0000\u0823\u0824\u0001"+
		"\u0000\u0000\u0000\u0824\u0826\u0001\u0000\u0000\u0000\u0825\u0823\u0001"+
		"\u0000\u0000\u0000\u0826\u082a\u0005\u0467\u0000\u0000\u0827\u0829\u0003"+
		"|>\u0000\u0828\u0827\u0001\u0000\u0000\u0000\u0829\u082c\u0001\u0000\u0000"+
		"\u0000\u082a\u0828\u0001\u0000\u0000\u0000\u082a\u082b\u0001\u0000\u0000"+
		"\u0000\u082b\u0838\u0001\u0000\u0000\u0000\u082c\u082a\u0001\u0000\u0000"+
		"\u0000\u082d\u082e\u0005\u0466\u0000\u0000\u082e\u0833\u0003z=\u0000\u082f"+
		"\u0830\u0005\u0468\u0000\u0000\u0830\u0832\u0003z=\u0000\u0831\u082f\u0001"+
		"\u0000\u0000\u0000\u0832\u0835\u0001\u0000\u0000\u0000\u0833\u0831\u0001"+
		"\u0000\u0000\u0000\u0833\u0834\u0001\u0000\u0000\u0000\u0834\u0836\u0001"+
		"\u0000\u0000\u0000\u0835\u0833\u0001\u0000\u0000\u0000\u0836\u0837\u0005"+
		"\u0467\u0000\u0000\u0837\u0839\u0001\u0000\u0000\u0000\u0838\u082d\u0001"+
		"\u0000\u0000\u0000\u0838\u0839\u0001\u0000\u0000\u0000\u0839\u08ab\u0001"+
		"\u0000\u0000\u0000\u083a\u083b\u0005\u0080\u0000\u0000\u083b\u083c\u0003"+
		"\u0236\u011b\u0000\u083c\u083d\u0005\u00ba\u0000\u0000\u083d\u083e\u0005"+
		"\u01d5\u0000\u0000\u083e\u083f\u0005\u0289\u0000\u0000\u083f\u0843\u0003"+
		"v;\u0000\u0840\u0842\u0003|>\u0000\u0841\u0840\u0001\u0000\u0000\u0000"+
		"\u0842\u0845\u0001\u0000\u0000\u0000\u0843\u0841\u0001\u0000\u0000\u0000"+
		"\u0843\u0844\u0001\u0000\u0000\u0000\u0844\u0851\u0001\u0000\u0000\u0000"+
		"\u0845\u0843\u0001\u0000\u0000\u0000\u0846\u0847\u0005\u0466\u0000\u0000"+
		"\u0847\u084c\u0003z=\u0000\u0848\u0849\u0005\u0468\u0000\u0000\u0849\u084b"+
		"\u0003z=\u0000\u084a\u0848\u0001\u0000\u0000\u0000\u084b\u084e\u0001\u0000"+
		"\u0000\u0000\u084c\u084a\u0001\u0000\u0000\u0000\u084c\u084d\u0001\u0000"+
		"\u0000\u0000\u084d\u084f\u0001\u0000\u0000\u0000\u084e\u084c\u0001\u0000"+
		"\u0000\u0000\u084f\u0850\u0005\u0467\u0000\u0000\u0850\u0852\u0001\u0000"+
		"\u0000\u0000\u0851\u0846\u0001\u0000\u0000\u0000\u0851\u0852\u0001\u0000"+
		"\u0000\u0000\u0852\u08ab\u0001\u0000\u0000\u0000\u0853\u0854\u0005\u0080"+
		"\u0000\u0000\u0854\u0855\u0003\u0236\u011b\u0000\u0855\u0856\u0005\u00ba"+
		"\u0000\u0000\u0856\u0857\u0005O\u0000\u0000\u0857\u0858\u0005\u0466\u0000"+
		"\u0000\u0858\u085d\u0003v;\u0000\u0859\u085a\u0005\u0468\u0000\u0000\u085a"+
		"\u085c\u0003v;\u0000\u085b\u0859\u0001\u0000\u0000\u0000\u085c\u085f\u0001"+
		"\u0000\u0000\u0000\u085d\u085b\u0001\u0000\u0000\u0000\u085d\u085e\u0001"+
		"\u0000\u0000\u0000\u085e\u0860\u0001\u0000\u0000\u0000\u085f\u085d\u0001"+
		"\u0000\u0000\u0000\u0860\u0864\u0005\u0467\u0000\u0000\u0861\u0863\u0003"+
		"|>\u0000\u0862\u0861\u0001\u0000\u0000\u0000\u0863\u0866\u0001\u0000\u0000"+
		"\u0000\u0864\u0862\u0001\u0000\u0000\u0000\u0864\u0865\u0001\u0000\u0000"+
		"\u0000\u0865\u0872\u0001\u0000\u0000\u0000\u0866\u0864\u0001\u0000\u0000"+
		"\u0000\u0867\u0868\u0005\u0466\u0000\u0000\u0868\u086d\u0003z=\u0000\u0869"+
		"\u086a\u0005\u0468\u0000\u0000\u086a\u086c\u0003z=\u0000\u086b\u0869\u0001"+
		"\u0000\u0000\u0000\u086c\u086f\u0001\u0000\u0000\u0000\u086d\u086b\u0001"+
		"\u0000\u0000\u0000\u086d\u086e\u0001\u0000\u0000\u0000\u086e\u0870\u0001"+
		"\u0000\u0000\u0000\u086f\u086d\u0001\u0000\u0000\u0000\u0870\u0871\u0005"+
		"\u0467\u0000\u0000\u0871\u0873\u0001\u0000\u0000\u0000\u0872\u0867\u0001"+
		"\u0000\u0000\u0000\u0872\u0873\u0001\u0000\u0000\u0000\u0873\u08ab\u0001"+
		"\u0000\u0000\u0000\u0874\u0875\u0005\u0080\u0000\u0000\u0875\u0876\u0003"+
		"\u0236\u011b\u0000\u0876\u0877\u0005\u00ba\u0000\u0000\u0877\u0878\u0005"+
		"O\u0000\u0000\u0878\u0879\u0005\u0466\u0000\u0000\u0879\u087e\u0003x<"+
		"\u0000\u087a\u087b\u0005\u0468\u0000\u0000\u087b\u087d\u0003x<\u0000\u087c"+
		"\u087a\u0001\u0000\u0000\u0000\u087d\u0880\u0001\u0000\u0000\u0000\u087e"+
		"\u087c\u0001\u0000\u0000\u0000\u087e\u087f\u0001\u0000\u0000\u0000\u087f"+
		"\u0881\u0001\u0000\u0000\u0000\u0880\u087e\u0001\u0000\u0000\u0000\u0881"+
		"\u0885\u0005\u0467\u0000\u0000\u0882\u0884\u0003|>\u0000\u0883\u0882\u0001"+
		"\u0000\u0000\u0000\u0884\u0887\u0001\u0000\u0000\u0000\u0885\u0883\u0001"+
		"\u0000\u0000\u0000\u0885\u0886\u0001\u0000\u0000\u0000\u0886\u0893\u0001"+
		"\u0000\u0000\u0000\u0887\u0885\u0001\u0000\u0000\u0000\u0888\u0889\u0005"+
		"\u0466\u0000\u0000\u0889\u088e\u0003z=\u0000\u088a\u088b\u0005\u0468\u0000"+
		"\u0000\u088b\u088d\u0003z=\u0000\u088c\u088a\u0001\u0000\u0000\u0000\u088d"+
		"\u0890\u0001\u0000\u0000\u0000\u088e\u088c\u0001\u0000\u0000\u0000\u088e"+
		"\u088f\u0001\u0000\u0000\u0000\u088f\u0891\u0001\u0000\u0000\u0000\u0890"+
		"\u088e\u0001\u0000\u0000\u0000\u0891\u0892\u0005\u0467\u0000\u0000\u0892"+
		"\u0894\u0001\u0000\u0000\u0000\u0893\u0888\u0001\u0000\u0000\u0000\u0893"+
		"\u0894\u0001\u0000\u0000\u0000\u0894\u08ab\u0001\u0000\u0000\u0000\u0895"+
		"\u0896\u0005\u0080\u0000\u0000\u0896\u089a\u0003\u0236\u011b\u0000\u0897"+
		"\u0899\u0003|>\u0000\u0898\u0897\u0001\u0000\u0000\u0000\u0899\u089c\u0001"+
		"\u0000\u0000\u0000\u089a\u0898\u0001\u0000\u0000\u0000\u089a\u089b\u0001"+
		"\u0000\u0000\u0000\u089b\u08a8\u0001\u0000\u0000\u0000\u089c\u089a\u0001"+
		"\u0000\u0000\u0000\u089d\u089e\u0005\u0466\u0000\u0000\u089e\u08a3\u0003"+
		"z=\u0000\u089f\u08a0\u0005\u0468\u0000\u0000\u08a0\u08a2\u0003z=\u0000"+
		"\u08a1\u089f\u0001\u0000\u0000\u0000\u08a2\u08a5\u0001\u0000\u0000\u0000"+
		"\u08a3\u08a1\u0001\u0000\u0000\u0000\u08a3\u08a4\u0001\u0000\u0000\u0000"+
		"\u08a4\u08a6\u0001\u0000\u0000\u0000\u08a5\u08a3\u0001\u0000\u0000\u0000"+
		"\u08a6\u08a7\u0005\u0467\u0000\u0000\u08a7\u08a9\u0001\u0000\u0000\u0000"+
		"\u08a8\u089d\u0001\u0000\u0000\u0000\u08a8\u08a9\u0001\u0000\u0000\u0000"+
		"\u08a9\u08ab\u0001\u0000\u0000\u0000\u08aa\u0818\u0001\u0000\u0000\u0000"+
		"\u08aa\u083a\u0001\u0000\u0000\u0000\u08aa\u0853\u0001\u0000\u0000\u0000"+
		"\u08aa\u0874\u0001\u0000\u0000\u0000\u08aa\u0895\u0001\u0000\u0000\u0000"+
		"\u08abu\u0001\u0000\u0000\u0000\u08ac\u08b0\u0003\u0248\u0124\u0000\u08ad"+
		"\u08b0\u0003\u029e\u014f\u0000\u08ae\u08b0\u0005m\u0000\u0000\u08af\u08ac"+
		"\u0001\u0000\u0000\u0000\u08af\u08ad\u0001\u0000\u0000\u0000\u08af\u08ae"+
		"\u0001\u0000\u0000\u0000\u08b0w\u0001\u0000\u0000\u0000\u08b1\u08b2\u0005"+
		"\u0466\u0000\u0000\u08b2\u08b5\u0003v;\u0000\u08b3\u08b4\u0005\u0468\u0000"+
		"\u0000\u08b4\u08b6\u0003v;\u0000\u08b5\u08b3\u0001\u0000\u0000\u0000\u08b6"+
		"\u08b7\u0001\u0000\u0000\u0000\u08b7\u08b5\u0001\u0000\u0000\u0000\u08b7"+
		"\u08b8\u0001\u0000\u0000\u0000\u08b8\u08b9\u0001\u0000\u0000\u0000\u08b9"+
		"\u08ba\u0005\u0467\u0000\u0000\u08bay\u0001\u0000\u0000\u0000\u08bb\u08bc"+
		"\u0005\u027f\u0000\u0000\u08bc\u08c0\u0003\u0236\u011b\u0000\u08bd\u08bf"+
		"\u0003|>\u0000\u08be\u08bd\u0001\u0000\u0000\u0000\u08bf\u08c2\u0001\u0000"+
		"\u0000\u0000\u08c0\u08be\u0001\u0000\u0000\u0000\u08c0\u08c1\u0001\u0000"+
		"\u0000\u0000\u08c1{\u0001\u0000\u0000\u0000\u08c2\u08c0\u0001\u0000\u0000"+
		"\u0000\u08c3\u08c5\u0005*\u0000\u0000\u08c4\u08c3\u0001\u0000\u0000\u0000"+
		"\u08c4\u08c5\u0001\u0000\u0000\u0000\u08c5\u08c7\u0001\u0000\u0000\u0000"+
		"\u08c6\u08c8\u0005\u027a\u0000\u0000\u08c7\u08c6\u0001\u0000\u0000\u0000"+
		"\u08c7\u08c8\u0001\u0000\u0000\u0000\u08c8\u08c9\u0001\u0000\u0000\u0000"+
		"\u08c9\u08cb\u0005\u0197\u0000\u0000\u08ca\u08cc\u0005\u045d\u0000\u0000"+
		"\u08cb\u08ca\u0001\u0000\u0000\u0000\u08cb\u08cc\u0001\u0000\u0000\u0000"+
		"\u08cc\u08cd\u0001\u0000\u0000\u0000\u08cd\u08f4\u0003\u022c\u0116\u0000"+
		"\u08ce\u08d0\u0005\u016e\u0000\u0000\u08cf\u08d1\u0005\u045d\u0000\u0000"+
		"\u08d0\u08cf\u0001\u0000\u0000\u0000\u08d0\u08d1\u0001\u0000\u0000\u0000"+
		"\u08d1\u08d2\u0001\u0000\u0000\u0000\u08d2\u08f4\u0005\u0475\u0000\u0000"+
		"\u08d3\u08d4\u0005\u0182\u0000\u0000\u08d4\u08d6\u0005\u0189\u0000\u0000"+
		"\u08d5\u08d7\u0005\u045d\u0000\u0000\u08d6\u08d5\u0001\u0000\u0000\u0000"+
		"\u08d6\u08d7\u0001\u0000\u0000\u0000\u08d7\u08d8\u0001\u0000\u0000\u0000"+
		"\u08d8\u08f4\u0005\u0475\u0000\u0000\u08d9\u08da\u0005P\u0000\u0000\u08da"+
		"\u08dc\u0005\u0189\u0000\u0000\u08db\u08dd\u0005\u045d\u0000\u0000\u08dc"+
		"\u08db\u0001\u0000\u0000\u0000\u08dc\u08dd\u0001\u0000\u0000\u0000\u08dd"+
		"\u08de\u0001\u0000\u0000\u0000\u08de\u08f4\u0005\u0475\u0000\u0000\u08df"+
		"\u08e1\u0005\u01f2\u0000\u0000\u08e0\u08e2\u0005\u045d\u0000\u0000\u08e1"+
		"\u08e0\u0001\u0000\u0000\u0000\u08e1\u08e2\u0001\u0000\u0000\u0000\u08e2"+
		"\u08e3\u0001\u0000\u0000\u0000\u08e3\u08f4\u0003\u023c\u011e\u0000\u08e4"+
		"\u08e6\u0005\u01fc\u0000\u0000\u08e5\u08e7\u0005\u045d\u0000\u0000\u08e6"+
		"\u08e5\u0001\u0000\u0000\u0000\u08e6\u08e7\u0001\u0000\u0000\u0000\u08e7"+
		"\u08e8\u0001\u0000\u0000\u0000\u08e8\u08f4\u0003\u023c\u011e\u0000\u08e9"+
		"\u08eb\u0005\u0285\u0000\u0000\u08ea\u08ec\u0005\u045d\u0000\u0000\u08eb"+
		"\u08ea\u0001\u0000\u0000\u0000\u08eb\u08ec\u0001\u0000\u0000\u0000\u08ec"+
		"\u08ed\u0001\u0000\u0000\u0000\u08ed\u08f4\u0003\u0236\u011b\u0000\u08ee"+
		"\u08f0\u0005\u020e\u0000\u0000\u08ef\u08f1\u0005\u045d\u0000\u0000\u08f0"+
		"\u08ef\u0001\u0000\u0000\u0000\u08f0\u08f1\u0001\u0000\u0000\u0000\u08f1"+
		"\u08f2\u0001\u0000\u0000\u0000\u08f2\u08f4\u0003\u0236\u011b\u0000\u08f3"+
		"\u08c4\u0001\u0000\u0000\u0000\u08f3\u08ce\u0001\u0000\u0000\u0000\u08f3"+
		"\u08d3\u0001\u0000\u0000\u0000\u08f3\u08d9\u0001\u0000\u0000\u0000\u08f3"+
		"\u08df\u0001\u0000\u0000\u0000\u08f3\u08e4\u0001\u0000\u0000\u0000\u08f3"+
		"\u08e9\u0001\u0000\u0000\u0000\u08f3\u08ee\u0001\u0000\u0000\u0000\u08f4"+
		"}\u0001\u0000\u0000\u0000\u08f5\u08f6\u0005\u0007\u0000\u0000\u08f6\u08f8"+
		"\u0007\u0000\u0000\u0000\u08f7\u08f9\u0003\u0236\u011b\u0000\u08f8\u08f7"+
		"\u0001\u0000\u0000\u0000\u08f8\u08f9\u0001\u0000\u0000\u0000\u08f9\u08fb"+
		"\u0001\u0000\u0000\u0000\u08fa\u08fc\u0003:\u001d\u0000\u08fb\u08fa\u0001"+
		"\u0000\u0000\u0000\u08fc\u08fd\u0001\u0000\u0000\u0000\u08fd\u08fb\u0001"+
		"\u0000\u0000\u0000\u08fd\u08fe\u0001\u0000\u0000\u0000\u08fe\u0908\u0001"+
		"\u0000\u0000\u0000\u08ff\u0900\u0005\u0007\u0000\u0000\u0900\u0901\u0007"+
		"\u0000\u0000\u0000\u0901\u0902\u0003\u0236\u011b\u0000\u0902\u0903\u0005"+
		"\u0296\u0000\u0000\u0903\u0904\u0005\u0182\u0000\u0000\u0904\u0905\u0005"+
		"\u0189\u0000\u0000\u0905\u0906\u0005\u0202\u0000\u0000\u0906\u0908\u0001"+
		"\u0000\u0000\u0000\u0907\u08f5\u0001\u0000\u0000\u0000\u0907\u08ff\u0001"+
		"\u0000\u0000\u0000\u0908\u007f\u0001\u0000\u0000\u0000\u0909\u090b\u0005"+
		"\u0007\u0000\u0000\u090a\u090c\u0003>\u001f\u0000\u090b\u090a\u0001\u0000"+
		"\u0000\u0000\u090b\u090c\u0001\u0000\u0000\u0000\u090c\u090d\u0001\u0000"+
		"\u0000\u0000\u090d\u090e\u0005\u019d\u0000\u0000\u090e\u0912\u0003\u021a"+
		"\u010d\u0000\u090f\u0910\u0005u\u0000\u0000\u0910\u0911\u0005\u025b\u0000"+
		"\u0000\u0911\u0913\u0003@ \u0000\u0912\u090f\u0001\u0000\u0000\u0000\u0912"+
		"\u0913\u0001\u0000\u0000\u0000\u0913\u091a\u0001\u0000\u0000\u0000\u0914"+
		"\u0915\u0005u\u0000\u0000\u0915\u0917\u0005\u0171\u0000\u0000\u0916\u0918"+
		"\u0005q\u0000\u0000\u0917\u0916\u0001\u0000\u0000\u0000\u0917\u0918\u0001"+
		"\u0000\u0000\u0000\u0918\u0919\u0001\u0000\u0000\u0000\u0919\u091b\u0005"+
		"\u022f\u0000\u0000\u091a\u0914\u0001\u0000\u0000\u0000\u091a\u091b\u0001"+
		"\u0000\u0000\u0000\u091b\u091f\u0001\u0000\u0000\u0000\u091c\u091d\u0005"+
		"\u008a\u0000\u0000\u091d\u091e\u0005\u00ad\u0000\u0000\u091e\u0920\u0003"+
		"\u021a\u010d\u0000\u091f\u091c\u0001\u0000\u0000\u0000\u091f\u0920\u0001"+
		"\u0000\u0000\u0000\u0920\u0922\u0001\u0000\u0000\u0000\u0921\u0923\u0003"+
		"H$\u0000\u0922\u0921\u0001\u0000\u0000\u0000\u0922\u0923\u0001\u0000\u0000"+
		"\u0000\u0923\u0926\u0001\u0000\u0000\u0000\u0924\u0925\u0005\u016e\u0000"+
		"\u0000\u0925\u0927\u0005\u0475\u0000\u0000\u0926\u0924\u0001\u0000\u0000"+
		"\u0000\u0926\u0927\u0001\u0000\u0000\u0000\u0927\u092a\u0001\u0000\u0000"+
		"\u0000\u0928\u0929\u0005\u018d\u0000\u0000\u0929\u092b\u0003\u017e\u00bf"+
		"\u0000\u092a\u0928\u0001\u0000\u0000\u0000\u092a\u092b\u0001\u0000\u0000"+
		"\u0000\u092b\u0081\u0001\u0000\u0000\u0000\u092c\u092d\u0005\u0007\u0000"+
		"\u0000\u092d\u092e\u0005\u01b3\u0000\u0000\u092e\u0932\u0003\u021a\u010d"+
		"\u0000\u092f\u0931\u0003R)\u0000\u0930\u092f\u0001\u0000\u0000\u0000\u0931"+
		"\u0934\u0001\u0000\u0000\u0000\u0932\u0930\u0001\u0000\u0000\u0000\u0932"+
		"\u0933\u0001\u0000\u0000\u0000\u0933\u0083\u0001\u0000\u0000\u0000\u0934"+
		"\u0932\u0001\u0000\u0000\u0000\u0935\u0936\u0005\u0007\u0000\u0000\u0936"+
		"\u0937\u0005\u01c7\u0000\u0000\u0937\u0938\u0005\u0255\u0000\u0000\u0938"+
		"\u0939\u0005\u0312\u0000\u0000\u0939\u093a\u0005\u01db\u0000\u0000\u093a"+
		"\u093b\u0005Z\u0000\u0000\u093b\u0085\u0001\u0000\u0000\u0000\u093c\u093d"+
		"\u0005\u0007\u0000\u0000\u093d\u093e\u0005\u01d9\u0000\u0000\u093e\u093f"+
		"\u0005H\u0000\u0000\u093f\u0940\u0003\u0236\u011b\u0000\u0940\u0941\u0005"+
		"\u0005\u0000\u0000\u0941\u0942\u0005\u0291\u0000\u0000\u0942\u0948\u0005"+
		"\u0475\u0000\u0000\u0943\u0945\u0005\u01c3\u0000\u0000\u0944\u0946\u0005"+
		"\u045d\u0000\u0000\u0945\u0944\u0001\u0000\u0000\u0000\u0945\u0946\u0001"+
		"\u0000\u0000\u0000\u0946\u0947\u0001\u0000\u0000\u0000\u0947\u0949\u0003"+
		"\u023e\u011f\u0000\u0948\u0943\u0001\u0000\u0000\u0000\u0948\u0949\u0001"+
		"\u0000\u0000\u0000\u0949\u094b\u0001\u0000\u0000\u0000\u094a\u094c\u0005"+
		"\u02a0\u0000\u0000\u094b\u094a\u0001\u0000\u0000\u0000\u094b\u094c\u0001"+
		"\u0000\u0000\u0000\u094c\u094d\u0001\u0000\u0000\u0000\u094d\u094f\u0005"+
		"\u0197\u0000\u0000\u094e\u0950\u0005\u045d\u0000\u0000\u094f\u094e\u0001"+
		"\u0000\u0000\u0000\u094f\u0950\u0001\u0000\u0000\u0000\u0950\u0951\u0001"+
		"\u0000\u0000\u0000\u0951\u0952\u0003\u022c\u0116\u0000\u0952\u0087\u0001"+
		"\u0000\u0000\u0000\u0953\u0954\u0005\u0007\u0000\u0000\u0954\u0955\u0005"+
		"\u0082\u0000\u0000\u0955\u0959\u0003\u021a\u010d\u0000\u0956\u0958\u0003"+
		"R)\u0000\u0957\u0956\u0001\u0000\u0000\u0000\u0958\u095b\u0001\u0000\u0000"+
		"\u0000\u0959\u0957\u0001\u0000\u0000\u0000\u0959\u095a\u0001\u0000\u0000"+
		"\u0000\u095a\u0089\u0001\u0000\u0000\u0000\u095b\u0959\u0001\u0000\u0000"+
		"\u0000\u095c\u095d\u0005\u0007\u0000\u0000\u095d\u095e\u0005\u025e\u0000"+
		"\u0000\u095e\u095f\u0003\u0236\u011b\u0000\u095f\u0960\u0005\u021b\u0000"+
		"\u0000\u0960\u0961\u0005\u0466\u0000\u0000\u0961\u0966\u0003T*\u0000\u0962"+
		"\u0963\u0005\u0468\u0000\u0000\u0963\u0965\u0003T*\u0000\u0964\u0962\u0001"+
		"\u0000\u0000\u0000\u0965\u0968\u0001\u0000\u0000\u0000\u0966\u0964\u0001"+
		"\u0000\u0000\u0000\u0966\u0967\u0001\u0000\u0000\u0000\u0967\u0969\u0001"+
		"\u0000\u0000\u0000\u0968\u0966\u0001\u0000\u0000\u0000\u0969\u096a\u0005"+
		"\u0467\u0000\u0000\u096a\u008b\u0001\u0000\u0000\u0000\u096b\u096d\u0005"+
		"\u0007\u0000\u0000\u096c\u096e\u0007\u0001\u0000\u0000\u096d\u096c\u0001"+
		"\u0000\u0000\u0000\u096d\u096e\u0001\u0000\u0000\u0000\u096e\u0970\u0001"+
		"\u0000\u0000\u0000\u096f\u0971\u0005M\u0000\u0000\u0970\u096f\u0001\u0000"+
		"\u0000\u0000\u0970\u0971\u0001\u0000\u0000\u0000\u0971\u0972\u0001\u0000"+
		"\u0000\u0000\u0972\u0973\u0005\u00aa\u0000\u0000\u0973\u0975\u0003\u021c"+
		"\u010e\u0000\u0974\u0976\u0003\u0274\u013a\u0000\u0975\u0974\u0001\u0000"+
		"\u0000\u0000\u0975\u0976\u0001\u0000\u0000\u0000\u0976\u097f\u0001\u0000"+
		"\u0000\u0000\u0977\u097c\u0003\u0092I\u0000\u0978\u0979\u0005\u0468\u0000"+
		"\u0000\u0979\u097b\u0003\u0092I\u0000\u097a\u0978\u0001\u0000\u0000\u0000"+
		"\u097b\u097e\u0001\u0000\u0000\u0000\u097c\u097a\u0001\u0000\u0000\u0000"+
		"\u097c\u097d\u0001\u0000\u0000\u0000\u097d\u0980\u0001\u0000\u0000\u0000"+
		"\u097e\u097c\u0001\u0000\u0000\u0000\u097f\u0977\u0001\u0000\u0000\u0000"+
		"\u097f\u0980\u0001\u0000\u0000\u0000\u0980\u0982\u0001\u0000\u0000\u0000"+
		"\u0981\u0983\u0003n7\u0000\u0982\u0981\u0001\u0000\u0000\u0000\u0982\u0983"+
		"\u0001\u0000\u0000\u0000\u0983\u008d\u0001\u0000\u0000\u0000\u0984\u0985"+
		"\u0005\u0007\u0000\u0000\u0985\u0986\u0005\u0285\u0000\u0000\u0986\u0987"+
		"\u0003\u0236\u011b\u0000\u0987\u0988\u0007!\u0000\u0000\u0988\u0989\u0005"+
		"\u0183\u0000\u0000\u0989\u098d\u0005\u0475\u0000\u0000\u098a\u098b\u0005"+
		"\u01c3\u0000\u0000\u098b\u098c\u0005\u045d\u0000\u0000\u098c\u098e\u0003"+
		"\u023e\u011f\u0000\u098d\u098a\u0001\u0000\u0000\u0000\u098d\u098e\u0001"+
		"\u0000\u0000\u0000\u098e\u0990\u0001\u0000\u0000\u0000\u098f\u0991\u0005"+
		"\u02a0\u0000\u0000\u0990\u098f\u0001\u0000\u0000\u0000\u0990\u0991\u0001"+
		"\u0000\u0000\u0000\u0991\u0992\u0001\u0000\u0000\u0000\u0992\u0994\u0005"+
		"\u0197\u0000\u0000\u0993\u0995\u0005\u045d\u0000\u0000\u0994\u0993\u0001"+
		"\u0000\u0000\u0000\u0994\u0995\u0001\u0000\u0000\u0000\u0995\u0996\u0001"+
		"\u0000\u0000\u0000\u0996\u0997\u0003\u022c\u0116\u0000\u0997\u008f\u0001"+
		"\u0000\u0000\u0000\u0998\u099c\u0005\u0007\u0000\u0000\u0999\u099a\u0005"+
		"\u014e\u0000\u0000\u099a\u099b\u0005\u045d\u0000\u0000\u099b\u099d\u0007"+
		"\n\u0000\u0000\u099c\u0999\u0001\u0000\u0000\u0000\u099c\u099d\u0001\u0000"+
		"\u0000\u0000\u099d\u099f\u0001\u0000\u0000\u0000\u099e\u09a0\u0003>\u001f"+
		"\u0000\u099f\u099e\u0001\u0000\u0000\u0000\u099f\u09a0\u0001\u0000\u0000"+
		"\u0000\u09a0\u09a4\u0001\u0000\u0000\u0000\u09a1\u09a2\u0005\u009e\u0000"+
		"\u0000\u09a2\u09a3\u0005\u025c\u0000\u0000\u09a3\u09a5\u0007\u000b\u0000"+
		"\u0000\u09a4\u09a1\u0001\u0000\u0000\u0000\u09a4\u09a5\u0001\u0000\u0000"+
		"\u0000\u09a5\u09a6\u0001\u0000\u0000\u0000\u09a6\u09a7\u0005\u029d\u0000"+
		"\u0000\u09a7\u09ac\u0003\u021a\u010d\u0000\u09a8\u09a9\u0005\u0466\u0000"+
		"\u0000\u09a9\u09aa\u0003\u0256\u012b\u0000\u09aa\u09ab\u0005\u0467\u0000"+
		"\u0000\u09ab\u09ad\u0001\u0000\u0000\u0000\u09ac\u09a8\u0001\u0000\u0000"+
		"\u0000\u09ac\u09ad\u0001\u0000\u0000\u0000\u09ad\u09ae\u0001\u0000\u0000"+
		"\u0000\u09ae\u09af\u0005\f\u0000\u0000\u09af\u09b6\u0003\u00c4b\u0000"+
		"\u09b0\u09b2\u0005\u00be\u0000\u0000\u09b1\u09b3\u0007\f\u0000\u0000\u09b2"+
		"\u09b1\u0001\u0000\u0000\u0000\u09b2\u09b3\u0001\u0000\u0000\u0000\u09b3"+
		"\u09b4\u0001\u0000\u0000\u0000\u09b4\u09b5\u0005\u001a\u0000\u0000\u09b5"+
		"\u09b7\u0005w\u0000\u0000\u09b6\u09b0\u0001\u0000\u0000\u0000\u09b6\u09b7"+
		"\u0001\u0000\u0000\u0000\u09b7\u0091\u0001\u0000\u0000\u0000\u09b8\u09bf"+
		"\u0003h4\u0000\u09b9\u09bb\u0005\u0468\u0000\u0000\u09ba\u09b9\u0001\u0000"+
		"\u0000\u0000\u09ba\u09bb\u0001\u0000\u0000\u0000\u09bb\u09bc\u0001\u0000"+
		"\u0000\u0000\u09bc\u09be\u0003h4\u0000\u09bd\u09ba\u0001\u0000\u0000\u0000"+
		"\u09be\u09c1\u0001\u0000\u0000\u0000\u09bf\u09bd\u0001\u0000\u0000\u0000"+
		"\u09bf\u09c0\u0001\u0000\u0000\u0000\u09c0\u0b36\u0001\u0000\u0000\u0000"+
		"\u09c1\u09bf\u0001\u0000\u0000\u0000\u09c2\u09c4\u0005\u0005\u0000\u0000"+
		"\u09c3\u09c5\u0005\u001c\u0000\u0000\u09c4\u09c3\u0001\u0000\u0000\u0000"+
		"\u09c4\u09c5\u0001\u0000\u0000\u0000\u09c5\u09c6\u0001\u0000\u0000\u0000"+
		"\u09c6\u09c7\u0003\u0236\u011b\u0000\u09c7\u09cb\u0003Z-\u0000\u09c8\u09cc"+
		"\u0005\u01ac\u0000\u0000\u09c9\u09ca\u0005\u014c\u0000\u0000\u09ca\u09cc"+
		"\u0003\u0236\u011b\u0000\u09cb\u09c8\u0001\u0000\u0000\u0000\u09cb\u09c9"+
		"\u0001\u0000\u0000\u0000\u09cb\u09cc\u0001\u0000\u0000\u0000\u09cc\u0b36"+
		"\u0001\u0000\u0000\u0000\u09cd\u09cf\u0005\u0005\u0000\u0000\u09ce\u09d0"+
		"\u0005\u001c\u0000\u0000\u09cf\u09ce\u0001\u0000\u0000\u0000\u09cf\u09d0"+
		"\u0001\u0000\u0000\u0000\u09d0\u09d1\u0001\u0000\u0000\u0000\u09d1\u09d2"+
		"\u0005\u0466\u0000\u0000\u09d2\u09d3\u0003\u0236\u011b\u0000\u09d3\u09da"+
		"\u0003Z-\u0000\u09d4\u09d5\u0005\u0468\u0000\u0000\u09d5\u09d6\u0003\u0236"+
		"\u011b\u0000\u09d6\u09d7\u0003Z-\u0000\u09d7\u09d9\u0001\u0000\u0000\u0000"+
		"\u09d8\u09d4\u0001\u0000\u0000\u0000\u09d9\u09dc\u0001\u0000\u0000\u0000"+
		"\u09da\u09d8\u0001\u0000\u0000\u0000\u09da\u09db\u0001\u0000\u0000\u0000"+
		"\u09db\u09dd\u0001\u0000\u0000\u0000\u09dc\u09da\u0001\u0000\u0000\u0000"+
		"\u09dd\u09de\u0005\u0467\u0000\u0000\u09de\u0b36\u0001\u0000\u0000\u0000"+
		"\u09df\u09e0\u0005\u0005\u0000\u0000\u09e0\u09e2\u0007\u0014\u0000\u0000"+
		"\u09e1\u09e3\u0003\u0236\u011b\u0000\u09e2\u09e1\u0001\u0000\u0000\u0000"+
		"\u09e2\u09e3\u0001\u0000\u0000\u0000\u09e3\u09e5\u0001\u0000\u0000\u0000"+
		"\u09e4\u09e6\u0003J%\u0000\u09e5\u09e4\u0001\u0000\u0000\u0000\u09e5\u09e6"+
		"\u0001\u0000\u0000\u0000\u09e6\u09e7\u0001\u0000\u0000\u0000\u09e7\u09eb"+
		"\u0003\u025c\u012e\u0000\u09e8\u09ea\u0003L&\u0000\u09e9\u09e8\u0001\u0000"+
		"\u0000\u0000\u09ea\u09ed\u0001\u0000\u0000\u0000\u09eb\u09e9\u0001\u0000"+
		"\u0000\u0000\u09eb\u09ec\u0001\u0000\u0000\u0000\u09ec\u0b36\u0001\u0000"+
		"\u0000\u0000\u09ed\u09eb\u0001\u0000\u0000\u0000\u09ee\u09f3\u0005\u0005"+
		"\u0000\u0000\u09ef\u09f1\u0005\u001e\u0000\u0000\u09f0\u09f2\u0003\u0236"+
		"\u011b\u0000\u09f1\u09f0\u0001\u0000\u0000\u0000\u09f1\u09f2\u0001\u0000"+
		"\u0000\u0000\u09f2\u09f4\u0001\u0000\u0000\u0000\u09f3\u09ef\u0001\u0000"+
		"\u0000\u0000\u09f3\u09f4\u0001\u0000\u0000\u0000\u09f4\u09f5\u0001\u0000"+
		"\u0000\u0000\u09f5\u09f6\u0005\u0081\u0000\u0000\u09f6\u09f8\u0005Z\u0000"+
		"\u0000\u09f7\u09f9\u0003\u0236\u011b\u0000\u09f8\u09f7\u0001\u0000\u0000"+
		"\u0000\u09f8\u09f9\u0001\u0000\u0000\u0000\u09f9\u09fb\u0001\u0000\u0000"+
		"\u0000\u09fa\u09fc\u0003J%\u0000\u09fb\u09fa\u0001\u0000\u0000\u0000\u09fb"+
		"\u09fc\u0001\u0000\u0000\u0000\u09fc\u09fd\u0001\u0000\u0000\u0000\u09fd"+
		"\u0a01\u0003\u025c\u012e\u0000\u09fe\u0a00\u0003L&\u0000\u09ff\u09fe\u0001"+
		"\u0000\u0000\u0000\u0a00\u0a03\u0001\u0000\u0000\u0000\u0a01\u09ff\u0001"+
		"\u0000\u0000\u0000\u0a01\u0a02\u0001\u0000\u0000\u0000\u0a02\u0b36\u0001"+
		"\u0000\u0000\u0000\u0a03\u0a01\u0001\u0000\u0000\u0000\u0a04\u0a09\u0005"+
		"\u0005\u0000\u0000\u0a05\u0a07\u0005\u001e\u0000\u0000\u0a06\u0a08\u0003"+
		"\u0236\u011b\u0000\u0a07\u0a06\u0001\u0000\u0000\u0000\u0a07\u0a08\u0001"+
		"\u0000\u0000\u0000\u0a08\u0a0a\u0001\u0000\u0000\u0000\u0a09\u0a05\u0001"+
		"\u0000\u0000\u0000\u0a09\u0a0a\u0001\u0000\u0000\u0000\u0a0a\u0a0b\u0001"+
		"\u0000\u0000\u0000\u0a0b\u0a0d\u0005\u00b3\u0000\u0000\u0a0c\u0a0e\u0007"+
		"\u0014\u0000\u0000\u0a0d\u0a0c\u0001\u0000\u0000\u0000\u0a0d\u0a0e\u0001"+
		"\u0000\u0000\u0000\u0a0e\u0a10\u0001\u0000\u0000\u0000\u0a0f\u0a11\u0003"+
		"\u0236\u011b\u0000\u0a10\u0a0f\u0001\u0000\u0000\u0000\u0a10\u0a11\u0001"+
		"\u0000\u0000\u0000\u0a11\u0a13\u0001\u0000\u0000\u0000\u0a12\u0a14\u0003"+
		"J%\u0000\u0a13\u0a12\u0001\u0000\u0000\u0000\u0a13\u0a14\u0001\u0000\u0000"+
		"\u0000\u0a14\u0a15\u0001\u0000\u0000\u0000\u0a15\u0a19\u0003\u025c\u012e"+
		"\u0000\u0a16\u0a18\u0003L&\u0000\u0a17\u0a16\u0001\u0000\u0000\u0000\u0a18"+
		"\u0a1b\u0001\u0000\u0000\u0000\u0a19\u0a17\u0001\u0000\u0000\u0000\u0a19"+
		"\u0a1a\u0001\u0000\u0000\u0000\u0a1a\u0b36\u0001\u0000\u0000\u0000\u0a1b"+
		"\u0a19\u0001\u0000\u0000\u0000\u0a1c\u0a1d\u0005\u0005\u0000\u0000\u0a1d"+
		"\u0a1f\u0007\u0016\u0000\u0000\u0a1e\u0a20\u0007\u0014\u0000\u0000\u0a1f"+
		"\u0a1e\u0001\u0000\u0000\u0000\u0a1f\u0a20\u0001\u0000\u0000\u0000\u0a20"+
		"\u0a22\u0001\u0000\u0000\u0000\u0a21\u0a23\u0003\u0236\u011b\u0000\u0a22"+
		"\u0a21\u0001\u0000\u0000\u0000\u0a22\u0a23\u0001\u0000\u0000\u0000\u0a23"+
		"\u0a24\u0001\u0000\u0000\u0000\u0a24\u0a28\u0003\u025c\u012e\u0000\u0a25"+
		"\u0a27\u0003L&\u0000\u0a26\u0a25\u0001\u0000\u0000\u0000\u0a27\u0a2a\u0001"+
		"\u0000\u0000\u0000\u0a28\u0a26\u0001\u0000\u0000\u0000\u0a28\u0a29\u0001"+
		"\u0000\u0000\u0000\u0a29\u0b36\u0001\u0000\u0000\u0000\u0a2a\u0a28\u0001"+
		"\u0000\u0000\u0000\u0a2b\u0a30\u0005\u0005\u0000\u0000\u0a2c\u0a2e\u0005"+
		"\u001e\u0000\u0000\u0a2d\u0a2f\u0003\u0236\u011b\u0000\u0a2e\u0a2d\u0001"+
		"\u0000\u0000\u0000\u0a2e\u0a2f\u0001\u0000\u0000\u0000\u0a2f\u0a31\u0001"+
		"\u0000\u0000\u0000\u0a30\u0a2c\u0001\u0000\u0000\u0000\u0a30\u0a31\u0001"+
		"\u0000\u0000\u0000\u0a31\u0a32\u0001\u0000\u0000\u0000\u0a32\u0a33\u0005"+
		"B\u0000\u0000\u0a33\u0a35\u0005Z\u0000\u0000\u0a34\u0a36\u0003\u0236\u011b"+
		"\u0000\u0a35\u0a34\u0001\u0000\u0000\u0000\u0a35\u0a36\u0001\u0000\u0000"+
		"\u0000\u0a36\u0a37\u0001\u0000\u0000\u0000\u0a37\u0a38\u0003\u025c\u012e"+
		"\u0000\u0a38\u0a39\u0003`0\u0000\u0a39\u0b36\u0001\u0000\u0000\u0000\u0a3a"+
		"\u0a3f\u0005\u0005\u0000\u0000\u0a3b\u0a3d\u0005\u001e\u0000\u0000\u0a3c"+
		"\u0a3e\u0003\u0236\u011b\u0000\u0a3d\u0a3c\u0001\u0000\u0000\u0000\u0a3d"+
		"\u0a3e\u0001\u0000\u0000\u0000\u0a3e\u0a40\u0001\u0000\u0000\u0000\u0a3f"+
		"\u0a3b\u0001\u0000\u0000\u0000\u0a3f\u0a40\u0001\u0000\u0000\u0000\u0a40"+
		"\u0a41\u0001\u0000\u0000\u0000\u0a41\u0a42\u0005\u001a\u0000\u0000\u0a42"+
		"\u0a43\u0005\u0466\u0000\u0000\u0a43\u0a44\u0003\u029e\u014f\u0000\u0a44"+
		"\u0a45\u0005\u0467\u0000\u0000\u0a45\u0b36\u0001\u0000\u0000\u0000\u0a46"+
		"\u0a48\u0005\u014e\u0000\u0000\u0a47\u0a49\u0005\u045d\u0000\u0000\u0a48"+
		"\u0a47\u0001\u0000\u0000\u0000\u0a48\u0a49\u0001\u0000\u0000\u0000\u0a49"+
		"\u0a4a\u0001\u0000\u0000\u0000\u0a4a\u0b36\u0007\"\u0000\u0000\u0a4b\u0a4d"+
		"\u0005\u0007\u0000\u0000\u0a4c\u0a4e\u0005\u001c\u0000\u0000\u0a4d\u0a4c"+
		"\u0001\u0000\u0000\u0000\u0a4d\u0a4e\u0001\u0000\u0000\u0000\u0a4e\u0a4f"+
		"\u0001\u0000\u0000\u0000\u0a4f\u0a55\u0003\u0236\u011b\u0000\u0a50\u0a51"+
		"\u0005\u0098\u0000\u0000\u0a51\u0a52\u0005*\u0000\u0000\u0a52\u0a56\u0003"+
		"\u0268\u0134\u0000\u0a53\u0a54\u00053\u0000\u0000\u0a54\u0a56\u0005*\u0000"+
		"\u0000\u0a55\u0a50\u0001\u0000\u0000\u0000\u0a55\u0a53\u0001\u0000\u0000"+
		"\u0000\u0a56\u0b36\u0001\u0000\u0000\u0000\u0a57\u0a59\u0005\u0018\u0000"+
		"\u0000\u0a58\u0a5a\u0005\u001c\u0000\u0000\u0a59\u0a58\u0001\u0000\u0000"+
		"\u0000\u0a59\u0a5a\u0001\u0000\u0000\u0000\u0a5a\u0a5b\u0001\u0000\u0000"+
		"\u0000\u0a5b\u0a5c\u0003\u0236\u011b\u0000\u0a5c\u0a5d\u0003\u0236\u011b"+
		"\u0000\u0a5d\u0a61\u0003Z-\u0000\u0a5e\u0a62\u0005\u01ac\u0000\u0000\u0a5f"+
		"\u0a60\u0005\u014c\u0000\u0000\u0a60\u0a62\u0003\u0236\u011b\u0000\u0a61"+
		"\u0a5e\u0001\u0000\u0000\u0000\u0a61\u0a5f\u0001\u0000\u0000\u0000\u0a61"+
		"\u0a62\u0001\u0000\u0000\u0000\u0a62\u0b36\u0001\u0000\u0000\u0000\u0a63"+
		"\u0a64\u0005\u008a\u0000\u0000\u0a64\u0a65\u0005\u001c\u0000\u0000\u0a65"+
		"\u0a66\u0003\u0236\u011b\u0000\u0a66\u0a67\u0005\u00ad\u0000\u0000\u0a67"+
		"\u0a68\u0003\u0236\u011b\u0000\u0a68\u0b36\u0001\u0000\u0000\u0000\u0a69"+
		"\u0a6b\u0005f\u0000\u0000\u0a6a\u0a6c\u0005\u045d\u0000\u0000\u0a6b\u0a6a"+
		"\u0001\u0000\u0000\u0000\u0a6b\u0a6c\u0001\u0000\u0000\u0000\u0a6c\u0a6d"+
		"\u0001\u0000\u0000\u0000\u0a6d\u0b36\u0007\u0004\u0000\u0000\u0a6e\u0a70"+
		"\u0005\u01fe\u0000\u0000\u0a6f\u0a71\u0005\u001c\u0000\u0000\u0a70\u0a6f"+
		"\u0001\u0000\u0000\u0000\u0a70\u0a71\u0001\u0000\u0000\u0000\u0a71\u0a72"+
		"\u0001\u0000\u0000\u0000\u0a72\u0a73\u0003\u0236\u011b\u0000\u0a73\u0a77"+
		"\u0003Z-\u0000\u0a74\u0a78\u0005\u01ac\u0000\u0000\u0a75\u0a76\u0005\u014c"+
		"\u0000\u0000\u0a76\u0a78\u0003\u0236\u011b\u0000\u0a77\u0a74\u0001\u0000"+
		"\u0000\u0000\u0a77\u0a75\u0001\u0000\u0000\u0000\u0a77\u0a78\u0001\u0000"+
		"\u0000\u0000\u0a78\u0b36\u0001\u0000\u0000\u0000\u0a79\u0a7b\u00053\u0000"+
		"\u0000\u0a7a\u0a7c\u0005\u001c\u0000\u0000\u0a7b\u0a7a\u0001\u0000\u0000"+
		"\u0000\u0a7b\u0a7c\u0001\u0000\u0000\u0000\u0a7c\u0a7d\u0001\u0000\u0000"+
		"\u0000\u0a7d\u0a7f\u0003\u0236\u011b\u0000\u0a7e\u0a80\u0005\u008f\u0000"+
		"\u0000\u0a7f\u0a7e\u0001\u0000\u0000\u0000\u0a7f\u0a80\u0001\u0000\u0000"+
		"\u0000\u0a80\u0b36\u0001\u0000\u0000\u0000\u0a81\u0a82\u00053\u0000\u0000"+
		"\u0a82\u0a83\u0007#\u0000\u0000\u0a83\u0b36\u0003\u0236\u011b\u0000\u0a84"+
		"\u0a85\u00053\u0000\u0000\u0a85\u0a86\u0005\u0081\u0000\u0000\u0a86\u0b36"+
		"\u0005Z\u0000\u0000\u0a87\u0a88\u00053\u0000\u0000\u0a88\u0a89\u0007\u0014"+
		"\u0000\u0000\u0a89\u0b36\u0003\u0236\u011b\u0000\u0a8a\u0a8b\u0005\u008a"+
		"\u0000\u0000\u0a8b\u0a8c\u0007\u0014\u0000\u0000\u0a8c\u0a8d\u0003\u0236"+
		"\u011b\u0000\u0a8d\u0a8e\u0005\u00ad\u0000\u0000\u0a8e\u0a8f\u0003\u0236"+
		"\u011b\u0000\u0a8f\u0b36\u0001\u0000\u0000\u0000\u0a90\u0a91\u0005\u0007"+
		"\u0000\u0000\u0a91\u0a92\u0005P\u0000\u0000\u0a92\u0a93\u0003\u0236\u011b"+
		"\u0000\u0a93\u0a94\u0007\u000f\u0000\u0000\u0a94\u0b36\u0001\u0000\u0000"+
		"\u0000\u0a95\u0a96\u00053\u0000\u0000\u0a96\u0a97\u0005B\u0000\u0000\u0a97"+
		"\u0a98\u0005Z\u0000\u0000\u0a98\u0b36\u0003\u0236\u011b\u0000\u0a99\u0a9a"+
		"\u0005\u018a\u0000\u0000\u0a9a\u0b36\u0005[\u0000\u0000\u0a9b\u0a9c\u0005"+
		"\u0191\u0000\u0000\u0a9c\u0b36\u0005[\u0000\u0000\u0a9d\u0a9f\u0005\u008a"+
		"\u0000\u0000\u0a9e\u0aa0\u0007$\u0000\u0000\u0a9f\u0a9e\u0001\u0000\u0000"+
		"\u0000\u0a9f\u0aa0\u0001\u0000\u0000\u0000\u0aa0\u0aa3\u0001\u0000\u0000"+
		"\u0000\u0aa1\u0aa4\u0003\u0236\u011b\u0000\u0aa2\u0aa4\u0003\u021a\u010d"+
		"\u0000\u0aa3\u0aa1\u0001\u0000\u0000\u0000\u0aa3\u0aa2\u0001\u0000\u0000"+
		"\u0000\u0aa4\u0b36\u0001\u0000\u0000\u0000\u0aa5\u0aa6\u0005{\u0000\u0000"+
		"\u0aa6\u0aa7\u0005\u0013\u0000\u0000\u0aa7\u0b36\u0003\u0256\u012b\u0000"+
		"\u0aa8\u0aa9\u0005 \u0000\u0000\u0aa9\u0aaa\u0005\u00ad\u0000\u0000\u0aaa"+
		"\u0aab\u0005\u0019\u0000\u0000\u0aab\u0aac\u0005\u0098\u0000\u0000\u0aac"+
		"\u0aaf\u0003\u0228\u0114\u0000\u0aad\u0aae\u0005\u001b\u0000\u0000\u0aae"+
		"\u0ab0\u0003\u022a\u0115\u0000\u0aaf\u0aad\u0001\u0000\u0000\u0000\u0aaf"+
		"\u0ab0\u0001\u0000\u0000\u0000\u0ab0\u0b36\u0001\u0000\u0000\u0000\u0ab1"+
		"\u0ab3\u0005*\u0000\u0000\u0ab2\u0ab1\u0001\u0000\u0000\u0000\u0ab2\u0ab3"+
		"\u0001\u0000\u0000\u0000\u0ab3\u0ab4\u0001\u0000\u0000\u0000\u0ab4\u0ab5"+
		"\u0005\u0019\u0000\u0000\u0ab5\u0ab6\u0005\u0098\u0000\u0000\u0ab6\u0ab7"+
		"\u0005\u045d\u0000\u0000\u0ab7\u0abb\u0003\u0228\u0114\u0000\u0ab8\u0ab9"+
		"\u0005\u001b\u0000\u0000\u0ab9\u0aba\u0005\u045d\u0000\u0000\u0aba\u0abc"+
		"\u0003\u022a\u0115\u0000\u0abb\u0ab8\u0001\u0000\u0000\u0000\u0abb\u0abc"+
		"\u0001\u0000\u0000\u0000\u0abc\u0b36\u0001\u0000\u0000\u0000\u0abd\u0abe"+
		"\u0005\u018b\u0000\u0000\u0abe\u0b36\u0005\u0285\u0000\u0000\u0abf\u0ac0"+
		"\u0005\u01c0\u0000\u0000\u0ac0\u0b36\u0005\u0285\u0000\u0000\u0ac1\u0b36"+
		"\u0005A\u0000\u0000\u0ac2\u0ac3\u0007%\u0000\u0000\u0ac3\u0b36\u0005\u029a"+
		"\u0000\u0000\u0ac4\u0ac5\u0005\u0005\u0000\u0000\u0ac5\u0ac6\u0005\u0080"+
		"\u0000\u0000\u0ac6\u0ac7\u0005\u0466\u0000\u0000\u0ac7\u0acc\u0003t:\u0000"+
		"\u0ac8\u0ac9\u0005\u0468\u0000\u0000\u0ac9\u0acb\u0003t:\u0000\u0aca\u0ac8"+
		"\u0001\u0000\u0000\u0000\u0acb\u0ace\u0001\u0000\u0000\u0000\u0acc\u0aca"+
		"\u0001\u0000\u0000\u0000\u0acc\u0acd\u0001\u0000\u0000\u0000\u0acd\u0acf"+
		"\u0001\u0000\u0000\u0000\u0ace\u0acc\u0001\u0000\u0000\u0000\u0acf\u0ad0"+
		"\u0005\u0467\u0000\u0000\u0ad0\u0b36\u0001\u0000\u0000\u0000\u0ad1\u0ad2"+
		"\u00053\u0000\u0000\u0ad2\u0ad3\u0005\u0080\u0000\u0000\u0ad3\u0b36\u0003"+
		"\u0256\u012b\u0000\u0ad4\u0ad5\u0005\u018b\u0000\u0000\u0ad5\u0ad8\u0005"+
		"\u0080\u0000\u0000\u0ad6\u0ad9\u0003\u0256\u012b\u0000\u0ad7\u0ad9\u0005"+
		"\u0006\u0000\u0000\u0ad8\u0ad6\u0001\u0000\u0000\u0000\u0ad8\u0ad7\u0001"+
		"\u0000\u0000\u0000\u0ad9\u0ada\u0001\u0000\u0000\u0000\u0ada\u0b36\u0005"+
		"\u0285\u0000\u0000\u0adb\u0adc\u0005\u01c0\u0000\u0000\u0adc\u0adf\u0005"+
		"\u0080\u0000\u0000\u0add\u0ae0\u0003\u0256\u012b\u0000\u0ade\u0ae0\u0005"+
		"\u0006\u0000\u0000\u0adf\u0add\u0001\u0000\u0000\u0000\u0adf\u0ade\u0001"+
		"\u0000\u0000\u0000\u0ae0\u0ae1\u0001\u0000\u0000\u0000\u0ae1\u0b36\u0005"+
		"\u0285\u0000\u0000\u0ae2\u0ae3\u0005\u028e\u0000\u0000\u0ae3\u0ae6\u0005"+
		"\u0080\u0000\u0000\u0ae4\u0ae7\u0003\u0256\u012b\u0000\u0ae5\u0ae7\u0005"+
		"\u0006\u0000\u0000\u0ae6\u0ae4\u0001\u0000\u0000\u0000\u0ae6\u0ae5\u0001"+
		"\u0000\u0000\u0000\u0ae7\u0b36\u0001\u0000\u0000\u0000\u0ae8\u0ae9\u0005"+
		"\u0169\u0000\u0000\u0ae9\u0aea\u0005\u0080\u0000\u0000\u0aea\u0b36\u0003"+
		"\u023c\u011e\u0000\u0aeb\u0aec\u0005\u0241\u0000\u0000\u0aec\u0aed\u0005"+
		"\u0080\u0000\u0000\u0aed\u0aee\u0003\u0256\u012b\u0000\u0aee\u0aef\u0005"+
		"V\u0000\u0000\u0aef\u0af0\u0005\u0466\u0000\u0000\u0af0\u0af5\u0003t:"+
		"\u0000\u0af1\u0af2\u0005\u0468\u0000\u0000\u0af2\u0af4\u0003t:\u0000\u0af3"+
		"\u0af1\u0001\u0000\u0000\u0000\u0af4\u0af7\u0001\u0000\u0000\u0000\u0af5"+
		"\u0af3\u0001\u0000\u0000\u0000\u0af5\u0af6\u0001\u0000\u0000\u0000\u0af6"+
		"\u0af8\u0001\u0000\u0000\u0000\u0af7\u0af5\u0001\u0000\u0000\u0000\u0af8"+
		"\u0af9\u0005\u0467\u0000\u0000\u0af9\u0b36\u0001\u0000\u0000\u0000\u0afa"+
		"\u0afb\u0005\u01a0\u0000\u0000\u0afb\u0afc\u0005\u0080\u0000\u0000\u0afc"+
		"\u0afd\u0003\u0236\u011b\u0000\u0afd\u0afe\u0005\u00be\u0000\u0000\u0afe"+
		"\u0aff\u0005\u00aa\u0000\u0000\u0aff\u0b02\u0003\u021c\u010e\u0000\u0b00"+
		"\u0b01\u0007%\u0000\u0000\u0b01\u0b03\u0005\u029a\u0000\u0000\u0b02\u0b00"+
		"\u0001\u0000\u0000\u0000\u0b02\u0b03\u0001\u0000\u0000\u0000\u0b03\u0b36"+
		"\u0001\u0000\u0000\u0000\u0b04\u0b05\u0005\t\u0000\u0000\u0b05\u0b08\u0005"+
		"\u0080\u0000\u0000\u0b06\u0b09\u0003\u0256\u012b\u0000\u0b07\u0b09\u0005"+
		"\u0006\u0000\u0000\u0b08\u0b06\u0001\u0000\u0000\u0000\u0b08\u0b07\u0001"+
		"\u0000\u0000\u0000\u0b09\u0b36\u0001\u0000\u0000\u0000\u0b0a\u0b0b\u0005"+
		"\u001a\u0000\u0000\u0b0b\u0b0e\u0005\u0080\u0000\u0000\u0b0c\u0b0f\u0003"+
		"\u0256\u012b\u0000\u0b0d\u0b0f\u0005\u0006\u0000\u0000\u0b0e\u0b0c\u0001"+
		"\u0000\u0000\u0000\u0b0e\u0b0d\u0001\u0000\u0000\u0000\u0b0f\u0b36\u0001"+
		"\u0000\u0000\u0000\u0b10\u0b11\u0005v\u0000\u0000\u0b11\u0b14\u0005\u0080"+
		"\u0000\u0000\u0b12\u0b15\u0003\u0256\u012b\u0000\u0b13\u0b15\u0005\u0006"+
		"\u0000\u0000\u0b14\u0b12\u0001\u0000\u0000\u0000\u0b14\u0b13\u0001\u0000"+
		"\u0000\u0000\u0b15\u0b36\u0001\u0000\u0000\u0000\u0b16\u0b17\u0005\u0237"+
		"\u0000\u0000\u0b17\u0b1a\u0005\u0080\u0000\u0000\u0b18\u0b1b\u0003\u0256"+
		"\u012b\u0000\u0b19\u0b1b\u0005\u0006\u0000\u0000\u0b1a\u0b18\u0001\u0000"+
		"\u0000\u0000\u0b1a\u0b19\u0001\u0000\u0000\u0000\u0b1b\u0b36\u0001\u0000"+
		"\u0000\u0000\u0b1c\u0b1d\u0005\u0242\u0000\u0000\u0b1d\u0b20\u0005\u0080"+
		"\u0000\u0000\u0b1e\u0b21\u0003\u0256\u012b\u0000\u0b1f\u0b21\u0005\u0006"+
		"\u0000\u0000\u0b20\u0b1e\u0001\u0000\u0000\u0000\u0b20\u0b1f\u0001\u0000"+
		"\u0000\u0000\u0b21\u0b36\u0001\u0000\u0000\u0000\u0b22\u0b23\u0005\u0240"+
		"\u0000\u0000\u0b23\u0b36\u0005\u0223\u0000\u0000\u0b24\u0b25\u0005\u0296"+
		"\u0000\u0000\u0b25\u0b36\u0005\u0223\u0000\u0000\u0b26\u0b28\u0005\u0005"+
		"\u0000\u0000\u0b27\u0b29\u0005\u001c\u0000\u0000\u0b28\u0b27\u0001\u0000"+
		"\u0000\u0000\u0b28\u0b29\u0001\u0000\u0000\u0000\u0b29\u0b2a\u0001\u0000"+
		"\u0000\u0000\u0b2a\u0b2b\u0005\u0466\u0000\u0000\u0b2b\u0b30\u0003X,\u0000"+
		"\u0b2c\u0b2d\u0005\u0468\u0000\u0000\u0b2d\u0b2f\u0003X,\u0000\u0b2e\u0b2c"+
		"\u0001\u0000\u0000\u0000\u0b2f\u0b32\u0001\u0000\u0000\u0000\u0b30\u0b2e"+
		"\u0001\u0000\u0000\u0000\u0b30\u0b31\u0001\u0000\u0000\u0000\u0b31\u0b33"+
		"\u0001\u0000\u0000\u0000\u0b32\u0b30\u0001\u0000\u0000\u0000\u0b33\u0b34"+
		"\u0005\u0467\u0000\u0000\u0b34\u0b36\u0001\u0000\u0000\u0000\u0b35\u09b8"+
		"\u0001\u0000\u0000\u0000\u0b35\u09c2\u0001\u0000\u0000\u0000\u0b35\u09cd"+
		"\u0001\u0000\u0000\u0000\u0b35\u09df\u0001\u0000\u0000\u0000\u0b35\u09ee"+
		"\u0001\u0000\u0000\u0000\u0b35\u0a04\u0001\u0000\u0000\u0000\u0b35\u0a1c"+
		"\u0001\u0000\u0000\u0000\u0b35\u0a2b\u0001\u0000\u0000\u0000\u0b35\u0a3a"+
		"\u0001\u0000\u0000\u0000\u0b35\u0a46\u0001\u0000\u0000\u0000\u0b35\u0a4b"+
		"\u0001\u0000\u0000\u0000\u0b35\u0a57\u0001\u0000\u0000\u0000\u0b35\u0a63"+
		"\u0001\u0000\u0000\u0000\u0b35\u0a69\u0001\u0000\u0000\u0000\u0b35\u0a6e"+
		"\u0001\u0000\u0000\u0000\u0b35\u0a79\u0001\u0000\u0000\u0000\u0b35\u0a81"+
		"\u0001\u0000\u0000\u0000\u0b35\u0a84\u0001\u0000\u0000\u0000\u0b35\u0a87"+
		"\u0001\u0000\u0000\u0000\u0b35\u0a8a\u0001\u0000\u0000\u0000\u0b35\u0a90"+
		"\u0001\u0000\u0000\u0000\u0b35\u0a95\u0001\u0000\u0000\u0000\u0b35\u0a99"+
		"\u0001\u0000\u0000\u0000\u0b35\u0a9b\u0001\u0000\u0000\u0000\u0b35\u0a9d"+
		"\u0001\u0000\u0000\u0000\u0b35\u0aa5\u0001\u0000\u0000\u0000\u0b35\u0aa8"+
		"\u0001\u0000\u0000\u0000\u0b35\u0ab2\u0001\u0000\u0000\u0000\u0b35\u0abd"+
		"\u0001\u0000\u0000\u0000\u0b35\u0abf\u0001\u0000\u0000\u0000\u0b35\u0ac1"+
		"\u0001\u0000\u0000\u0000\u0b35\u0ac2\u0001\u0000\u0000\u0000\u0b35\u0ac4"+
		"\u0001\u0000\u0000\u0000\u0b35\u0ad1\u0001\u0000\u0000\u0000\u0b35\u0ad4"+
		"\u0001\u0000\u0000\u0000\u0b35\u0adb\u0001\u0000\u0000\u0000\u0b35\u0ae2"+
		"\u0001\u0000\u0000\u0000\u0b35\u0ae8\u0001\u0000\u0000\u0000\u0b35\u0aeb"+
		"\u0001\u0000\u0000\u0000\u0b35\u0afa\u0001\u0000\u0000\u0000\u0b35\u0b04"+
		"\u0001\u0000\u0000\u0000\u0b35\u0b0a\u0001\u0000\u0000\u0000\u0b35\u0b10"+
		"\u0001\u0000\u0000\u0000\u0b35\u0b16\u0001\u0000\u0000\u0000\u0b35\u0b1c"+
		"\u0001\u0000\u0000\u0000\u0b35\u0b22\u0001\u0000\u0000\u0000\u0b35\u0b24"+
		"\u0001\u0000\u0000\u0000\u0b35\u0b26\u0001\u0000\u0000\u0000\u0b36\u0093"+
		"\u0001\u0000\u0000\u0000\u0b37\u0b38\u00053\u0000\u0000\u0b38\u0b3a\u0007"+
		"\u0000\u0000\u0000\u0b39\u0b3b\u0003\u026e\u0137\u0000\u0b3a\u0b39\u0001"+
		"\u0000\u0000\u0000\u0b3a\u0b3b\u0001\u0000\u0000\u0000\u0b3b\u0b3c\u0001"+
		"\u0000\u0000\u0000\u0b3c\u0b3d\u0003\u0236\u011b\u0000\u0b3d\u0095\u0001"+
		"\u0000\u0000\u0000\u0b3e\u0b3f\u00053\u0000\u0000\u0b3f\u0b41\u0005\u019d"+
		"\u0000\u0000\u0b40\u0b42\u0003\u026e\u0137\u0000\u0b41\u0b40\u0001\u0000"+
		"\u0000\u0000\u0b41\u0b42\u0001\u0000\u0000\u0000\u0b42\u0b43\u0001\u0000"+
		"\u0000\u0000\u0b43\u0b44\u0003\u021a\u010d\u0000\u0b44\u0097\u0001\u0000"+
		"\u0000\u0000\u0b45\u0b46\u00053\u0000\u0000\u0b46\u0b48\u0005P\u0000\u0000"+
		"\u0b47\u0b49\u0007\u0001\u0000\u0000\u0b48\u0b47\u0001\u0000\u0000\u0000"+
		"\u0b48\u0b49\u0001\u0000\u0000\u0000\u0b49\u0b4a\u0001\u0000\u0000\u0000"+
		"\u0b4a\u0b4b\u0003\u0236\u011b\u0000\u0b4b\u0b4c\u0005u\u0000\u0000\u0b4c"+
		"\u0b59\u0003\u021c\u010e\u0000\u0b4d\u0b4f\u0005\u014e\u0000\u0000\u0b4e"+
		"\u0b50\u0005\u045d\u0000\u0000\u0b4f\u0b4e\u0001\u0000\u0000\u0000\u0b4f"+
		"\u0b50\u0001\u0000\u0000\u0000\u0b50\u0b51\u0001\u0000\u0000\u0000\u0b51"+
		"\u0b58\u0007\u0003\u0000\u0000\u0b52\u0b54\u0005f\u0000\u0000\u0b53\u0b55"+
		"\u0005\u045d\u0000\u0000\u0b54\u0b53\u0001\u0000\u0000\u0000\u0b54\u0b55"+
		"\u0001\u0000\u0000\u0000\u0b55\u0b56\u0001\u0000\u0000\u0000\u0b56\u0b58"+
		"\u0007\u0004\u0000\u0000\u0b57\u0b4d\u0001\u0000\u0000\u0000\u0b57\u0b52"+
		"\u0001\u0000\u0000\u0000\u0b58\u0b5b\u0001\u0000\u0000\u0000\u0b59\u0b57"+
		"\u0001\u0000\u0000\u0000\u0b59\u0b5a\u0001\u0000\u0000\u0000\u0b5a\u0099"+
		"\u0001\u0000\u0000\u0000\u0b5b\u0b59\u0001\u0000\u0000\u0000\u0b5c\u0b5d"+
		"\u00053\u0000\u0000\u0b5d\u0b5e\u0005\u01d9\u0000\u0000\u0b5e\u0b5f\u0005"+
		"H\u0000\u0000\u0b5f\u0b60\u0003\u0236\u011b\u0000\u0b60\u0b61\u0005\u0197"+
		"\u0000\u0000\u0b61\u0b62\u0005\u045d\u0000\u0000\u0b62\u0b63\u0003\u022c"+
		"\u0116\u0000\u0b63\u009b\u0001\u0000\u0000\u0000\u0b64\u0b65\u00053\u0000"+
		"\u0000\u0b65\u0b67\u0005\u0082\u0000\u0000\u0b66\u0b68\u0003\u026e\u0137"+
		"\u0000\u0b67\u0b66\u0001\u0000\u0000\u0000\u0b67\u0b68\u0001\u0000\u0000"+
		"\u0000\u0b68\u0b69\u0001\u0000\u0000\u0000\u0b69\u0b6a\u0003\u021a\u010d"+
		"\u0000\u0b6a\u009d\u0001\u0000\u0000\u0000\u0b6b\u0b6c\u00053\u0000\u0000"+
		"\u0b6c\u0b6e\u0005\u01b3\u0000\u0000\u0b6d\u0b6f\u0003\u026e\u0137\u0000"+
		"\u0b6e\u0b6d\u0001\u0000\u0000\u0000\u0b6e\u0b6f\u0001\u0000\u0000\u0000"+
		"\u0b6f\u0b70\u0001\u0000\u0000\u0000\u0b70\u0b71\u0003\u021a\u010d\u0000"+
		"\u0b71\u009f\u0001\u0000\u0000\u0000\u0b72\u0b73\u00053\u0000\u0000\u0b73"+
		"\u0b75\u0005\u025e\u0000\u0000\u0b74\u0b76\u0003\u026e\u0137\u0000\u0b75"+
		"\u0b74\u0001\u0000\u0000\u0000\u0b75\u0b76\u0001\u0000\u0000\u0000\u0b76"+
		"\u0b77\u0001\u0000\u0000\u0000\u0b77\u0b78\u0003\u0236\u011b\u0000\u0b78"+
		"\u00a1\u0001\u0000\u0000\u0000\u0b79\u0b7b\u00053\u0000\u0000\u0b7a\u0b7c"+
		"\u0005\u0287\u0000\u0000\u0b7b\u0b7a\u0001\u0000\u0000\u0000\u0b7b\u0b7c"+
		"\u0001\u0000\u0000\u0000\u0b7c\u0b7d\u0001\u0000\u0000\u0000\u0b7d\u0b7f"+
		"\u0005\u00aa\u0000\u0000\u0b7e\u0b80\u0003\u026e\u0137\u0000\u0b7f\u0b7e"+
		"\u0001\u0000\u0000\u0000\u0b7f\u0b80\u0001\u0000\u0000\u0000\u0b80\u0b81"+
		"\u0001\u0000\u0000\u0000\u0b81\u0b83\u0003\u025a\u012d\u0000\u0b82\u0b84"+
		"\u0007&\u0000\u0000\u0b83\u0b82\u0001\u0000\u0000\u0000\u0b83\u0b84\u0001"+
		"\u0000\u0000\u0000\u0b84\u00a3\u0001\u0000\u0000\u0000\u0b85\u0b86\u0005"+
		"3\u0000\u0000\u0b86\u0b87\u0005\u0285\u0000\u0000\u0b87\u0b8d\u0003\u0236"+
		"\u011b\u0000\u0b88\u0b8a\u0005\u0197\u0000\u0000\u0b89\u0b8b\u0005\u045d"+
		"\u0000\u0000\u0b8a\u0b89\u0001\u0000\u0000\u0000\u0b8a\u0b8b\u0001\u0000"+
		"\u0000\u0000\u0b8b\u0b8c\u0001\u0000\u0000\u0000\u0b8c\u0b8e\u0003\u022c"+
		"\u0116\u0000\u0b8d\u0b88\u0001\u0000\u0000\u0000\u0b8d\u0b8e\u0001\u0000"+
		"\u0000\u0000\u0b8e\u00a5\u0001\u0000\u0000\u0000\u0b8f\u0b90\u00053\u0000"+
		"\u0000\u0b90\u0b92\u0005\u00af\u0000\u0000\u0b91\u0b93\u0003\u026e\u0137"+
		"\u0000\u0b92\u0b91\u0001\u0000\u0000\u0000\u0b92\u0b93\u0001\u0000\u0000"+
		"\u0000\u0b93\u0b94\u0001\u0000\u0000\u0000\u0b94\u0b95\u0003\u021a\u010d"+
		"\u0000\u0b95\u00a7\u0001\u0000\u0000\u0000\u0b96\u0b97\u00053\u0000\u0000"+
		"\u0b97\u0b99\u0005\u029d\u0000\u0000\u0b98\u0b9a\u0003\u026e\u0137\u0000"+
		"\u0b99\u0b98\u0001\u0000\u0000\u0000\u0b99\u0b9a\u0001\u0000\u0000\u0000"+
		"\u0b9a\u0b9b\u0001\u0000\u0000\u0000\u0b9b\u0ba0\u0003\u021a\u010d\u0000"+
		"\u0b9c\u0b9d\u0005\u0468\u0000\u0000\u0b9d\u0b9f\u0003\u021a\u010d\u0000"+
		"\u0b9e\u0b9c\u0001\u0000\u0000\u0000\u0b9f\u0ba2\u0001\u0000\u0000\u0000"+
		"\u0ba0\u0b9e\u0001\u0000\u0000\u0000\u0ba0\u0ba1\u0001\u0000\u0000\u0000"+
		"\u0ba1\u0ba4\u0001\u0000\u0000\u0000\u0ba2\u0ba0\u0001\u0000\u0000\u0000"+
		"\u0ba3\u0ba5\u0007&\u0000\u0000\u0ba4\u0ba3\u0001\u0000\u0000\u0000\u0ba4"+
		"\u0ba5\u0001\u0000\u0000\u0000\u0ba5\u00a9\u0001\u0000\u0000\u0000\u0ba6"+
		"\u0ba7\u00053\u0000\u0000\u0ba7\u0ba9\u0005\u0252\u0000\u0000\u0ba8\u0baa"+
		"\u0003\u026e\u0137\u0000\u0ba9\u0ba8\u0001\u0000\u0000\u0000\u0ba9\u0baa"+
		"\u0001\u0000\u0000\u0000\u0baa\u0bab\u0001\u0000\u0000\u0000\u0bab\u0bb0"+
		"\u0003\u021e\u010f\u0000\u0bac\u0bad\u0005\u0468\u0000\u0000\u0bad\u0baf"+
		"\u0003\u021e\u010f\u0000\u0bae\u0bac\u0001\u0000\u0000\u0000\u0baf\u0bb2"+
		"\u0001\u0000\u0000\u0000\u0bb0\u0bae\u0001\u0000\u0000\u0000\u0bb0\u0bb1"+
		"\u0001\u0000\u0000\u0000\u0bb1\u00ab\u0001\u0000\u0000\u0000\u0bb2\u0bb0"+
		"\u0001\u0000\u0000\u0000\u0bb3\u0bb4\u0005\u0098\u0000\u0000\u0bb4\u0bb5"+
		"\u0005*\u0000\u0000\u0bb5\u0bc0\u0005\u0252\u0000\u0000\u0bb6\u0bc1\u0005"+
		"\u020f\u0000\u0000\u0bb7\u0bc1\u0005\u0006\u0000\u0000\u0bb8\u0bbd\u0003"+
		"\u021e\u010f\u0000\u0bb9\u0bba\u0005\u0468\u0000\u0000\u0bba\u0bbc\u0003"+
		"\u021e\u010f\u0000\u0bbb\u0bb9\u0001\u0000\u0000\u0000\u0bbc\u0bbf\u0001"+
		"\u0000\u0000\u0000\u0bbd\u0bbb\u0001\u0000\u0000\u0000\u0bbd\u0bbe\u0001"+
		"\u0000\u0000\u0000\u0bbe\u0bc1\u0001\u0000\u0000\u0000\u0bbf\u0bbd\u0001"+
		"\u0000\u0000\u0000\u0bc0\u0bb6\u0001\u0000\u0000\u0000\u0bc0\u0bb7\u0001"+
		"\u0000\u0000\u0000\u0bc0\u0bb8\u0001\u0000\u0000\u0000\u0bc1\u0bc2\u0001"+
		"\u0000\u0000\u0000\u0bc2\u0bc5\u0005\u00ad\u0000\u0000\u0bc3\u0bc6\u0003"+
		"\u0224\u0112\u0000\u0bc4\u0bc6\u0003\u0236\u011b\u0000\u0bc5\u0bc3\u0001"+
		"\u0000\u0000\u0000\u0bc5\u0bc4\u0001\u0000\u0000\u0000\u0bc6\u0bce\u0001"+
		"\u0000\u0000\u0000\u0bc7\u0bca\u0005\u0468\u0000\u0000\u0bc8\u0bcb\u0003"+
		"\u0224\u0112\u0000\u0bc9\u0bcb\u0003\u0236\u011b\u0000\u0bca\u0bc8\u0001"+
		"\u0000\u0000\u0000\u0bca\u0bc9\u0001\u0000\u0000\u0000\u0bcb\u0bcd\u0001"+
		"\u0000\u0000\u0000\u0bcc\u0bc7\u0001\u0000\u0000\u0000\u0bcd\u0bd0\u0001"+
		"\u0000\u0000\u0000\u0bce\u0bcc\u0001\u0000\u0000\u0000\u0bce\u0bcf\u0001"+
		"\u0000\u0000\u0000\u0bcf\u0bd5\u0001\u0000\u0000\u0000\u0bd0\u0bce\u0001"+
		"\u0000\u0000\u0000\u0bd1\u0bd2\u0005\u0098\u0000\u0000\u0bd2\u0bd3\u0005"+
		"\u0252\u0000\u0000\u0bd3\u0bd5\u0003\u01ac\u00d6\u0000\u0bd4\u0bb3\u0001"+
		"\u0000\u0000\u0000\u0bd4\u0bd1\u0001\u0000\u0000\u0000\u0bd5\u00ad\u0001"+
		"\u0000\u0000\u0000\u0bd6\u0bd7\u0005\u008a\u0000\u0000\u0bd7\u0bd8\u0005"+
		"\u00aa\u0000\u0000\u0bd8\u0bdd\u0003\u00b0X\u0000\u0bd9\u0bda\u0005\u0468"+
		"\u0000\u0000\u0bda\u0bdc\u0003\u00b0X\u0000\u0bdb\u0bd9\u0001\u0000\u0000"+
		"\u0000\u0bdc\u0bdf\u0001\u0000\u0000\u0000\u0bdd\u0bdb\u0001\u0000\u0000"+
		"\u0000\u0bdd\u0bde\u0001\u0000\u0000\u0000\u0bde\u00af\u0001\u0000\u0000"+
		"\u0000\u0bdf\u0bdd\u0001\u0000\u0000\u0000\u0be0\u0be1\u0003\u021c\u010e"+
		"\u0000\u0be1\u0be2\u0005\u00ad\u0000\u0000\u0be2\u0be3\u0003\u021c\u010e"+
		"\u0000\u0be3\u00b1\u0001\u0000\u0000\u0000\u0be4\u0be6\u0005\u028e\u0000"+
		"\u0000\u0be5\u0be7\u0005\u00aa\u0000\u0000\u0be6\u0be5\u0001\u0000\u0000"+
		"\u0000\u0be6\u0be7\u0001\u0000\u0000\u0000\u0be7\u0be8\u0001\u0000\u0000"+
		"\u0000\u0be8\u0be9\u0003\u021c\u010e\u0000\u0be9\u00b3\u0001\u0000\u0000"+
		"\u0000\u0bea\u0beb\u0005\u0014\u0000\u0000\u0beb\u0bf2\u0003\u021a\u010d"+
		"\u0000\u0bec\u0bef\u0005\u0466\u0000\u0000\u0bed\u0bf0\u0003\u0262\u0131"+
		"\u0000\u0bee\u0bf0\u0003\u025e\u012f\u0000\u0bef\u0bed\u0001\u0000\u0000"+
		"\u0000\u0bef\u0bee\u0001\u0000\u0000\u0000\u0bef\u0bf0\u0001\u0000\u0000"+
		"\u0000\u0bf0\u0bf1\u0001\u0000\u0000\u0000\u0bf1\u0bf3\u0005\u0467\u0000"+
		"\u0000\u0bf2\u0bec\u0001\u0000\u0000\u0000\u0bf2\u0bf3\u0001\u0000\u0000"+
		"\u0000\u0bf3\u00b5\u0001\u0000\u0000\u0000\u0bf4\u0bf7\u0003\u00d2i\u0000"+
		"\u0bf5\u0bf7\u0003\u00d4j\u0000\u0bf6\u0bf4\u0001\u0000\u0000\u0000\u0bf6"+
		"\u0bf5\u0001\u0000\u0000\u0000\u0bf7\u00b7\u0001\u0000\u0000\u0000\u0bf8"+
		"\u0bf9\u0005\u018d\u0000\u0000\u0bf9\u0bfa\u0003\u025e\u012f\u0000\u0bfa"+
		"\u00b9\u0001\u0000\u0000\u0000\u0bfb\u0c00\u0003\u00d6k\u0000\u0bfc\u0c00"+
		"\u0003\u00d8l\u0000\u0bfd\u0c00\u0003\u00dam\u0000\u0bfe\u0c00\u0003\u00dc"+
		"n\u0000\u0bff\u0bfb\u0001\u0000\u0000\u0000\u0bff\u0bfc\u0001\u0000\u0000"+
		"\u0000\u0bff\u0bfd\u0001\u0000\u0000\u0000\u0bff\u0bfe\u0001\u0000\u0000"+
		"\u0000\u0c00\u00bb\u0001\u0000\u0000\u0000\u0c01\u0c03\u0005T\u0000\u0000"+
		"\u0c02\u0c04\u0007\'\u0000\u0000\u0c03\u0c02\u0001\u0000\u0000\u0000\u0c03"+
		"\u0c04\u0001\u0000\u0000\u0000\u0c04\u0c06\u0001\u0000\u0000\u0000\u0c05"+
		"\u0c07\u0005M\u0000\u0000\u0c06\u0c05\u0001\u0000\u0000\u0000\u0c06\u0c07"+
		"\u0001\u0000\u0000\u0000\u0c07\u0c09\u0001\u0000\u0000\u0000\u0c08\u0c0a"+
		"\u0005V\u0000\u0000\u0c09\u0c08\u0001\u0000\u0000\u0000\u0c09\u0c0a\u0001"+
		"\u0000\u0000\u0000\u0c0a\u0c0b\u0001\u0000\u0000\u0000\u0c0b\u0c12\u0003"+
		"\u021c\u010e\u0000\u0c0c\u0c0d\u0005\u0080\u0000\u0000\u0c0d\u0c0f\u0005"+
		"\u0466\u0000\u0000\u0c0e\u0c10\u0003\u0256\u012b\u0000\u0c0f\u0c0e\u0001"+
		"\u0000\u0000\u0000\u0c0f\u0c10\u0001\u0000\u0000\u0000\u0c10\u0c11\u0001"+
		"\u0000\u0000\u0000\u0c11\u0c13\u0005\u0467\u0000\u0000\u0c12\u0c0c\u0001"+
		"\u0000\u0000\u0000\u0c12\u0c13\u0001\u0000\u0000\u0000\u0c13\u0c24\u0001"+
		"\u0000\u0000\u0000\u0c14\u0c15\u0005\u0466\u0000\u0000\u0c15\u0c16\u0003"+
		"\u0258\u012c\u0000\u0c16\u0c17\u0005\u0467\u0000\u0000\u0c17\u0c19\u0001"+
		"\u0000\u0000\u0000\u0c18\u0c14\u0001\u0000\u0000\u0000\u0c18\u0c19\u0001"+
		"\u0000\u0000\u0000\u0c19\u0c1a\u0001\u0000\u0000\u0000\u0c1a\u0c25\u0003"+
		"\u00cae\u0000\u0c1b\u0c1c\u0005\u0098\u0000\u0000\u0c1c\u0c21\u0003\u00cc"+
		"f\u0000\u0c1d\u0c1e\u0005\u0468\u0000\u0000\u0c1e\u0c20\u0003\u00ccf\u0000"+
		"\u0c1f\u0c1d\u0001\u0000\u0000\u0000\u0c20\u0c23\u0001\u0000\u0000\u0000"+
		"\u0c21\u0c1f\u0001\u0000\u0000\u0000\u0c21\u0c22\u0001\u0000\u0000\u0000"+
		"\u0c22\u0c25\u0001\u0000\u0000\u0000\u0c23\u0c21\u0001\u0000\u0000\u0000"+
		"\u0c24\u0c18\u0001\u0000\u0000\u0000\u0c24\u0c1b\u0001\u0000\u0000\u0000"+
		"\u0c25\u0c32\u0001\u0000\u0000\u0000\u0c26\u0c27\u0005u\u0000\u0000\u0c27"+
		"\u0c28\u0005\u018f\u0000\u0000\u0c28\u0c29\u0005Z\u0000\u0000\u0c29\u0c2a"+
		"\u0005\u00b6\u0000\u0000\u0c2a\u0c2f\u0003\u00ccf\u0000\u0c2b\u0c2c\u0005"+
		"\u0468\u0000\u0000\u0c2c\u0c2e\u0003\u00ccf\u0000\u0c2d\u0c2b\u0001\u0000"+
		"\u0000\u0000\u0c2e\u0c31\u0001\u0000\u0000\u0000\u0c2f\u0c2d\u0001\u0000"+
		"\u0000\u0000\u0c2f\u0c30\u0001\u0000\u0000\u0000\u0c30\u0c33\u0001\u0000"+
		"\u0000\u0000\u0c31\u0c2f\u0001\u0000\u0000\u0000\u0c32\u0c26\u0001\u0000"+
		"\u0000\u0000\u0c32\u0c33\u0001\u0000\u0000\u0000\u0c33\u00bd\u0001\u0000"+
		"\u0000\u0000\u0c34\u0c35\u0005e\u0000\u0000\u0c35\u0c37\u0005\u0182\u0000"+
		"\u0000\u0c36\u0c38\u0007(\u0000\u0000\u0c37\u0c36\u0001\u0000\u0000\u0000"+
		"\u0c37\u0c38\u0001\u0000\u0000\u0000\u0c38\u0c3a\u0001\u0000\u0000\u0000"+
		"\u0c39\u0c3b\u0005\u01d8\u0000\u0000\u0c3a\u0c39\u0001\u0000\u0000\u0000"+
		"\u0c3a\u0c3b\u0001\u0000\u0000\u0000\u0c3b\u0c3c\u0001\u0000\u0000\u0000"+
		"\u0c3c\u0c3d\u0005Q\u0000\u0000\u0c3d\u0c3f\u0005\u0475\u0000\u0000\u0c3e"+
		"\u0c40\u0007\u0006\u0000\u0000\u0c3f\u0c3e\u0001\u0000\u0000\u0000\u0c3f"+
		"\u0c40\u0001\u0000\u0000\u0000\u0c40\u0c41\u0001\u0000\u0000\u0000\u0c41"+
		"\u0c42\u0005V\u0000\u0000\u0c42\u0c43\u0005\u00aa\u0000\u0000\u0c43\u0c49"+
		"\u0003\u021c\u010e\u0000\u0c44\u0c45\u0005\u0080\u0000\u0000\u0c45\u0c46"+
		"\u0005\u0466\u0000\u0000\u0c46\u0c47\u0003\u0256\u012b\u0000\u0c47\u0c48"+
		"\u0005\u0467\u0000\u0000\u0c48\u0c4a\u0001\u0000\u0000\u0000\u0c49\u0c44"+
		"\u0001\u0000\u0000\u0000\u0c49\u0c4a\u0001\u0000\u0000\u0000\u0c4a\u0c4e"+
		"\u0001\u0000\u0000\u0000\u0c4b\u0c4c\u0005\u0019\u0000\u0000\u0c4c\u0c4d"+
		"\u0005\u0098\u0000\u0000\u0c4d\u0c4f\u0003\u0228\u0114\u0000\u0c4e\u0c4b"+
		"\u0001\u0000\u0000\u0000\u0c4e\u0c4f\u0001\u0000\u0000\u0000\u0c4f\u0c56"+
		"\u0001\u0000\u0000\u0000\u0c50\u0c52\u0007)\u0000\u0000\u0c51\u0c53\u0003"+
		"\u0112\u0089\u0000\u0c52\u0c51\u0001\u0000\u0000\u0000\u0c53\u0c54\u0001"+
		"\u0000\u0000\u0000\u0c54\u0c52\u0001\u0000\u0000\u0000\u0c54\u0c55\u0001"+
		"\u0000\u0000\u0000\u0c55\u0c57\u0001\u0000\u0000\u0000\u0c56\u0c50\u0001"+
		"\u0000\u0000\u0000\u0c56\u0c57\u0001\u0000\u0000\u0000\u0c57\u0c5e\u0001"+
		"\u0000\u0000\u0000\u0c58\u0c5a\u0005d\u0000\u0000\u0c59\u0c5b\u0003\u0114"+
		"\u008a\u0000\u0c5a\u0c59\u0001\u0000\u0000\u0000\u0c5b\u0c5c\u0001\u0000"+
		"\u0000\u0000\u0c5c\u0c5a\u0001\u0000\u0000\u0000\u0c5c\u0c5d\u0001\u0000"+
		"\u0000\u0000\u0c5d\u0c5f\u0001\u0000\u0000\u0000\u0c5e\u0c58\u0001\u0000"+
		"\u0000\u0000\u0c5e\u0c5f\u0001\u0000\u0000\u0000\u0c5f\u0c64\u0001\u0000"+
		"\u0000\u0000\u0c60\u0c61\u0005M\u0000\u0000\u0c61\u0c62\u0003\u023c\u011e"+
		"\u0000\u0c62\u0c63\u0007*\u0000\u0000\u0c63\u0c65\u0001\u0000\u0000\u0000"+
		"\u0c64\u0c60\u0001\u0000\u0000\u0000\u0c64\u0c65\u0001\u0000\u0000\u0000"+
		"\u0c65\u0c71\u0001\u0000\u0000\u0000\u0c66\u0c67\u0005\u0466\u0000\u0000"+
		"\u0c67\u0c6c\u0003\u00ceg\u0000\u0c68\u0c69\u0005\u0468\u0000\u0000\u0c69"+
		"\u0c6b\u0003\u00ceg\u0000\u0c6a\u0c68\u0001\u0000\u0000\u0000\u0c6b\u0c6e"+
		"\u0001\u0000\u0000\u0000\u0c6c\u0c6a\u0001\u0000\u0000\u0000\u0c6c\u0c6d"+
		"\u0001\u0000\u0000\u0000\u0c6d\u0c6f\u0001\u0000\u0000\u0000\u0c6e\u0c6c"+
		"\u0001\u0000\u0000\u0000\u0c6f\u0c70\u0005\u0467\u0000\u0000\u0c70\u0c72"+
		"\u0001\u0000\u0000\u0000\u0c71\u0c66\u0001\u0000\u0000\u0000\u0c71\u0c72"+
		"\u0001\u0000\u0000\u0000\u0c72\u0c7c\u0001\u0000\u0000\u0000\u0c73\u0c74"+
		"\u0005\u0098\u0000\u0000\u0c74\u0c79\u0003\u00ccf\u0000\u0c75\u0c76\u0005"+
		"\u0468\u0000\u0000\u0c76\u0c78\u0003\u00ccf\u0000\u0c77\u0c75\u0001\u0000"+
		"\u0000\u0000\u0c78\u0c7b\u0001\u0000\u0000\u0000\u0c79\u0c77\u0001\u0000"+
		"\u0000\u0000\u0c79\u0c7a\u0001\u0000\u0000\u0000\u0c7a\u0c7d\u0001\u0000"+
		"\u0000\u0000\u0c7b\u0c79\u0001\u0000\u0000\u0000\u0c7c\u0c73\u0001\u0000"+
		"\u0000\u0000\u0c7c\u0c7d\u0001\u0000\u0000\u0000\u0c7d\u00bf\u0001\u0000"+
		"\u0000\u0000\u0c7e\u0c7f\u0005e\u0000\u0000\u0c7f\u0c81\u0005\u02a8\u0000"+
		"\u0000\u0c80\u0c82\u0007(\u0000\u0000\u0c81\u0c80\u0001\u0000\u0000\u0000"+
		"\u0c81\u0c82\u0001\u0000\u0000\u0000\u0c82\u0c84\u0001\u0000\u0000\u0000"+
		"\u0c83\u0c85\u0005\u01d8\u0000\u0000\u0c84\u0c83\u0001\u0000\u0000\u0000"+
		"\u0c84\u0c85\u0001\u0000\u0000\u0000\u0c85\u0c86\u0001\u0000\u0000\u0000"+
		"\u0c86\u0c87\u0005Q\u0000\u0000\u0c87\u0c89\u0005\u0475\u0000\u0000\u0c88"+
		"\u0c8a\u0007\u0006\u0000\u0000\u0c89\u0c88\u0001\u0000\u0000\u0000\u0c89"+
		"\u0c8a\u0001\u0000\u0000\u0000\u0c8a\u0c8b\u0001\u0000\u0000\u0000\u0c8b"+
		"\u0c8c\u0005V\u0000\u0000\u0c8c\u0c8d\u0005\u00aa\u0000\u0000\u0c8d\u0c91"+
		"\u0003\u021c\u010e\u0000\u0c8e\u0c8f\u0005\u0019\u0000\u0000\u0c8f\u0c90"+
		"\u0005\u0098\u0000\u0000\u0c90\u0c92\u0003\u0228\u0114\u0000\u0c91\u0c8e"+
		"\u0001\u0000\u0000\u0000\u0c91\u0c92\u0001\u0000\u0000\u0000\u0c92\u0c99"+
		"\u0001\u0000\u0000\u0000\u0c93\u0c94\u0005\u0257\u0000\u0000\u0c94\u0c95"+
		"\u0005\u01be\u0000\u0000\u0c95\u0c96\u0005\u0013\u0000\u0000\u0c96\u0c97"+
		"\u0005\u045f\u0000\u0000\u0c97\u0c98\u0005\u0475\u0000\u0000\u0c98\u0c9a"+
		"\u0005\u045e\u0000\u0000\u0c99\u0c93\u0001\u0000\u0000\u0000\u0c99\u0c9a"+
		"\u0001\u0000\u0000\u0000\u0c9a\u0c9f\u0001\u0000\u0000\u0000\u0c9b\u0c9c"+
		"\u0005M\u0000\u0000\u0c9c\u0c9d\u0003\u023c\u011e\u0000\u0c9d\u0c9e\u0007"+
		"*\u0000\u0000\u0c9e\u0ca0\u0001\u0000\u0000\u0000\u0c9f\u0c9b\u0001\u0000"+
		"\u0000\u0000\u0c9f\u0ca0\u0001\u0000\u0000\u0000\u0ca0\u0cac\u0001\u0000"+
		"\u0000\u0000\u0ca1\u0ca2\u0005\u0466\u0000\u0000\u0ca2\u0ca7\u0003\u00ce"+
		"g\u0000\u0ca3\u0ca4\u0005\u0468\u0000\u0000\u0ca4\u0ca6\u0003\u00ceg\u0000"+
		"\u0ca5\u0ca3\u0001\u0000\u0000\u0000\u0ca6\u0ca9\u0001\u0000\u0000\u0000"+
		"\u0ca7\u0ca5\u0001\u0000\u0000\u0000\u0ca7\u0ca8\u0001\u0000\u0000\u0000"+
		"\u0ca8\u0caa\u0001\u0000\u0000\u0000\u0ca9\u0ca7\u0001\u0000\u0000\u0000"+
		"\u0caa\u0cab\u0005\u0467\u0000\u0000\u0cab\u0cad\u0001\u0000\u0000\u0000"+
		"\u0cac\u0ca1\u0001\u0000\u0000\u0000\u0cac\u0cad\u0001\u0000\u0000\u0000"+
		"\u0cad\u0cb7\u0001\u0000\u0000\u0000\u0cae\u0caf\u0005\u0098\u0000\u0000"+
		"\u0caf\u0cb4\u0003\u00ccf\u0000\u0cb0\u0cb1\u0005\u0468\u0000\u0000\u0cb1"+
		"\u0cb3\u0003\u00ccf\u0000\u0cb2\u0cb0\u0001\u0000\u0000\u0000\u0cb3\u0cb6"+
		"\u0001\u0000\u0000\u0000\u0cb4\u0cb2\u0001\u0000\u0000\u0000\u0cb4\u0cb5"+
		"\u0001\u0000\u0000\u0000\u0cb5\u0cb8\u0001\u0000\u0000\u0000\u0cb6\u0cb4"+
		"\u0001\u0000\u0000\u0000\u0cb7\u0cae\u0001\u0000\u0000\u0000\u0cb7\u0cb8"+
		"\u0001\u0000\u0000\u0000\u0cb8\u00c1\u0001\u0000\u0000\u0000\u0cb9\u0cbb"+
		"\u0005\u008c\u0000\u0000\u0cba\u0cbc\u0007+\u0000\u0000\u0cbb\u0cba\u0001"+
		"\u0000\u0000\u0000\u0cbb\u0cbc\u0001\u0000\u0000\u0000\u0cbc\u0cbe\u0001"+
		"\u0000\u0000\u0000\u0cbd\u0cbf\u0005V\u0000\u0000\u0cbe\u0cbd\u0001\u0000"+
		"\u0000\u0000\u0cbe\u0cbf\u0001\u0000\u0000\u0000\u0cbf\u0cc0\u0001\u0000"+
		"\u0000\u0000\u0cc0\u0cc6\u0003\u021c\u010e\u0000\u0cc1\u0cc2\u0005\u0080"+
		"\u0000\u0000\u0cc2\u0cc3\u0005\u0466\u0000\u0000\u0cc3\u0cc4\u0003\u0256"+
		"\u012b\u0000\u0cc4\u0cc5\u0005\u0467\u0000\u0000\u0cc5\u0cc7\u0001\u0000"+
		"\u0000\u0000\u0cc6\u0cc1\u0001\u0000\u0000\u0000\u0cc6\u0cc7\u0001\u0000"+
		"\u0000\u0000\u0cc7\u0cd8\u0001\u0000\u0000\u0000\u0cc8\u0cc9\u0005\u0466"+
		"\u0000\u0000\u0cc9\u0cca\u0003\u0256\u012b\u0000\u0cca\u0ccb\u0005\u0467"+
		"\u0000\u0000\u0ccb\u0ccd\u0001\u0000\u0000\u0000\u0ccc\u0cc8\u0001\u0000"+
		"\u0000\u0000\u0ccc\u0ccd\u0001\u0000\u0000\u0000\u0ccd\u0cce\u0001\u0000"+
		"\u0000\u0000\u0cce\u0cd9\u0003\u00cae\u0000\u0ccf\u0cd0\u0005\u0098\u0000"+
		"\u0000\u0cd0\u0cd5\u0003\u00ccf\u0000\u0cd1\u0cd2\u0005\u0468\u0000\u0000"+
		"\u0cd2\u0cd4\u0003\u00ccf\u0000\u0cd3\u0cd1\u0001\u0000\u0000\u0000\u0cd4"+
		"\u0cd7\u0001\u0000\u0000\u0000\u0cd5\u0cd3\u0001\u0000\u0000\u0000\u0cd5"+
		"\u0cd6\u0001\u0000\u0000\u0000\u0cd6\u0cd9\u0001\u0000\u0000\u0000\u0cd7"+
		"\u0cd5\u0001\u0000\u0000\u0000\u0cd8\u0ccc\u0001\u0000\u0000\u0000\u0cd8"+
		"\u0ccf\u0001\u0000\u0000\u0000\u0cd9\u00c3\u0001\u0000\u0000\u0000\u0cda"+
		"\u0cdc\u0003\u00f6{\u0000\u0cdb\u0cdd\u0003\u00d0h\u0000\u0cdc\u0cdb\u0001"+
		"\u0000\u0000\u0000\u0cdc\u0cdd\u0001\u0000\u0000\u0000\u0cdd\u0d19\u0001"+
		"\u0000\u0000\u0000\u0cde\u0ce0\u0003\u00f2y\u0000\u0cdf\u0ce1\u0003\u00d0"+
		"h\u0000\u0ce0\u0cdf\u0001\u0000\u0000\u0000\u0ce0\u0ce1\u0001\u0000\u0000"+
		"\u0000\u0ce1\u0d19\u0001\u0000\u0000\u0000\u0ce2\u0ce4\u0003\u00f8|\u0000"+
		"\u0ce3\u0ce5\u0003\u00fc~\u0000\u0ce4\u0ce3\u0001\u0000\u0000\u0000\u0ce5"+
		"\u0ce6\u0001\u0000\u0000\u0000\u0ce6\u0ce4\u0001\u0000\u0000\u0000\u0ce6"+
		"\u0ce7\u0001\u0000\u0000\u0000\u0ce7\u0cf0\u0001\u0000\u0000\u0000\u0ce8"+
		"\u0cea\u0005\u00b2\u0000\u0000\u0ce9\u0ceb\u0007,\u0000\u0000\u0cea\u0ce9"+
		"\u0001\u0000\u0000\u0000\u0cea\u0ceb\u0001\u0000\u0000\u0000\u0ceb\u0cee"+
		"\u0001\u0000\u0000\u0000\u0cec\u0cef\u0003\u00f6{\u0000\u0ced\u0cef\u0003"+
		"\u00f2y\u0000\u0cee\u0cec\u0001\u0000\u0000\u0000\u0cee\u0ced\u0001\u0000"+
		"\u0000\u0000\u0cef\u0cf1\u0001\u0000\u0000\u0000\u0cf0\u0ce8\u0001\u0000"+
		"\u0000\u0000\u0cf0\u0cf1\u0001\u0000\u0000\u0000\u0cf1\u0cf3\u0001\u0000"+
		"\u0000\u0000\u0cf2\u0cf4\u0003\u00e2q\u0000\u0cf3\u0cf2\u0001\u0000\u0000"+
		"\u0000\u0cf3\u0cf4\u0001\u0000\u0000\u0000\u0cf4\u0cf6\u0001\u0000\u0000"+
		"\u0000\u0cf5\u0cf7\u0003\u0120\u0090\u0000\u0cf6\u0cf5\u0001\u0000\u0000"+
		"\u0000\u0cf6\u0cf7\u0001\u0000\u0000\u0000\u0cf7\u0cf9\u0001\u0000\u0000"+
		"\u0000\u0cf8\u0cfa\u0003\u00d0h\u0000\u0cf9\u0cf8\u0001\u0000\u0000\u0000"+
		"\u0cf9\u0cfa\u0001\u0000\u0000\u0000\u0cfa\u0d19\u0001\u0000\u0000\u0000"+
		"\u0cfb\u0cfd\u0003\u00f4z\u0000\u0cfc\u0cfe\u0003\u00fa}\u0000\u0cfd\u0cfc"+
		"\u0001\u0000\u0000\u0000\u0cfe\u0cff\u0001\u0000\u0000\u0000\u0cff\u0cfd"+
		"\u0001\u0000\u0000\u0000\u0cff\u0d00\u0001\u0000\u0000\u0000\u0d00\u0d06"+
		"\u0001\u0000\u0000\u0000\u0d01\u0d03\u0005\u00b2\u0000\u0000\u0d02\u0d04"+
		"\u0007,\u0000\u0000\u0d03\u0d02\u0001\u0000\u0000\u0000\u0d03\u0d04\u0001"+
		"\u0000\u0000\u0000\u0d04\u0d05\u0001\u0000\u0000\u0000\u0d05\u0d07\u0003"+
		"\u00f2y\u0000\u0d06\u0d01\u0001\u0000\u0000\u0000\u0d06\u0d07\u0001\u0000"+
		"\u0000\u0000\u0d07\u0d09\u0001\u0000\u0000\u0000\u0d08\u0d0a\u0003\u00e2"+
		"q\u0000\u0d09\u0d08\u0001\u0000\u0000\u0000\u0d09\u0d0a\u0001\u0000\u0000"+
		"\u0000\u0d0a\u0d0c\u0001\u0000\u0000\u0000\u0d0b\u0d0d\u0003\u0120\u0090"+
		"\u0000\u0d0c\u0d0b\u0001\u0000\u0000\u0000\u0d0c\u0d0d\u0001\u0000\u0000"+
		"\u0000\u0d0d\u0d0f\u0001\u0000\u0000\u0000\u0d0e\u0d10\u0003\u00d0h\u0000"+
		"\u0d0f\u0d0e\u0001\u0000\u0000\u0000\u0d0f\u0d10\u0001\u0000\u0000\u0000"+
		"\u0d10\u0d19\u0001\u0000\u0000\u0000\u0d11\u0d14\u0003\u00f8|\u0000\u0d12"+
		"\u0d13\u0005\u0468\u0000\u0000\u0d13\u0d15\u0003\u00fe\u007f\u0000\u0d14"+
		"\u0d12\u0001\u0000\u0000\u0000\u0d15\u0d16\u0001\u0000\u0000\u0000\u0d16"+
		"\u0d14\u0001\u0000\u0000\u0000\u0d16\u0d17\u0001\u0000\u0000\u0000\u0d17"+
		"\u0d19\u0001\u0000\u0000\u0000\u0d18\u0cda\u0001\u0000\u0000\u0000\u0d18"+
		"\u0cde\u0001\u0000\u0000\u0000\u0d18\u0ce2\u0001\u0000\u0000\u0000\u0d18"+
		"\u0cfb\u0001\u0000\u0000\u0000\u0d18\u0d11\u0001\u0000\u0000\u0000\u0d19"+
		"\u00c5\u0001\u0000\u0000\u0000\u0d1a\u0d1d\u0003\u00deo\u0000\u0d1b\u0d1d"+
		"\u0003\u00e0p\u0000\u0d1c\u0d1a\u0001\u0000\u0000\u0000\u0d1c\u0d1b\u0001"+
		"\u0000\u0000\u0000\u0d1d\u00c7\u0001\u0000\u0000\u0000\u0d1e\u0d1f\u0005"+
		"\u00ba\u0000\u0000\u0d1f\u0d21\u0005\u0466\u0000\u0000\u0d20\u0d22\u0003"+
		"\u0260\u0130\u0000\u0d21\u0d20\u0001\u0000\u0000\u0000\u0d21\u0d22\u0001"+
		"\u0000\u0000\u0000\u0d22\u0d23\u0001\u0000\u0000\u0000\u0d23\u0d2c\u0005"+
		"\u0467\u0000\u0000\u0d24\u0d25\u0005\u0468\u0000\u0000\u0d25\u0d27\u0005"+
		"\u0466\u0000\u0000\u0d26\u0d28\u0003\u0260\u0130\u0000\u0d27\u0d26\u0001"+
		"\u0000\u0000\u0000\u0d27\u0d28\u0001\u0000\u0000\u0000\u0d28\u0d29\u0001"+
		"\u0000\u0000\u0000\u0d29\u0d2b\u0005\u0467\u0000\u0000\u0d2a\u0d24\u0001"+
		"\u0000\u0000\u0000\u0d2b\u0d2e\u0001\u0000\u0000\u0000\u0d2c\u0d2a\u0001"+
		"\u0000\u0000\u0000\u0d2c\u0d2d\u0001\u0000\u0000\u0000\u0d2d\u00c9\u0001"+
		"\u0000\u0000\u0000\u0d2e\u0d2c\u0001\u0000\u0000\u0000\u0d2f\u0d42\u0003"+
		"\u00c4b\u0000\u0d30\u0d31\u0007-\u0000\u0000\u0d31\u0d33\u0005\u0466\u0000"+
		"\u0000\u0d32\u0d34\u0003\u0260\u0130\u0000\u0d33\u0d32\u0001\u0000\u0000"+
		"\u0000\u0d33\u0d34\u0001\u0000\u0000\u0000\u0d34\u0d35\u0001\u0000\u0000"+
		"\u0000\u0d35\u0d3e\u0005\u0467\u0000\u0000\u0d36\u0d37\u0005\u0468\u0000"+
		"\u0000\u0d37\u0d39\u0005\u0466\u0000\u0000\u0d38\u0d3a\u0003\u0260\u0130"+
		"\u0000\u0d39\u0d38\u0001\u0000\u0000\u0000\u0d39\u0d3a\u0001\u0000\u0000"+
		"\u0000\u0d3a\u0d3b\u0001\u0000\u0000\u0000\u0d3b\u0d3d\u0005\u0467\u0000"+
		"\u0000\u0d3c\u0d36\u0001\u0000\u0000\u0000\u0d3d\u0d40\u0001\u0000\u0000"+
		"\u0000\u0d3e\u0d3c\u0001\u0000\u0000\u0000\u0d3e\u0d3f\u0001\u0000\u0000"+
		"\u0000\u0d3f\u0d42\u0001\u0000\u0000\u0000\u0d40\u0d3e\u0001\u0000\u0000"+
		"\u0000\u0d41\u0d2f\u0001\u0000\u0000\u0000\u0d41\u0d30\u0001\u0000\u0000"+
		"\u0000\u0d42\u00cb\u0001\u0000\u0000\u0000\u0d43\u0d44\u0003\u0220\u0110"+
		"\u0000\u0d44\u0d47\u0005\u045d\u0000\u0000\u0d45\u0d48\u0003\u029e\u014f"+
		"\u0000\u0d46\u0d48\u0005*\u0000\u0000\u0d47\u0d45\u0001\u0000\u0000\u0000"+
		"\u0d47\u0d46\u0001\u0000\u0000\u0000\u0d48\u00cd\u0001\u0000\u0000\u0000"+
		"\u0d49\u0d4c\u0003\u0236\u011b\u0000\u0d4a\u0d4c\u0005\u0481\u0000\u0000"+
		"\u0d4b\u0d49\u0001\u0000\u0000\u0000\u0d4b\u0d4a\u0001\u0000\u0000\u0000"+
		"\u0d4c\u00cf\u0001\u0000\u0000\u0000\u0d4d\u0d4e\u0005@\u0000\u0000\u0d4e"+
		"\u0d54\u0005\u00b6\u0000\u0000\u0d4f\u0d50\u0005f\u0000\u0000\u0d50\u0d51"+
		"\u0005O\u0000\u0000\u0d51\u0d52\u0005\u0260\u0000\u0000\u0d52\u0d54\u0005"+
		"\u01fd\u0000\u0000\u0d53\u0d4d\u0001\u0000\u0000\u0000\u0d53\u0d4f\u0001"+
		"\u0000\u0000\u0000\u0d54\u00d1\u0001\u0000\u0000\u0000\u0d55\u0d57\u0005"+
		",\u0000\u0000\u0d56\u0d58\u0005i\u0000\u0000\u0d57\u0d56\u0001\u0000\u0000"+
		"\u0000\u0d57\u0d58\u0001\u0000\u0000\u0000\u0d58\u0d5a\u0001\u0000\u0000"+
		"\u0000\u0d59\u0d5b\u0005\u0236\u0000\u0000\u0d5a\u0d59\u0001\u0000\u0000"+
		"\u0000\u0d5a\u0d5b\u0001\u0000\u0000\u0000\u0d5b\u0d5d\u0001\u0000\u0000"+
		"\u0000\u0d5c\u0d5e\u0005M\u0000\u0000\u0d5d\u0d5c\u0001\u0000\u0000\u0000"+
		"\u0d5d\u0d5e\u0001\u0000\u0000\u0000\u0d5e\u0d5f\u0001\u0000\u0000\u0000"+
		"\u0d5f\u0d60\u0005C\u0000\u0000\u0d60\u0d66\u0003\u021c\u010e\u0000\u0d61"+
		"\u0d62\u0005\u0080\u0000\u0000\u0d62\u0d63\u0005\u0466\u0000\u0000\u0d63"+
		"\u0d64\u0003\u0256\u012b\u0000\u0d64\u0d65\u0005\u0467\u0000\u0000\u0d65"+
		"\u0d67\u0001\u0000\u0000\u0000\u0d66\u0d61\u0001\u0000\u0000\u0000\u0d66"+
		"\u0d67\u0001\u0000\u0000\u0000\u0d67\u0d6a\u0001\u0000\u0000\u0000\u0d68"+
		"\u0d69\u0005\u00bc\u0000\u0000\u0d69\u0d6b\u0003\u029e\u014f\u0000\u0d6a"+
		"\u0d68\u0001\u0000\u0000\u0000\u0d6a\u0d6b\u0001\u0000\u0000\u0000\u0d6b"+
		"\u0d6d\u0001\u0000\u0000\u0000\u0d6c\u0d6e\u0003\u00e2q\u0000\u0d6d\u0d6c"+
		"\u0001\u0000\u0000\u0000\u0d6d\u0d6e\u0001\u0000\u0000\u0000\u0d6e\u0d71"+
		"\u0001\u0000\u0000\u0000\u0d6f\u0d70\u0005b\u0000\u0000\u0d70\u0d72\u0003"+
		"\u0122\u0091\u0000\u0d71\u0d6f\u0001\u0000\u0000\u0000\u0d71\u0d72\u0001"+
		"\u0000\u0000\u0000\u0d72\u00d3\u0001\u0000\u0000\u0000\u0d73\u0d75\u0005"+
		",\u0000\u0000\u0d74\u0d76\u0005i\u0000\u0000\u0d75\u0d74\u0001\u0000\u0000"+
		"\u0000\u0d75\u0d76\u0001\u0000\u0000\u0000\u0d76\u0d78\u0001\u0000\u0000"+
		"\u0000\u0d77\u0d79\u0005\u0236\u0000\u0000\u0d78\u0d77\u0001\u0000\u0000"+
		"\u0000\u0d78\u0d79\u0001\u0000\u0000\u0000\u0d79\u0d7b\u0001\u0000\u0000"+
		"\u0000\u0d7a\u0d7c\u0005M\u0000\u0000\u0d7b\u0d7a\u0001\u0000\u0000\u0000"+
		"\u0d7b\u0d7c\u0001\u0000\u0000\u0000\u0d7c\u0da4\u0001\u0000\u0000\u0000"+
		"\u0d7d\u0d80\u0003\u021c\u010e\u0000\u0d7e\u0d7f\u0005\u0465\u0000\u0000"+
		"\u0d7f\u0d81\u0005\u0456\u0000\u0000\u0d80\u0d7e\u0001\u0000\u0000\u0000"+
		"\u0d80\u0d81\u0001\u0000\u0000\u0000\u0d81\u0d8a\u0001\u0000\u0000\u0000"+
		"\u0d82\u0d83\u0005\u0468\u0000\u0000\u0d83\u0d86\u0003\u021c\u010e\u0000"+
		"\u0d84\u0d85\u0005\u0465\u0000\u0000\u0d85\u0d87\u0005\u0456\u0000\u0000"+
		"\u0d86\u0d84\u0001\u0000\u0000\u0000\u0d86\u0d87\u0001\u0000\u0000\u0000"+
		"\u0d87\u0d89\u0001\u0000\u0000\u0000\u0d88\u0d82\u0001\u0000\u0000\u0000"+
		"\u0d89\u0d8c\u0001\u0000\u0000\u0000\u0d8a\u0d88\u0001\u0000\u0000\u0000"+
		"\u0d8a\u0d8b\u0001\u0000\u0000\u0000\u0d8b\u0d8d\u0001\u0000\u0000\u0000"+
		"\u0d8c\u0d8a\u0001\u0000\u0000\u0000\u0d8d\u0d8e\u0005C\u0000\u0000\u0d8e"+
		"\u0d8f\u0003\u00e6s\u0000\u0d8f\u0da5\u0001\u0000\u0000\u0000\u0d90\u0d91"+
		"\u0005C\u0000\u0000\u0d91\u0d94\u0003\u021c\u010e\u0000\u0d92\u0d93\u0005"+
		"\u0465\u0000\u0000\u0d93\u0d95\u0005\u0456\u0000\u0000\u0d94\u0d92\u0001"+
		"\u0000\u0000\u0000\u0d94\u0d95\u0001\u0000\u0000\u0000\u0d95\u0d9e\u0001"+
		"\u0000\u0000\u0000\u0d96\u0d97\u0005\u0468\u0000\u0000\u0d97\u0d9a\u0003"+
		"\u021c\u010e\u0000\u0d98\u0d99\u0005\u0465\u0000\u0000\u0d99\u0d9b\u0005"+
		"\u0456\u0000\u0000\u0d9a\u0d98\u0001\u0000\u0000\u0000\u0d9a\u0d9b\u0001"+
		"\u0000\u0000\u0000\u0d9b\u0d9d\u0001\u0000\u0000\u0000\u0d9c\u0d96\u0001"+
		"\u0000\u0000\u0000\u0d9d\u0da0\u0001\u0000\u0000\u0000\u0d9e\u0d9c\u0001"+
		"\u0000\u0000\u0000\u0d9e\u0d9f\u0001\u0000\u0000\u0000\u0d9f\u0da1\u0001"+
		"\u0000\u0000\u0000\u0da0\u0d9e\u0001\u0000\u0000\u0000\u0da1\u0da2\u0005"+
		"\u00b9\u0000\u0000\u0da2\u0da3\u0003\u00e6s\u0000\u0da3\u0da5\u0001\u0000"+
		"\u0000\u0000\u0da4\u0d7d\u0001\u0000\u0000\u0000\u0da4\u0d90\u0001\u0000"+
		"\u0000\u0000\u0da5\u0da8\u0001\u0000\u0000\u0000\u0da6\u0da7\u0005\u00bc"+
		"\u0000\u0000\u0da7\u0da9\u0003\u029e\u014f\u0000\u0da8\u0da6\u0001\u0000"+
		"\u0000\u0000\u0da8\u0da9\u0001\u0000\u0000\u0000\u0da9\u00d5\u0001\u0000"+
		"\u0000\u0000\u0daa\u0dab\u0005\u01b8\u0000\u0000\u0dab\u0dac\u0003\u021c"+
		"\u010e\u0000\u0dac\u0db1\u0005\u0219\u0000\u0000\u0dad\u0daf\u0005\f\u0000"+
		"\u0000\u0dae\u0dad\u0001\u0000\u0000\u0000\u0dae\u0daf\u0001\u0000\u0000"+
		"\u0000\u0daf\u0db0\u0001\u0000\u0000\u0000\u0db0\u0db2\u0003\u0236\u011b"+
		"\u0000\u0db1\u0dae\u0001\u0000\u0000\u0000\u0db1\u0db2\u0001\u0000\u0000"+
		"\u0000\u0db2\u00d7\u0001\u0000\u0000\u0000\u0db3\u0db4\u0005\u01b8\u0000"+
		"\u0000\u0db4\u0db5\u0003\u021c\u010e\u0000\u0db5\u0db6\u0005\u0085\u0000"+
		"\u0000\u0db6\u0dbd\u0003\u0236\u011b\u0000\u0db7\u0db8\u0003\u02a6\u0153"+
		"\u0000\u0db8\u0db9\u0005\u0466\u0000\u0000\u0db9\u0dba\u0003\u0262\u0131"+
		"\u0000\u0dba\u0dbb\u0005\u0467\u0000\u0000\u0dbb\u0dbe\u0001\u0000\u0000"+
		"\u0000\u0dbc\u0dbe\u0007.\u0000\u0000\u0dbd\u0db7\u0001\u0000\u0000\u0000"+
		"\u0dbd\u0dbc\u0001\u0000\u0000\u0000\u0dbe\u0dc1\u0001\u0000\u0000\u0000"+
		"\u0dbf\u0dc0\u0005\u00bc\u0000\u0000\u0dc0\u0dc2\u0003\u029e\u014f\u0000"+
		"\u0dc1\u0dbf\u0001\u0000\u0000\u0000\u0dc1\u0dc2\u0001\u0000\u0000\u0000"+
		"\u0dc2\u0dc5\u0001\u0000\u0000\u0000\u0dc3\u0dc4\u0005b\u0000\u0000\u0dc4"+
		"\u0dc6\u0003\u0122\u0091\u0000\u0dc5\u0dc3\u0001\u0000\u0000\u0000\u0dc5"+
		"\u0dc6\u0001\u0000\u0000\u0000\u0dc6\u00d9\u0001\u0000\u0000\u0000\u0dc7"+
		"\u0dc8\u0005\u01b8\u0000\u0000\u0dc8\u0dc9\u0003\u021c\u010e\u0000\u0dc9"+
		"\u0dca\u0005\u0085\u0000\u0000\u0dca\u0dcd\u0007/\u0000\u0000\u0dcb\u0dcc"+
		"\u0005\u00bc\u0000\u0000\u0dcc\u0dce\u0003\u029e\u014f\u0000\u0dcd\u0dcb"+
		"\u0001\u0000\u0000\u0000\u0dcd\u0dce\u0001\u0000\u0000\u0000\u0dce\u0dd1"+
		"\u0001\u0000\u0000\u0000\u0dcf\u0dd0\u0005b\u0000\u0000\u0dd0\u0dd2\u0003"+
		"\u0122\u0091\u0000\u0dd1\u0dcf\u0001\u0000\u0000\u0000\u0dd1\u0dd2\u0001"+
		"\u0000\u0000\u0000\u0dd2\u00db\u0001\u0000\u0000\u0000\u0dd3\u0dd4\u0005"+
		"\u01b8\u0000\u0000\u0dd4\u0dd5\u0003\u021c\u010e\u0000\u0dd5\u0dd6\u0005"+
		"\u0167\u0000\u0000\u0dd6\u00dd\u0001\u0000\u0000\u0000\u0dd7\u0dd9\u0005"+
		"\u00b6\u0000\u0000\u0dd8\u0dda\u0005i\u0000\u0000\u0dd9\u0dd8\u0001\u0000"+
		"\u0000\u0000\u0dd9\u0dda\u0001\u0000\u0000\u0000\u0dda\u0ddc\u0001\u0000"+
		"\u0000\u0000\u0ddb\u0ddd\u0005M\u0000\u0000\u0ddc\u0ddb\u0001\u0000\u0000"+
		"\u0000\u0ddc\u0ddd\u0001\u0000\u0000\u0000\u0ddd\u0dde\u0001\u0000\u0000"+
		"\u0000\u0dde\u0de3\u0003\u021c\u010e\u0000\u0ddf\u0de1\u0005\f\u0000\u0000"+
		"\u0de0\u0ddf\u0001\u0000\u0000\u0000\u0de0\u0de1\u0001\u0000\u0000\u0000"+
		"\u0de1\u0de2\u0001\u0000\u0000\u0000\u0de2\u0de4\u0003\u0236\u011b\u0000"+
		"\u0de3\u0de0\u0001\u0000\u0000\u0000\u0de3\u0de4\u0001\u0000\u0000\u0000"+
		"\u0de4\u0de5\u0001\u0000\u0000\u0000\u0de5\u0de6\u0005\u0098\u0000\u0000"+
		"\u0de6\u0deb\u0003\u00ccf\u0000\u0de7\u0de8\u0005\u0468\u0000\u0000\u0de8"+
		"\u0dea\u0003\u00ccf\u0000\u0de9\u0de7\u0001\u0000\u0000\u0000\u0dea\u0ded"+
		"\u0001\u0000\u0000\u0000\u0deb\u0de9\u0001\u0000\u0000\u0000\u0deb\u0dec"+
		"\u0001\u0000\u0000\u0000\u0dec\u0df0\u0001\u0000\u0000\u0000\u0ded\u0deb"+
		"\u0001\u0000\u0000\u0000\u0dee\u0def\u0005\u00bc\u0000\u0000\u0def\u0df1"+
		"\u0003\u029e\u014f\u0000\u0df0\u0dee\u0001\u0000\u0000\u0000\u0df0\u0df1"+
		"\u0001\u0000\u0000\u0000\u0df1\u0df3\u0001\u0000\u0000\u0000\u0df2\u0df4"+
		"\u0003\u00e2q\u0000\u0df3\u0df2\u0001\u0000\u0000\u0000\u0df3\u0df4\u0001"+
		"\u0000\u0000\u0000\u0df4\u0df6\u0001\u0000\u0000\u0000\u0df5\u0df7\u0003"+
		"\u0120\u0090\u0000\u0df6\u0df5\u0001\u0000\u0000\u0000\u0df6\u0df7\u0001"+
		"\u0000\u0000\u0000\u0df7\u00df\u0001\u0000\u0000\u0000\u0df8\u0dfa\u0005"+
		"\u00b6\u0000\u0000\u0df9\u0dfb\u0005i\u0000\u0000\u0dfa\u0df9\u0001\u0000"+
		"\u0000\u0000\u0dfa\u0dfb\u0001\u0000\u0000\u0000\u0dfb\u0dfd\u0001\u0000"+
		"\u0000\u0000\u0dfc\u0dfe\u0005M\u0000\u0000\u0dfd\u0dfc\u0001\u0000\u0000"+
		"\u0000\u0dfd\u0dfe\u0001\u0000\u0000\u0000\u0dfe\u0dff\u0001\u0000\u0000"+
		"\u0000\u0dff\u0e00\u0003\u00e6s\u0000\u0e00\u0e01\u0005\u0098\u0000\u0000"+
		"\u0e01\u0e06\u0003\u00ccf\u0000\u0e02\u0e03\u0005\u0468\u0000\u0000\u0e03"+
		"\u0e05\u0003\u00ccf\u0000\u0e04\u0e02\u0001\u0000\u0000\u0000\u0e05\u0e08"+
		"\u0001\u0000\u0000\u0000\u0e06\u0e04\u0001\u0000\u0000\u0000\u0e06\u0e07"+
		"\u0001\u0000\u0000\u0000\u0e07\u0e0b\u0001\u0000\u0000\u0000\u0e08\u0e06"+
		"\u0001\u0000\u0000\u0000\u0e09\u0e0a\u0005\u00bc\u0000\u0000\u0e0a\u0e0c"+
		"\u0003\u029e\u014f\u0000\u0e0b\u0e09\u0001\u0000\u0000\u0000\u0e0b\u0e0c"+
		"\u0001\u0000\u0000\u0000\u0e0c\u00e1\u0001\u0000\u0000\u0000\u0e0d\u0e0e"+
		"\u0005{\u0000\u0000\u0e0e\u0e0f\u0005\u0013\u0000\u0000\u0e0f\u0e14\u0003"+
		"\u00e4r\u0000\u0e10\u0e11\u0005\u0468\u0000\u0000\u0e11\u0e13\u0003\u00e4"+
		"r\u0000\u0e12\u0e10\u0001\u0000\u0000\u0000\u0e13\u0e16\u0001\u0000\u0000"+
		"\u0000\u0e14\u0e12\u0001\u0000\u0000\u0000\u0e14\u0e15\u0001\u0000\u0000"+
		"\u0000\u0e15\u00e3\u0001\u0000\u0000\u0000\u0e16\u0e14\u0001\u0000\u0000"+
		"\u0000\u0e17\u0e19\u0003\u029e\u014f\u0000\u0e18\u0e1a\u00070\u0000\u0000"+
		"\u0e19\u0e18\u0001\u0000\u0000\u0000\u0e19\u0e1a\u0001\u0000\u0000\u0000"+
		"\u0e1a\u00e5\u0001\u0000\u0000\u0000\u0e1b\u0e20\u0003\u00e8t\u0000\u0e1c"+
		"\u0e1d\u0005\u0468\u0000\u0000\u0e1d\u0e1f\u0003\u00e8t\u0000\u0e1e\u0e1c"+
		"\u0001\u0000\u0000\u0000\u0e1f\u0e22\u0001\u0000\u0000\u0000\u0e20\u0e1e"+
		"\u0001\u0000\u0000\u0000\u0e20\u0e21\u0001\u0000\u0000\u0000\u0e21\u00e7"+
		"\u0001\u0000\u0000\u0000\u0e22\u0e20\u0001\u0000\u0000\u0000\u0e23\u0e27"+
		"\u0003\u00eau\u0000\u0e24\u0e26\u0003\u00f0x\u0000\u0e25\u0e24\u0001\u0000"+
		"\u0000\u0000\u0e26\u0e29\u0001\u0000\u0000\u0000\u0e27\u0e25\u0001\u0000"+
		"\u0000\u0000\u0e27\u0e28\u0001\u0000\u0000\u0000\u0e28\u0e36\u0001\u0000"+
		"\u0000\u0000\u0e29\u0e27\u0001\u0000\u0000\u0000\u0e2a\u0e2b\u0005\u0466"+
		"\u0000\u0000\u0e2b\u0e2f\u0003\u00eau\u0000\u0e2c\u0e2e\u0003\u00f0x\u0000"+
		"\u0e2d\u0e2c\u0001\u0000\u0000\u0000\u0e2e\u0e31\u0001\u0000\u0000\u0000"+
		"\u0e2f\u0e2d\u0001\u0000\u0000\u0000\u0e2f\u0e30\u0001\u0000\u0000\u0000"+
		"\u0e30\u0e32\u0001\u0000\u0000\u0000\u0e31\u0e2f\u0001\u0000\u0000\u0000"+
		"\u0e32\u0e33\u0005\u0467\u0000\u0000\u0e33\u0e36\u0001\u0000\u0000\u0000"+
		"\u0e34\u0e36\u0003\u0100\u0080\u0000\u0e35\u0e23\u0001\u0000\u0000\u0000"+
		"\u0e35\u0e2a\u0001\u0000\u0000\u0000\u0e35\u0e34\u0001\u0000\u0000\u0000"+
		"\u0e36\u00e9\u0001\u0000\u0000\u0000\u0e37\u0e3d\u0003\u021c\u010e\u0000"+
		"\u0e38\u0e39\u0005\u0080\u0000\u0000\u0e39\u0e3a\u0005\u0466\u0000\u0000"+
		"\u0e3a\u0e3b\u0003\u0256\u012b\u0000\u0e3b\u0e3c\u0005\u0467\u0000\u0000"+
		"\u0e3c\u0e3e\u0001\u0000\u0000\u0000\u0e3d\u0e38\u0001\u0000\u0000\u0000"+
		"\u0e3d\u0e3e\u0001\u0000\u0000\u0000\u0e3e\u0e43\u0001\u0000\u0000\u0000"+
		"\u0e3f\u0e41\u0005\f\u0000\u0000\u0e40\u0e3f\u0001\u0000\u0000\u0000\u0e40"+
		"\u0e41\u0001\u0000\u0000\u0000\u0e41\u0e42\u0001\u0000\u0000\u0000\u0e42"+
		"\u0e44\u0003\u0236\u011b\u0000\u0e43\u0e40\u0001\u0000\u0000\u0000\u0e43"+
		"\u0e44\u0001\u0000\u0000\u0000\u0e44\u0e4d\u0001\u0000\u0000\u0000\u0e45"+
		"\u0e4a\u0003\u00ecv\u0000\u0e46\u0e47\u0005\u0468\u0000\u0000\u0e47\u0e49"+
		"\u0003\u00ecv\u0000\u0e48\u0e46\u0001\u0000\u0000\u0000\u0e49\u0e4c\u0001"+
		"\u0000\u0000\u0000\u0e4a\u0e48\u0001\u0000\u0000\u0000\u0e4a\u0e4b\u0001"+
		"\u0000\u0000\u0000\u0e4b\u0e4e\u0001\u0000\u0000\u0000\u0e4c\u0e4a\u0001"+
		"\u0000\u0000\u0000\u0e4d\u0e45\u0001\u0000\u0000\u0000\u0e4d\u0e4e\u0001"+
		"\u0000\u0000\u0000\u0e4e\u0e60\u0001\u0000\u0000\u0000\u0e4f\u0e55\u0003"+
		"\u00c4b\u0000\u0e50\u0e51\u0005\u0466\u0000\u0000\u0e51\u0e52\u0003\u00c4"+
		"b\u0000\u0e52\u0e53\u0005\u0467\u0000\u0000\u0e53\u0e55\u0001\u0000\u0000"+
		"\u0000\u0e54\u0e4f\u0001\u0000\u0000\u0000\u0e54\u0e50\u0001\u0000\u0000"+
		"\u0000\u0e55\u0e57\u0001\u0000\u0000\u0000\u0e56\u0e58\u0005\f\u0000\u0000"+
		"\u0e57\u0e56\u0001\u0000\u0000\u0000\u0e57\u0e58\u0001\u0000\u0000\u0000"+
		"\u0e58\u0e59\u0001\u0000\u0000\u0000\u0e59\u0e5a\u0003\u0236\u011b\u0000"+
		"\u0e5a\u0e60\u0001\u0000\u0000\u0000\u0e5b\u0e5c\u0005\u0466\u0000\u0000"+
		"\u0e5c\u0e5d\u0003\u00e6s\u0000\u0e5d\u0e5e\u0005\u0467\u0000\u0000\u0e5e"+
		"\u0e60\u0001\u0000\u0000\u0000\u0e5f\u0e37\u0001\u0000\u0000\u0000\u0e5f"+
		"\u0e54\u0001\u0000\u0000\u0000\u0e5f\u0e5b\u0001\u0000\u0000\u0000\u0e60"+
		"\u00eb\u0001\u0000\u0000\u0000\u0e61\u0e62\u00071\u0000\u0000\u0e62\u0e65"+
		"\u0007\u0014\u0000\u0000\u0e63\u0e64\u0005@\u0000\u0000\u0e64\u0e66\u0003"+
		"\u00eew\u0000\u0e65\u0e63\u0001\u0000\u0000\u0000\u0e65\u0e66\u0001\u0000"+
		"\u0000\u0000\u0e66\u0e67\u0001\u0000\u0000\u0000\u0e67\u0e68\u0005\u0466"+
		"\u0000\u0000\u0e68\u0e69\u0003\u0256\u012b\u0000\u0e69\u0e6a\u0005\u0467"+
		"\u0000\u0000\u0e6a\u00ed\u0001\u0000\u0000\u0000\u0e6b\u0e71\u0005Y\u0000"+
		"\u0000\u0e6c\u0e6d\u0005{\u0000\u0000\u0e6d\u0e71\u0005\u0013\u0000\u0000"+
		"\u0e6e\u0e6f\u0005H\u0000\u0000\u0e6f\u0e71\u0005\u0013\u0000\u0000\u0e70"+
		"\u0e6b\u0001\u0000\u0000\u0000\u0e70\u0e6c\u0001\u0000\u0000\u0000\u0e70"+
		"\u0e6e\u0001\u0000\u0000\u0000\u0e71\u00ef\u0001\u0000\u0000\u0000\u0e72"+
		"\u0e74\u00072\u0000\u0000\u0e73\u0e72\u0001\u0000\u0000\u0000\u0e73\u0e74"+
		"\u0001\u0000\u0000\u0000\u0e74\u0e75\u0001\u0000\u0000\u0000\u0e75\u0e77"+
		"\u0005Y\u0000\u0000\u0e76\u0e78\u0005]\u0000\u0000\u0e77\u0e76\u0001\u0000"+
		"\u0000\u0000\u0e77\u0e78\u0001\u0000\u0000\u0000\u0e78\u0e79\u0001\u0000"+
		"\u0000\u0000\u0e79\u0e81\u0003\u00eau\u0000\u0e7a\u0e7b\u0005u\u0000\u0000"+
		"\u0e7b\u0e82\u0003\u029e\u014f\u0000\u0e7c\u0e7d\u0005\u00b9\u0000\u0000"+
		"\u0e7d\u0e7e\u0005\u0466\u0000\u0000\u0e7e\u0e7f\u0003\u0256\u012b\u0000"+
		"\u0e7f\u0e80\u0005\u0467\u0000\u0000\u0e80\u0e82\u0001\u0000\u0000\u0000"+
		"\u0e81\u0e7a\u0001\u0000\u0000\u0000\u0e81\u0e7c\u0001\u0000\u0000\u0000"+
		"\u0e81\u0e82\u0001\u0000\u0000\u0000\u0e82\u0ea5\u0001\u0000\u0000\u0000"+
		"\u0e83\u0e84\u0005\u00a9\u0000\u0000\u0e84\u0e87\u0003\u00eau\u0000\u0e85"+
		"\u0e86\u0005u\u0000\u0000\u0e86\u0e88\u0003\u029e\u014f\u0000\u0e87\u0e85"+
		"\u0001\u0000\u0000\u0000\u0e87\u0e88\u0001\u0000\u0000\u0000\u0e88\u0ea5"+
		"\u0001\u0000\u0000\u0000\u0e89\u0e8b\u00073\u0000\u0000\u0e8a\u0e8c\u0005"+
		"}\u0000\u0000\u0e8b\u0e8a\u0001\u0000\u0000\u0000\u0e8b\u0e8c\u0001\u0000"+
		"\u0000\u0000\u0e8c\u0e8d\u0001\u0000\u0000\u0000\u0e8d\u0e8f\u0005Y\u0000"+
		"\u0000\u0e8e\u0e90\u0005]\u0000\u0000\u0e8f\u0e8e\u0001\u0000\u0000\u0000"+
		"\u0e8f\u0e90\u0001\u0000\u0000\u0000\u0e90\u0e91\u0001\u0000\u0000\u0000"+
		"\u0e91\u0e99\u0003\u00eau\u0000\u0e92\u0e93\u0005u\u0000\u0000\u0e93\u0e9a"+
		"\u0003\u029e\u014f\u0000\u0e94\u0e95\u0005\u00b9\u0000\u0000\u0e95\u0e96"+
		"\u0005\u0466\u0000\u0000\u0e96\u0e97\u0003\u0256\u012b\u0000\u0e97\u0e98"+
		"\u0005\u0467\u0000\u0000\u0e98\u0e9a\u0001\u0000\u0000\u0000\u0e99\u0e92"+
		"\u0001\u0000\u0000\u0000\u0e99\u0e94\u0001\u0000\u0000\u0000\u0e9a\u0ea5"+
		"\u0001\u0000\u0000\u0000\u0e9b\u0ea0\u0005p\u0000\u0000\u0e9c\u0e9e\u0007"+
		"3\u0000\u0000\u0e9d\u0e9f\u0005}\u0000\u0000\u0e9e\u0e9d\u0001\u0000\u0000"+
		"\u0000\u0e9e\u0e9f\u0001\u0000\u0000\u0000\u0e9f\u0ea1\u0001\u0000\u0000"+
		"\u0000\u0ea0\u0e9c\u0001\u0000\u0000\u0000\u0ea0\u0ea1\u0001\u0000\u0000"+
		"\u0000\u0ea1\u0ea2\u0001\u0000\u0000\u0000\u0ea2\u0ea3\u0005Y\u0000\u0000"+
		"\u0ea3\u0ea5\u0003\u00eau\u0000\u0ea4\u0e73\u0001\u0000\u0000\u0000\u0ea4"+
		"\u0e83\u0001\u0000\u0000\u0000\u0ea4\u0e89\u0001\u0000\u0000\u0000\u0ea4"+
		"\u0e9b\u0001\u0000\u0000\u0000\u0ea5\u00f1\u0001\u0000\u0000\u0000\u0ea6"+
		"\u0ea7\u0005\u0466\u0000\u0000\u0ea7\u0ea8\u0003\u00f6{\u0000\u0ea8\u0ea9"+
		"\u0005\u0467\u0000\u0000\u0ea9\u0eaf\u0001\u0000\u0000\u0000\u0eaa\u0eab"+
		"\u0005\u0466\u0000\u0000\u0eab\u0eac\u0003\u00f2y\u0000\u0eac\u0ead\u0005"+
		"\u0467\u0000\u0000\u0ead\u0eaf\u0001\u0000\u0000\u0000\u0eae\u0ea6\u0001"+
		"\u0000\u0000\u0000\u0eae\u0eaa\u0001\u0000\u0000\u0000\u0eaf\u00f3\u0001"+
		"\u0000\u0000\u0000\u0eb0\u0eb1\u0005\u0466\u0000\u0000\u0eb1\u0eb2\u0003"+
		"\u00f8|\u0000\u0eb2\u0eb3\u0005\u0467\u0000\u0000\u0eb3\u0eb9\u0001\u0000"+
		"\u0000\u0000\u0eb4\u0eb5\u0005\u0466\u0000\u0000\u0eb5\u0eb6\u0003\u00f4"+
		"z\u0000\u0eb6\u0eb7\u0005\u0467\u0000\u0000\u0eb7\u0eb9\u0001\u0000\u0000"+
		"\u0000\u0eb8\u0eb0\u0001\u0000\u0000\u0000\u0eb8\u0eb4\u0001\u0000\u0000"+
		"\u0000\u0eb9\u00f5\u0001\u0000\u0000\u0000\u0eba\u0ebe\u0005\u0097\u0000"+
		"\u0000\u0ebb\u0ebd\u0003\u010a\u0085\u0000\u0ebc\u0ebb\u0001\u0000\u0000"+
		"\u0000\u0ebd\u0ec0\u0001\u0000\u0000\u0000\u0ebe\u0ebc\u0001\u0000\u0000"+
		"\u0000\u0ebe\u0ebf\u0001\u0000\u0000\u0000\u0ebf\u0ec1\u0001\u0000\u0000"+
		"\u0000\u0ec0\u0ebe\u0001\u0000\u0000\u0000\u0ec1\u0ec3\u0003\u010c\u0086"+
		"\u0000\u0ec2\u0ec4\u0003\u0110\u0088\u0000\u0ec3\u0ec2\u0001\u0000\u0000"+
		"\u0000\u0ec3\u0ec4\u0001\u0000\u0000\u0000\u0ec4\u0ec5\u0001\u0000\u0000"+
		"\u0000\u0ec5\u0ec7\u0003\u0116\u008b\u0000\u0ec6\u0ec8\u0003\u0118\u008c"+
		"\u0000\u0ec7\u0ec6\u0001\u0000\u0000\u0000\u0ec7\u0ec8\u0001\u0000\u0000"+
		"\u0000\u0ec8\u0eca\u0001\u0000\u0000\u0000\u0ec9\u0ecb\u0003\u011a\u008d"+
		"\u0000\u0eca\u0ec9\u0001\u0000\u0000\u0000\u0eca\u0ecb\u0001\u0000\u0000"+
		"\u0000\u0ecb\u0ecd\u0001\u0000\u0000\u0000\u0ecc\u0ece\u0003\u011c\u008e"+
		"\u0000\u0ecd\u0ecc\u0001\u0000\u0000\u0000\u0ecd\u0ece\u0001\u0000\u0000"+
		"\u0000\u0ece\u0ed0\u0001\u0000\u0000\u0000\u0ecf\u0ed1\u0003\u00e2q\u0000"+
		"\u0ed0\u0ecf\u0001\u0000\u0000\u0000\u0ed0\u0ed1\u0001\u0000\u0000\u0000"+
		"\u0ed1\u0ed3\u0001\u0000\u0000\u0000\u0ed2\u0ed4\u0003\u0120\u0090\u0000"+
		"\u0ed3\u0ed2\u0001\u0000\u0000\u0000\u0ed3\u0ed4\u0001\u0000\u0000\u0000"+
		"\u0ed4\u0ef1\u0001\u0000\u0000\u0000\u0ed5\u0ed9\u0005\u0097\u0000\u0000"+
		"\u0ed6\u0ed8\u0003\u010a\u0085\u0000\u0ed7\u0ed6\u0001\u0000\u0000\u0000"+
		"\u0ed8\u0edb\u0001\u0000\u0000\u0000\u0ed9\u0ed7\u0001\u0000\u0000\u0000"+
		"\u0ed9\u0eda\u0001\u0000\u0000\u0000\u0eda\u0edc\u0001\u0000\u0000\u0000"+
		"\u0edb\u0ed9\u0001\u0000\u0000\u0000\u0edc\u0edd\u0003\u010c\u0086\u0000"+
		"\u0edd\u0edf\u0003\u0116\u008b\u0000\u0ede\u0ee0\u0003\u0118\u008c\u0000"+
		"\u0edf\u0ede\u0001\u0000\u0000\u0000\u0edf\u0ee0\u0001\u0000\u0000\u0000"+
		"\u0ee0\u0ee2\u0001\u0000\u0000\u0000\u0ee1\u0ee3\u0003\u011a\u008d\u0000"+
		"\u0ee2\u0ee1\u0001\u0000\u0000\u0000\u0ee2\u0ee3\u0001\u0000\u0000\u0000"+
		"\u0ee3\u0ee5\u0001\u0000\u0000\u0000\u0ee4\u0ee6\u0003\u011c\u008e\u0000"+
		"\u0ee5\u0ee4\u0001\u0000\u0000\u0000\u0ee5\u0ee6\u0001\u0000\u0000\u0000"+
		"\u0ee6\u0ee8\u0001\u0000\u0000\u0000\u0ee7\u0ee9\u0003\u00e2q\u0000\u0ee8"+
		"\u0ee7\u0001\u0000\u0000\u0000\u0ee8\u0ee9\u0001\u0000\u0000\u0000\u0ee9"+
		"\u0eeb\u0001\u0000\u0000\u0000\u0eea\u0eec\u0003\u0120\u0090\u0000\u0eeb"+
		"\u0eea\u0001\u0000\u0000\u0000\u0eeb\u0eec\u0001\u0000\u0000\u0000\u0eec"+
		"\u0eee\u0001\u0000\u0000\u0000\u0eed\u0eef\u0003\u0110\u0088\u0000\u0eee"+
		"\u0eed\u0001\u0000\u0000\u0000\u0eee\u0eef\u0001\u0000\u0000\u0000\u0eef"+
		"\u0ef1\u0001\u0000\u0000\u0000\u0ef0\u0eba\u0001\u0000\u0000\u0000\u0ef0"+
		"\u0ed5\u0001\u0000\u0000\u0000\u0ef1\u00f7\u0001\u0000\u0000\u0000\u0ef2"+
		"\u0ef6\u0005\u0097\u0000\u0000\u0ef3\u0ef5\u0003\u010a\u0085\u0000\u0ef4"+
		"\u0ef3\u0001\u0000\u0000\u0000\u0ef5\u0ef8\u0001\u0000\u0000\u0000\u0ef6"+
		"\u0ef4\u0001\u0000\u0000\u0000\u0ef6\u0ef7\u0001\u0000\u0000\u0000\u0ef7"+
		"\u0ef9\u0001\u0000\u0000\u0000\u0ef8\u0ef6\u0001\u0000\u0000\u0000\u0ef9"+
		"\u0efa\u0003\u010c\u0086\u0000\u0efa\u0efc\u0003\u0116\u008b\u0000\u0efb"+
		"\u0efd\u0003\u0118\u008c\u0000\u0efc\u0efb\u0001\u0000\u0000\u0000\u0efc"+
		"\u0efd\u0001\u0000\u0000\u0000\u0efd\u0eff\u0001\u0000\u0000\u0000\u0efe"+
		"\u0f00\u0003\u011a\u008d\u0000\u0eff\u0efe\u0001\u0000\u0000\u0000\u0eff"+
		"\u0f00\u0001\u0000\u0000\u0000\u0f00\u0f02\u0001\u0000\u0000\u0000\u0f01"+
		"\u0f03\u0003\u011c\u008e\u0000\u0f02\u0f01\u0001\u0000\u0000\u0000\u0f02"+
		"\u0f03\u0001\u0000\u0000\u0000\u0f03\u0f05\u0001\u0000\u0000\u0000\u0f04"+
		"\u0f06\u0003\u00e2q\u0000\u0f05\u0f04\u0001\u0000\u0000\u0000\u0f05\u0f06"+
		"\u0001\u0000\u0000\u0000\u0f06\u0f08\u0001\u0000\u0000\u0000\u0f07\u0f09"+
		"\u0003\u0120\u0090\u0000\u0f08\u0f07\u0001\u0000\u0000\u0000\u0f08\u0f09"+
		"\u0001\u0000\u0000\u0000\u0f09\u00f9\u0001\u0000\u0000\u0000\u0f0a\u0f0c"+
		"\u0005\u00b2\u0000\u0000\u0f0b\u0f0d\u0007,\u0000\u0000\u0f0c\u0f0b\u0001"+
		"\u0000\u0000\u0000\u0f0c\u0f0d\u0001\u0000\u0000\u0000\u0f0d\u0f0e\u0001"+
		"\u0000\u0000\u0000\u0f0e\u0f0f\u0003\u00f4z\u0000\u0f0f\u00fb\u0001\u0000"+
		"\u0000\u0000\u0f10\u0f12\u0005\u00b2\u0000\u0000\u0f11\u0f13\u0007,\u0000"+
		"\u0000\u0f12\u0f11\u0001\u0000\u0000\u0000\u0f12\u0f13\u0001\u0000\u0000"+
		"\u0000\u0f13\u0f16\u0001\u0000\u0000\u0000\u0f14\u0f17\u0003\u00f8|\u0000"+
		"\u0f15\u0f17\u0003\u00f4z\u0000\u0f16\u0f14\u0001\u0000\u0000\u0000\u0f16"+
		"\u0f15\u0001\u0000\u0000\u0000\u0f17\u00fd\u0001\u0000\u0000\u0000\u0f18"+
		"\u0f27\u0005]\u0000\u0000\u0f19\u0f28\u0003\u00f8|\u0000\u0f1a\u0f28\u0003"+
		"\u00f4z\u0000\u0f1b\u0f1e\u0005\u0466\u0000\u0000\u0f1c\u0f1f\u0003\u00f8"+
		"|\u0000\u0f1d\u0f1f\u0003\u00f4z\u0000\u0f1e\u0f1c\u0001\u0000\u0000\u0000"+
		"\u0f1e\u0f1d\u0001\u0000\u0000\u0000\u0f1f\u0f20\u0001\u0000\u0000\u0000"+
		"\u0f20\u0f25\u0005\u0467\u0000\u0000\u0f21\u0f23\u0005\f\u0000\u0000\u0f22"+
		"\u0f21\u0001\u0000\u0000\u0000\u0f22\u0f23\u0001\u0000\u0000\u0000\u0f23"+
		"\u0f24\u0001\u0000\u0000\u0000\u0f24\u0f26\u0003\u0236\u011b\u0000\u0f25"+
		"\u0f22\u0001\u0000\u0000\u0000\u0f25\u0f26\u0001\u0000\u0000\u0000\u0f26"+
		"\u0f28\u0001\u0000\u0000\u0000\u0f27\u0f19\u0001\u0000\u0000\u0000\u0f27"+
		"\u0f1a\u0001\u0000\u0000\u0000\u0f27\u0f1b\u0001\u0000\u0000\u0000\u0f28"+
		"\u00ff\u0001\u0000\u0000\u0000\u0f29\u0f2a\u0005\u0114\u0000\u0000\u0f2a"+
		"\u0f2b\u0005\u0466\u0000\u0000\u0f2b\u0f2c\u0005\u0475\u0000\u0000\u0f2c"+
		"\u0f2d\u0005\u0468\u0000\u0000\u0f2d\u0f2e\u0005\u0475\u0000\u0000\u0f2e"+
		"\u0f2f\u0005\u016b\u0000\u0000\u0f2f\u0f30\u0005\u0466\u0000\u0000\u0f30"+
		"\u0f31\u0003\u0102\u0081\u0000\u0f31\u0f32\u0005\u0467\u0000\u0000\u0f32"+
		"\u0f37\u0005\u0467\u0000\u0000\u0f33\u0f35\u0005\f\u0000\u0000\u0f34\u0f33"+
		"\u0001\u0000\u0000\u0000\u0f34\u0f35\u0001\u0000\u0000\u0000\u0f35\u0f36"+
		"\u0001\u0000\u0000\u0000\u0f36\u0f38\u0003\u0236\u011b\u0000\u0f37\u0f34"+
		"\u0001\u0000\u0000\u0000\u0f37\u0f38\u0001\u0000\u0000\u0000\u0f38\u0101"+
		"\u0001\u0000\u0000\u0000\u0f39\u0f3e\u0003\u0104\u0082\u0000\u0f3a\u0f3b"+
		"\u0005\u0468\u0000\u0000\u0f3b\u0f3d\u0003\u0104\u0082\u0000\u0f3c\u0f3a"+
		"\u0001\u0000\u0000\u0000\u0f3d\u0f40\u0001\u0000\u0000\u0000\u0f3e\u0f3c"+
		"\u0001\u0000\u0000\u0000\u0f3e\u0f3f\u0001\u0000\u0000\u0000\u0f3f\u0103"+
		"\u0001\u0000\u0000\u0000\u0f40\u0f3e\u0001\u0000\u0000\u0000\u0f41\u0f52"+
		"\u0003\u0220\u0110\u0000\u0f42\u0f43\u0005@\u0000\u0000\u0f43\u0f53\u0005"+
		"\u011a\u0000\u0000\u0f44\u0f50\u0003\u024a\u0125\u0000\u0f45\u0f46\u0005"+
		"\u011b\u0000\u0000\u0f46\u0f48\u0005\u0475\u0000\u0000\u0f47\u0f49\u0003"+
		"\u0106\u0083\u0000\u0f48\u0f47\u0001\u0000\u0000\u0000\u0f48\u0f49\u0001"+
		"\u0000\u0000\u0000\u0f49\u0f4b\u0001\u0000\u0000\u0000\u0f4a\u0f4c\u0003"+
		"\u0108\u0084\u0000\u0f4b\u0f4a\u0001\u0000\u0000\u0000\u0f4b\u0f4c\u0001"+
		"\u0000\u0000\u0000\u0f4c\u0f51\u0001\u0000\u0000\u0000\u0f4d\u0f4e\u0005"+
		";\u0000\u0000\u0f4e\u0f4f\u0005\u011b\u0000\u0000\u0f4f\u0f51\u0005\u0475"+
		"\u0000\u0000\u0f50\u0f45\u0001\u0000\u0000\u0000\u0f50\u0f4d\u0001\u0000"+
		"\u0000\u0000\u0f51\u0f53\u0001\u0000\u0000\u0000\u0f52\u0f42\u0001\u0000"+
		"\u0000\u0000\u0f52\u0f44\u0001\u0000\u0000\u0000\u0f53\u0f5f\u0001\u0000"+
		"\u0000\u0000\u0f54\u0f56\u0005\u0119\u0000\u0000\u0f55\u0f57\u0005\u011b"+
		"\u0000\u0000\u0f56\u0f55\u0001\u0000\u0000\u0000\u0f56\u0f57\u0001\u0000"+
		"\u0000\u0000\u0f57\u0f58\u0001\u0000\u0000\u0000\u0f58\u0f59\u0005\u0475"+
		"\u0000\u0000\u0f59\u0f5a\u0005\u016b\u0000\u0000\u0f5a\u0f5b\u0005\u0466"+
		"\u0000\u0000\u0f5b\u0f5c\u0003\u0102";
	private static final String _serializedATNSegment2 =
		"\u0081\u0000\u0f5c\u0f5d\u0005\u0467\u0000\u0000\u0f5d\u0f5f\u0001\u0000"+
		"\u0000\u0000\u0f5e\u0f41\u0001\u0000\u0000\u0000\u0f5e\u0f54\u0001\u0000"+
		"\u0000\u0000\u0f5f\u0105\u0001\u0000\u0000\u0000\u0f60\u0f65\u0005s\u0000"+
		"\u0000\u0f61\u0f65\u0005\u0199\u0000\u0000\u0f62\u0f63\u0005*\u0000\u0000"+
		"\u0f63\u0f65\u0003\u0268\u0134\u0000\u0f64\u0f60\u0001\u0000\u0000\u0000"+
		"\u0f64\u0f61\u0001\u0000\u0000\u0000\u0f64\u0f62\u0001\u0000\u0000\u0000"+
		"\u0f65\u0f66\u0001\u0000\u0000\u0000\u0f66\u0f67\u0005u\u0000\u0000\u0f67"+
		"\u0f68\u00057\u0000\u0000\u0f68\u0107\u0001\u0000\u0000\u0000\u0f69\u0f6e"+
		"\u0005s\u0000\u0000\u0f6a\u0f6e\u0005\u0199\u0000\u0000\u0f6b\u0f6c\u0005"+
		"*\u0000\u0000\u0f6c\u0f6e\u0003\u0268\u0134\u0000\u0f6d\u0f69\u0001\u0000"+
		"\u0000\u0000\u0f6d\u0f6a\u0001\u0000\u0000\u0000\u0f6d\u0f6b\u0001\u0000"+
		"\u0000\u0000\u0f6e\u0f6f\u0001\u0000\u0000\u0000\u0f6f\u0f70\u0005u\u0000"+
		"\u0000\u0f70\u0f71\u0005\u0199\u0000\u0000\u0f71\u0109\u0001\u0000\u0000"+
		"\u0000\u0f72\u0f7b\u00074\u0000\u0000\u0f73\u0f7b\u0005J\u0000\u0000\u0f74"+
		"\u0f7b\u0005\u00a9\u0000\u0000\u0f75\u0f7b\u0005\u00a4\u0000\u0000\u0f76"+
		"\u0f7b\u0005\u00a2\u0000\u0000\u0f77\u0f7b\u0005\u026f\u0000\u0000\u0f78"+
		"\u0f7b\u00075\u0000\u0000\u0f79\u0f7b\u0005\u00a3\u0000\u0000\u0f7a\u0f72"+
		"\u0001\u0000\u0000\u0000\u0f7a\u0f73\u0001\u0000\u0000\u0000\u0f7a\u0f74"+
		"\u0001\u0000\u0000\u0000\u0f7a\u0f75\u0001\u0000\u0000\u0000\u0f7a\u0f76"+
		"\u0001\u0000\u0000\u0000\u0f7a\u0f77\u0001\u0000\u0000\u0000\u0f7a\u0f78"+
		"\u0001\u0000\u0000\u0000\u0f7a\u0f79\u0001\u0000\u0000\u0000\u0f7b\u010b"+
		"\u0001\u0000\u0000\u0000\u0f7c\u0f7f\u0005\u0456\u0000\u0000\u0f7d\u0f7f"+
		"\u0003\u010e\u0087\u0000\u0f7e\u0f7c\u0001\u0000\u0000\u0000\u0f7e\u0f7d"+
		"\u0001\u0000\u0000\u0000\u0f7f\u0f84\u0001\u0000\u0000\u0000\u0f80\u0f81"+
		"\u0005\u0468\u0000\u0000\u0f81\u0f83\u0003\u010e\u0087\u0000\u0f82\u0f80"+
		"\u0001\u0000\u0000\u0000\u0f83\u0f86\u0001\u0000\u0000\u0000\u0f84\u0f82"+
		"\u0001\u0000\u0000\u0000\u0f84\u0f85\u0001\u0000\u0000\u0000\u0f85\u010d"+
		"\u0001\u0000\u0000\u0000\u0f86\u0f84\u0001\u0000\u0000\u0000\u0f87\u0f88"+
		"\u0003\u021a\u010d\u0000\u0f88\u0f89\u0005\u0465\u0000\u0000\u0f89\u0f8a"+
		"\u0005\u0456\u0000\u0000\u0f8a\u0fa5\u0001\u0000\u0000\u0000\u0f8b\u0f90"+
		"\u0003\u0220\u0110\u0000\u0f8c\u0f8e\u0005\f\u0000\u0000\u0f8d\u0f8c\u0001"+
		"\u0000\u0000\u0000\u0f8d\u0f8e\u0001\u0000\u0000\u0000\u0f8e\u0f8f\u0001"+
		"\u0000\u0000\u0000\u0f8f\u0f91\u0003\u0236\u011b\u0000\u0f90\u0f8d\u0001"+
		"\u0000\u0000\u0000\u0f90\u0f91\u0001\u0000\u0000\u0000\u0f91\u0fa5\u0001"+
		"\u0000\u0000\u0000\u0f92\u0f97\u0003\u0276\u013b\u0000\u0f93\u0f95\u0005"+
		"\f\u0000\u0000\u0f94\u0f93\u0001\u0000\u0000\u0000\u0f94\u0f95\u0001\u0000"+
		"\u0000\u0000\u0f95\u0f96\u0001\u0000\u0000\u0000\u0f96\u0f98\u0003\u0236"+
		"\u011b\u0000\u0f97\u0f94\u0001\u0000\u0000\u0000\u0f97\u0f98\u0001\u0000"+
		"\u0000\u0000\u0f98\u0fa5\u0001\u0000\u0000\u0000\u0f99\u0f9a\u0005\u0481"+
		"\u0000\u0000\u0f9a\u0f9c\u0005\u044d\u0000\u0000\u0f9b\u0f99\u0001\u0000"+
		"\u0000\u0000\u0f9b\u0f9c\u0001\u0000\u0000\u0000\u0f9c\u0f9d\u0001\u0000"+
		"\u0000\u0000\u0f9d\u0fa2\u0003\u029e\u014f\u0000\u0f9e\u0fa0\u0005\f\u0000"+
		"\u0000\u0f9f\u0f9e\u0001\u0000\u0000\u0000\u0f9f\u0fa0\u0001\u0000\u0000"+
		"\u0000\u0fa0\u0fa1\u0001\u0000\u0000\u0000\u0fa1\u0fa3\u0003\u0236\u011b"+
		"\u0000\u0fa2\u0f9f\u0001\u0000\u0000\u0000\u0fa2\u0fa3\u0001\u0000\u0000"+
		"\u0000\u0fa3\u0fa5\u0001\u0000\u0000\u0000\u0fa4\u0f87\u0001\u0000\u0000"+
		"\u0000\u0fa4\u0f8b\u0001\u0000\u0000\u0000\u0fa4\u0f92\u0001\u0000\u0000"+
		"\u0000\u0fa4\u0f9b\u0001\u0000\u0000\u0000\u0fa5\u010f\u0001\u0000\u0000"+
		"\u0000\u0fa6\u0fa7\u0005V\u0000\u0000\u0fa7\u0fac\u0003\u00ceg\u0000\u0fa8"+
		"\u0fa9\u0005\u0468\u0000\u0000\u0fa9\u0fab\u0003\u00ceg\u0000\u0faa\u0fa8"+
		"\u0001\u0000\u0000\u0000\u0fab\u0fae\u0001\u0000\u0000\u0000\u0fac\u0faa"+
		"\u0001\u0000\u0000\u0000\u0fac\u0fad\u0001\u0000\u0000\u0000\u0fad\u0fcb"+
		"\u0001\u0000\u0000\u0000\u0fae\u0fac\u0001\u0000\u0000\u0000\u0faf\u0fb0"+
		"\u0005V\u0000\u0000\u0fb0\u0fb1\u0005\u018e\u0000\u0000\u0fb1\u0fcb\u0005"+
		"\u0475\u0000\u0000\u0fb2\u0fb3\u0005V\u0000\u0000\u0fb3\u0fb4\u0005~\u0000"+
		"\u0000\u0fb4\u0fb8\u0005\u0475\u0000\u0000\u0fb5\u0fb6\u0005\u0019\u0000"+
		"\u0000\u0fb6\u0fb7\u0005\u0098\u0000\u0000\u0fb7\u0fb9\u0003\u0228\u0114"+
		"\u0000\u0fb8\u0fb5\u0001\u0000\u0000\u0000\u0fb8\u0fb9\u0001\u0000\u0000"+
		"\u0000\u0fb9\u0fc0\u0001\u0000\u0000\u0000\u0fba\u0fbc\u0007)\u0000\u0000"+
		"\u0fbb\u0fbd\u0003\u0112\u0089\u0000\u0fbc\u0fbb\u0001\u0000\u0000\u0000"+
		"\u0fbd\u0fbe\u0001\u0000\u0000\u0000\u0fbe\u0fbc\u0001\u0000\u0000\u0000"+
		"\u0fbe\u0fbf\u0001\u0000\u0000\u0000\u0fbf\u0fc1\u0001\u0000\u0000\u0000"+
		"\u0fc0\u0fba\u0001\u0000\u0000\u0000\u0fc0\u0fc1\u0001\u0000\u0000\u0000"+
		"\u0fc1\u0fc8\u0001\u0000\u0000\u0000\u0fc2\u0fc4\u0005d\u0000\u0000\u0fc3"+
		"\u0fc5\u0003\u0114\u008a\u0000\u0fc4\u0fc3\u0001\u0000\u0000\u0000\u0fc5"+
		"\u0fc6\u0001\u0000\u0000\u0000\u0fc6\u0fc4\u0001\u0000\u0000\u0000\u0fc6"+
		"\u0fc7\u0001\u0000\u0000\u0000\u0fc7\u0fc9\u0001\u0000\u0000\u0000\u0fc8"+
		"\u0fc2\u0001\u0000\u0000\u0000\u0fc8\u0fc9\u0001\u0000\u0000\u0000\u0fc9"+
		"\u0fcb\u0001\u0000\u0000\u0000\u0fca\u0fa6\u0001\u0000\u0000\u0000\u0fca"+
		"\u0faf\u0001\u0000\u0000\u0000\u0fca\u0fb2\u0001\u0000\u0000\u0000\u0fcb"+
		"\u0111\u0001\u0000\u0000\u0000\u0fcc\u0fcd\u0005\u00ab\u0000\u0000\u0fcd"+
		"\u0fce\u0005\u0013\u0000\u0000\u0fce\u0fd9\u0005\u0475\u0000\u0000\u0fcf"+
		"\u0fd1\u0005y\u0000\u0000\u0fd0\u0fcf\u0001\u0000\u0000\u0000\u0fd0\u0fd1"+
		"\u0001\u0000\u0000\u0000\u0fd1\u0fd2\u0001\u0000\u0000\u0000\u0fd2\u0fd3"+
		"\u00058\u0000\u0000\u0fd3\u0fd4\u0005\u0013\u0000\u0000\u0fd4\u0fd9\u0005"+
		"\u0475\u0000\u0000\u0fd5\u0fd6\u00059\u0000\u0000\u0fd6\u0fd7\u0005\u0013"+
		"\u0000\u0000\u0fd7\u0fd9\u0005\u0475\u0000\u0000\u0fd8\u0fcc\u0001\u0000"+
		"\u0000\u0000\u0fd8\u0fd0\u0001\u0000\u0000\u0000\u0fd8\u0fd5\u0001\u0000"+
		"\u0000\u0000\u0fd9\u0113\u0001\u0000\u0000\u0000\u0fda\u0fdb\u0005\u00a7"+
		"\u0000\u0000\u0fdb\u0fdc\u0005\u0013\u0000\u0000\u0fdc\u0fe1\u0005\u0475"+
		"\u0000\u0000\u0fdd\u0fde\u0005\u00ab\u0000\u0000\u0fde\u0fdf\u0005\u0013"+
		"\u0000\u0000\u0fdf\u0fe1\u0005\u0475\u0000\u0000\u0fe0\u0fda\u0001\u0000"+
		"\u0000\u0000\u0fe0\u0fdd\u0001\u0000\u0000\u0000\u0fe1\u0115\u0001\u0000"+
		"\u0000\u0000\u0fe2\u0fe3\u0005C\u0000\u0000\u0fe3\u0fe5\u0003\u00e6s\u0000"+
		"\u0fe4\u0fe2\u0001\u0000\u0000\u0000\u0fe4\u0fe5\u0001\u0000\u0000\u0000"+
		"\u0fe5\u0fe8\u0001\u0000\u0000\u0000\u0fe6\u0fe7\u0005\u00bc\u0000\u0000"+
		"\u0fe7\u0fe9\u0003\u029e\u014f\u0000\u0fe8\u0fe6\u0001\u0000\u0000\u0000"+
		"\u0fe8\u0fe9\u0001\u0000\u0000\u0000\u0fe9\u0117\u0001\u0000\u0000\u0000"+
		"\u0fea\u0feb\u0005H\u0000\u0000\u0feb\u0fec\u0005\u0013\u0000\u0000\u0fec"+
		"\u0ff1\u0003\u011e\u008f\u0000\u0fed\u0fee\u0005\u0468\u0000\u0000\u0fee"+
		"\u0ff0\u0003\u011e\u008f\u0000\u0fef\u0fed\u0001\u0000\u0000\u0000\u0ff0"+
		"\u0ff3\u0001\u0000\u0000\u0000\u0ff1\u0fef\u0001\u0000\u0000\u0000\u0ff1"+
		"\u0ff2\u0001\u0000\u0000\u0000\u0ff2\u0ff6\u0001\u0000\u0000\u0000\u0ff3"+
		"\u0ff1\u0001\u0000\u0000\u0000\u0ff4\u0ff5\u0005\u00be\u0000\u0000\u0ff5"+
		"\u0ff7\u0005\u0254\u0000\u0000\u0ff6\u0ff4\u0001\u0000\u0000\u0000\u0ff6"+
		"\u0ff7\u0001\u0000\u0000\u0000\u0ff7\u0119\u0001\u0000\u0000\u0000\u0ff8"+
		"\u0ff9\u0005I\u0000\u0000\u0ff9\u0ffa\u0003\u029e\u014f\u0000\u0ffa\u011b"+
		"\u0001\u0000\u0000\u0000\u0ffb\u0ffc\u0005\u02a2\u0000\u0000\u0ffc\u0ffd"+
		"\u0003\u0288\u0144\u0000\u0ffd\u0ffe\u0005\f\u0000\u0000\u0ffe\u0fff\u0005"+
		"\u0466\u0000\u0000\u0fff\u1000\u0003\u0286\u0143\u0000\u1000\u100a\u0005"+
		"\u0467\u0000\u0000\u1001\u1002\u0005\u0468\u0000\u0000\u1002\u1003\u0003"+
		"\u0288\u0144\u0000\u1003\u1004\u0005\f\u0000\u0000\u1004\u1005\u0005\u0466"+
		"\u0000\u0000\u1005\u1006\u0003\u0286\u0143\u0000\u1006\u1007\u0005\u0467"+
		"\u0000\u0000\u1007\u1009\u0001\u0000\u0000\u0000\u1008\u1001\u0001\u0000"+
		"\u0000\u0000\u1009\u100c\u0001\u0000\u0000\u0000\u100a\u1008\u0001\u0000"+
		"\u0000\u0000\u100a\u100b\u0001\u0000\u0000\u0000\u100b\u011d\u0001\u0000"+
		"\u0000\u0000\u100c\u100a\u0001\u0000\u0000\u0000\u100d\u100f\u0003\u029e"+
		"\u014f\u0000\u100e\u1010\u00070\u0000\u0000\u100f\u100e\u0001\u0000\u0000"+
		"\u0000\u100f\u1010\u0001\u0000\u0000\u0000\u1010\u011f\u0001\u0000\u0000"+
		"\u0000\u1011\u101c\u0005b\u0000\u0000\u1012\u1013\u0003\u0122\u0091\u0000"+
		"\u1013\u1014\u0005\u0468\u0000\u0000\u1014\u1016\u0001\u0000\u0000\u0000"+
		"\u1015\u1012\u0001\u0000\u0000\u0000\u1015\u1016\u0001\u0000\u0000\u0000"+
		"\u1016\u1017\u0001\u0000\u0000\u0000\u1017\u101d\u0003\u0122\u0091\u0000"+
		"\u1018\u1019\u0003\u0122\u0091\u0000\u1019\u101a\u0005\u0212\u0000\u0000"+
		"\u101a\u101b\u0003\u0122\u0091\u0000\u101b\u101d\u0001\u0000\u0000\u0000"+
		"\u101c\u1015\u0001\u0000\u0000\u0000\u101c\u1018\u0001\u0000\u0000\u0000"+
		"\u101d\u0121\u0001\u0000\u0000\u0000\u101e\u1022\u0003\u023c\u011e\u0000"+
		"\u101f\u1022\u0003\u0226\u0113\u0000\u1020\u1022\u0003\u0238\u011c\u0000"+
		"\u1021\u101e\u0001\u0000\u0000\u0000\u1021\u101f\u0001\u0000\u0000\u0000"+
		"\u1021\u1020\u0001\u0000\u0000\u0000\u1022\u0123\u0001\u0000\u0000\u0000"+
		"\u1023\u1024\u0005\u0273\u0000\u0000\u1024\u102d\u0005\u028b\u0000\u0000"+
		"\u1025\u102a\u0003\u013a\u009d\u0000\u1026\u1027\u0005\u0468\u0000\u0000"+
		"\u1027\u1029\u0003\u013a\u009d\u0000\u1028\u1026\u0001\u0000\u0000\u0000"+
		"\u1029\u102c\u0001\u0000\u0000\u0000\u102a\u1028\u0001\u0000\u0000\u0000"+
		"\u102a\u102b\u0001\u0000\u0000\u0000\u102b\u102e\u0001\u0000\u0000\u0000"+
		"\u102c\u102a\u0001\u0000\u0000\u0000\u102d\u1025\u0001\u0000\u0000\u0000"+
		"\u102d\u102e\u0001\u0000\u0000\u0000\u102e\u0125\u0001\u0000\u0000\u0000"+
		"\u102f\u1031\u0005\u0156\u0000\u0000\u1030\u1032\u0005\u02a4\u0000\u0000"+
		"\u1031\u1030\u0001\u0000\u0000\u0000\u1031\u1032\u0001\u0000\u0000\u0000"+
		"\u1032\u0127\u0001\u0000\u0000\u0000\u1033\u1035\u0005\u016f\u0000\u0000"+
		"\u1034\u1036\u0005\u02a4\u0000\u0000\u1035\u1034\u0001\u0000\u0000\u0000"+
		"\u1035\u1036\u0001\u0000\u0000\u0000\u1036\u103c\u0001\u0000\u0000\u0000"+
		"\u1037\u1039\u0005\n\u0000\u0000\u1038\u103a\u0005\u0207\u0000\u0000\u1039"+
		"\u1038\u0001\u0000\u0000\u0000\u1039\u103a\u0001\u0000\u0000\u0000\u103a"+
		"\u103b\u0001\u0000\u0000\u0000\u103b\u103d\u0005\u015f\u0000\u0000\u103c"+
		"\u1037\u0001\u0000\u0000\u0000\u103c\u103d\u0001\u0000\u0000\u0000\u103d"+
		"\u1042\u0001\u0000\u0000\u0000\u103e\u1040\u0005\u0207\u0000\u0000\u103f"+
		"\u103e\u0001\u0000\u0000\u0000\u103f\u1040\u0001\u0000\u0000\u0000\u1040"+
		"\u1041\u0001\u0000\u0000\u0000\u1041\u1043\u0005\u0089\u0000\u0000\u1042"+
		"\u103f\u0001\u0000\u0000\u0000\u1042\u1043\u0001\u0000\u0000\u0000\u1043"+
		"\u0129\u0001\u0000\u0000\u0000\u1044\u1046\u0005\u0253\u0000\u0000\u1045"+
		"\u1047\u0005\u02a4\u0000\u0000\u1046\u1045\u0001\u0000\u0000\u0000\u1046"+
		"\u1047\u0001\u0000\u0000\u0000\u1047\u104d\u0001\u0000\u0000\u0000\u1048"+
		"\u104a\u0005\n\u0000\u0000\u1049\u104b\u0005\u0207\u0000\u0000\u104a\u1049"+
		"\u0001\u0000\u0000\u0000\u104a\u104b\u0001\u0000\u0000\u0000\u104b\u104c"+
		"\u0001\u0000\u0000\u0000\u104c\u104e\u0005\u015f\u0000\u0000\u104d\u1048"+
		"\u0001\u0000\u0000\u0000\u104d\u104e\u0001\u0000\u0000\u0000\u104e\u1053"+
		"\u0001\u0000\u0000\u0000\u104f\u1051\u0005\u0207\u0000\u0000\u1050\u104f"+
		"\u0001\u0000\u0000\u0000\u1050\u1051\u0001\u0000\u0000\u0000\u1051\u1052"+
		"\u0001\u0000\u0000\u0000\u1052\u1054\u0005\u0089\u0000\u0000\u1053\u1050"+
		"\u0001\u0000\u0000\u0000\u1053\u1054\u0001\u0000\u0000\u0000\u1054\u012b"+
		"\u0001\u0000\u0000\u0000\u1055\u1056\u0005\u025a\u0000\u0000\u1056\u1057"+
		"\u0003\u0236\u011b\u0000\u1057\u012d\u0001\u0000\u0000\u0000\u1058\u105a"+
		"\u0005\u0253\u0000\u0000\u1059\u105b\u0005\u02a4\u0000\u0000\u105a\u1059"+
		"\u0001\u0000\u0000\u0000\u105a\u105b\u0001\u0000\u0000\u0000\u105b\u105c"+
		"\u0001\u0000\u0000\u0000\u105c\u105e\u0005\u00ad\u0000\u0000\u105d\u105f"+
		"\u0005\u025a\u0000\u0000\u105e\u105d\u0001\u0000\u0000\u0000\u105e\u105f"+
		"\u0001\u0000\u0000\u0000\u105f\u1060\u0001\u0000\u0000\u0000\u1060\u1061"+
		"\u0003\u0236\u011b\u0000\u1061\u012f\u0001\u0000\u0000\u0000\u1062\u1063"+
		"\u0005\u0089\u0000\u0000\u1063\u1064\u0005\u025a\u0000\u0000\u1064\u1065"+
		"\u0003\u0236\u011b\u0000\u1065\u0131\u0001\u0000\u0000\u0000\u1066\u1067"+
		"\u0005f\u0000\u0000\u1067\u1068\u00076\u0000\u0000\u1068\u106d\u0003\u013c"+
		"\u009e\u0000\u1069\u106a\u0005\u0468\u0000\u0000\u106a\u106c\u0003\u013c"+
		"\u009e\u0000\u106b\u1069\u0001\u0000\u0000\u0000\u106c\u106f\u0001\u0000"+
		"\u0000\u0000\u106d\u106b\u0001\u0000\u0000\u0000\u106d\u106e\u0001\u0000"+
		"\u0000\u0000\u106e\u1071\u0001\u0000\u0000\u0000\u106f\u106d\u0001\u0000"+
		"\u0000\u0000\u1070\u1072\u0003\u0274\u013a\u0000\u1071\u1070\u0001\u0000"+
		"\u0000\u0000\u1071\u1072\u0001\u0000\u0000\u0000\u1072\u0133\u0001\u0000"+
		"\u0000\u0000\u1073\u1074\u0005\u00b4\u0000\u0000\u1074\u1075\u0005\u02e1"+
		"\u0000\u0000\u1075\u0135\u0001\u0000\u0000\u0000\u1076\u1077\u0005\u0098"+
		"\u0000\u0000\u1077\u1078\u0005\u0152\u0000\u0000\u1078\u1079\u0005\u045d"+
		"\u0000\u0000\u1079\u107a\u0007\u0018\u0000\u0000\u107a\u0137\u0001\u0000"+
		"\u0000\u0000\u107b\u107d\u0005\u0098\u0000\u0000\u107c\u107e\u00077\u0000"+
		"\u0000\u107d\u107c\u0001\u0000\u0000\u0000\u107d\u107e\u0001\u0000\u0000"+
		"\u0000\u107e\u107f\u0001\u0000\u0000\u0000\u107f\u1080\u0005\u028b\u0000"+
		"\u0000\u1080\u1085\u0003\u0140\u00a0\u0000\u1081\u1082\u0005\u0468\u0000"+
		"\u0000\u1082\u1084\u0003\u0140\u00a0\u0000\u1083\u1081\u0001\u0000\u0000"+
		"\u0000\u1084\u1087\u0001\u0000\u0000\u0000\u1085\u1083\u0001\u0000\u0000"+
		"\u0000\u1085\u1086\u0001\u0000\u0000\u0000\u1086\u0139\u0001\u0000\u0000"+
		"\u0000\u1087\u1085\u0001\u0000\u0000\u0000\u1088\u1089\u0005\u00be\u0000"+
		"\u0000\u1089\u108a\u0005\u0177\u0000\u0000\u108a\u1090\u0005\u0266\u0000"+
		"\u0000\u108b\u108c\u0005\u0085\u0000\u0000\u108c\u1090\u0005\u00bf\u0000"+
		"\u0000\u108d\u108e\u0005\u0085\u0000\u0000\u108e\u1090\u0005\u0218\u0000"+
		"\u0000\u108f\u1088\u0001\u0000\u0000\u0000\u108f\u108b\u0001\u0000\u0000"+
		"\u0000\u108f\u108d\u0001\u0000\u0000\u0000\u1090\u013b\u0001\u0000\u0000"+
		"\u0000\u1091\u1096\u0003\u021c\u010e\u0000\u1092\u1094\u0005\f\u0000\u0000"+
		"\u1093\u1092\u0001\u0000\u0000\u0000\u1093\u1094\u0001\u0000\u0000\u0000"+
		"\u1094\u1095\u0001\u0000\u0000\u0000\u1095\u1097\u0003\u0236\u011b\u0000"+
		"\u1096\u1093\u0001\u0000\u0000\u0000\u1096\u1097\u0001\u0000\u0000\u0000"+
		"\u1097\u1098\u0001\u0000\u0000\u0000\u1098\u1099\u0003\u013e\u009f\u0000"+
		"\u1099\u013d\u0001\u0000\u0000\u0000\u109a\u109c\u0005\u0085\u0000\u0000"+
		"\u109b\u109d\u0005\u01d8\u0000\u0000\u109c\u109b\u0001\u0000\u0000\u0000"+
		"\u109c\u109d\u0001\u0000\u0000\u0000\u109d\u10a3\u0001\u0000\u0000\u0000"+
		"\u109e\u10a0\u0005i\u0000\u0000\u109f\u109e\u0001\u0000\u0000\u0000\u109f"+
		"\u10a0\u0001\u0000\u0000\u0000\u10a0\u10a1\u0001\u0000\u0000\u0000\u10a1"+
		"\u10a3\u0005\u00bf\u0000\u0000\u10a2\u109a\u0001\u0000\u0000\u0000\u10a2"+
		"\u109f\u0001\u0000\u0000\u0000\u10a3\u013f\u0001\u0000\u0000\u0000\u10a4"+
		"\u10a5\u0005\u01ce\u0000\u0000\u10a5\u10a6\u0005\u01d6\u0000\u0000\u10a6"+
		"\u10ac\u0003\u0142\u00a1\u0000\u10a7\u10a8\u0005\u0085\u0000\u0000\u10a8"+
		"\u10ac\u0005\u00bf\u0000\u0000\u10a9\u10aa\u0005\u0085\u0000\u0000\u10aa"+
		"\u10ac\u0005\u0218\u0000\u0000\u10ab\u10a4\u0001\u0000\u0000\u0000\u10ab"+
		"\u10a7\u0001\u0000\u0000\u0000\u10ab\u10a9\u0001\u0000\u0000\u0000\u10ac"+
		"\u0141\u0001\u0000\u0000\u0000\u10ad\u10ae\u0005\u031a\u0000\u0000\u10ae"+
		"\u10b5\u0005\u0085\u0000\u0000\u10af\u10b0\u0005\u0085\u0000\u0000\u10b0"+
		"\u10b5\u0005\u031b\u0000\u0000\u10b1\u10b2\u0005\u0085\u0000\u0000\u10b2"+
		"\u10b5\u0005\u031c\u0000\u0000\u10b3\u10b5\u0005\u031d\u0000\u0000\u10b4"+
		"\u10ad\u0001\u0000\u0000\u0000\u10b4\u10af\u0001\u0000\u0000\u0000\u10b4"+
		"\u10b1\u0001\u0000\u0000\u0000\u10b4\u10b3\u0001\u0000\u0000\u0000\u10b5"+
		"\u0143\u0001\u0000\u0000\u0000\u10b6\u10b7\u0005\u0018\u0000\u0000\u10b7"+
		"\u10b8\u0005\u01db\u0000\u0000\u10b8\u10b9\u0005\u00ad\u0000\u0000\u10b9"+
		"\u10be\u0003\u0156\u00ab\u0000\u10ba\u10bb\u0005\u0468\u0000\u0000\u10bb"+
		"\u10bd\u0003\u0156\u00ab\u0000\u10bc\u10ba\u0001\u0000\u0000\u0000\u10bd"+
		"\u10c0\u0001\u0000\u0000\u0000\u10be\u10bc\u0001\u0000\u0000\u0000\u10be"+
		"\u10bf\u0001\u0000\u0000\u0000\u10bf\u10c2\u0001\u0000\u0000\u0000\u10c0"+
		"\u10be\u0001\u0000\u0000\u0000\u10c1\u10c3\u0003\u015e\u00af\u0000\u10c2"+
		"\u10c1\u0001\u0000\u0000\u0000\u10c2\u10c3\u0001\u0000\u0000\u0000\u10c3"+
		"\u0145\u0001\u0000\u0000\u0000\u10c4\u10c5\u0005\u0018\u0000\u0000\u10c5"+
		"\u10c6\u0005\u024a\u0000\u0000\u10c6\u10c7\u0005\u01ab\u0000\u0000\u10c7"+
		"\u10cc\u0003\u0160\u00b0\u0000\u10c8\u10c9\u0005\u0468\u0000\u0000\u10c9"+
		"\u10cb\u0003\u0160\u00b0\u0000\u10ca\u10c8\u0001\u0000\u0000\u0000\u10cb"+
		"\u10ce\u0001\u0000\u0000\u0000\u10cc\u10ca\u0001\u0000\u0000\u0000\u10cc"+
		"\u10cd\u0001\u0000\u0000\u0000\u10cd\u0147\u0001\u0000\u0000\u0000\u10ce"+
		"\u10cc\u0001\u0000\u0000\u0000\u10cf\u10d0\u0005\u0083\u0000\u0000\u10d0"+
		"\u10d1\u00078\u0000\u0000\u10d1\u10d6\u0005\u01da\u0000\u0000\u10d2\u10d3"+
		"\u0005\u00ad\u0000\u0000\u10d3\u10d7\u0005\u0475\u0000\u0000\u10d4\u10d5"+
		"\u0005\u000f\u0000\u0000\u10d5\u10d7\u0005\u0475\u0000\u0000\u10d6\u10d2"+
		"\u0001\u0000\u0000\u0000\u10d6\u10d4\u0001\u0000\u0000\u0000\u10d7\u0149"+
		"\u0001\u0000\u0000\u0000\u10d8\u10d9\u0005\u024b\u0000\u0000\u10d9\u10da"+
		"\u0005\u01db\u0000\u0000\u10da\u014b\u0001\u0000\u0000\u0000\u10db\u10dc"+
		"\u0005\u024b\u0000\u0000\u10dc\u10de\u0005\u0264\u0000\u0000\u10dd\u10df"+
		"\u0005\u0006\u0000\u0000\u10de\u10dd\u0001\u0000\u0000\u0000\u10de\u10df"+
		"\u0001\u0000\u0000\u0000\u10df\u10e1\u0001\u0000\u0000\u0000\u10e0\u10e2"+
		"\u0003\u015e\u00af\u0000\u10e1\u10e0\u0001\u0000\u0000\u0000\u10e1\u10e2"+
		"\u0001\u0000\u0000\u0000\u10e2\u014d\u0001\u0000\u0000\u0000\u10e3\u10e4"+
		"\u0005\u0273\u0000\u0000\u10e4\u10ed\u0005\u0264\u0000\u0000\u10e5\u10ea"+
		"\u0003\u0164\u00b2\u0000\u10e6\u10e7\u0005\u0468\u0000\u0000\u10e7\u10e9"+
		"\u0003\u0164\u00b2\u0000\u10e8\u10e6\u0001\u0000\u0000\u0000\u10e9\u10ec"+
		"\u0001\u0000\u0000\u0000\u10ea\u10e8\u0001\u0000\u0000\u0000\u10ea\u10eb"+
		"\u0001\u0000\u0000\u0000\u10eb\u10ee\u0001\u0000\u0000\u0000\u10ec\u10ea"+
		"\u0001\u0000\u0000\u0000\u10ed\u10e5\u0001\u0000\u0000\u0000\u10ed\u10ee"+
		"\u0001\u0000\u0000\u0000\u10ee\u10f1\u0001\u0000\u0000\u0000\u10ef\u10f0"+
		"\u0005\u0295\u0000\u0000\u10f0\u10f2\u0003\u0166\u00b3\u0000\u10f1\u10ef"+
		"\u0001\u0000\u0000\u0000\u10f1\u10f2\u0001\u0000\u0000\u0000\u10f2\u10f6"+
		"\u0001\u0000\u0000\u0000\u10f3\u10f5\u0003\u0168\u00b4\u0000\u10f4\u10f3"+
		"\u0001\u0000\u0000\u0000\u10f5\u10f8\u0001\u0000\u0000\u0000\u10f6\u10f4"+
		"\u0001\u0000\u0000\u0000\u10f6\u10f7\u0001\u0000\u0000\u0000\u10f7\u10fa"+
		"\u0001\u0000\u0000\u0000\u10f8\u10f6\u0001\u0000\u0000\u0000\u10f9\u10fb"+
		"\u0003\u015e\u00af\u0000\u10fa\u10f9\u0001\u0000\u0000\u0000\u10fa\u10fb"+
		"\u0001\u0000\u0000\u0000\u10fb\u014f\u0001\u0000\u0000\u0000\u10fc\u10fd"+
		"\u0005\u0279\u0000\u0000\u10fd\u1106\u0005\u0264\u0000\u0000\u10fe\u1103"+
		"\u0003\u0164\u00b2\u0000\u10ff\u1100\u0005\u0468\u0000\u0000\u1100\u1102"+
		"\u0003\u0164\u00b2\u0000\u1101\u10ff\u0001\u0000\u0000\u0000\u1102\u1105"+
		"\u0001\u0000\u0000\u0000\u1103\u1101\u0001\u0000\u0000\u0000\u1103\u1104"+
		"\u0001\u0000\u0000\u0000\u1104\u1107\u0001\u0000\u0000\u0000\u1105\u1103"+
		"\u0001\u0000\u0000\u0000\u1106\u10fe\u0001\u0000\u0000\u0000\u1106\u1107"+
		"\u0001\u0000\u0000\u0000\u1107\u0151\u0001\u0000\u0000\u0000\u1108\u1109"+
		"\u0005\u0273\u0000\u0000\u1109\u110a\u0005\u01b7\u0000\u0000\u110a\u0153"+
		"\u0001\u0000\u0000\u0000\u110b\u110c\u0005\u0279\u0000\u0000\u110c\u110d"+
		"\u0005\u01b7\u0000\u0000\u110d\u0155\u0001\u0000\u0000\u0000\u110e\u110f"+
		"\u0003\u0158\u00ac\u0000\u110f\u1110\u0005\u045d\u0000\u0000\u1110\u1111"+
		"\u0005\u0475\u0000\u0000\u1111\u112c\u0001\u0000\u0000\u0000\u1112\u1113"+
		"\u0003\u015a\u00ad\u0000\u1113\u1114\u0005\u045d\u0000\u0000\u1114\u1115"+
		"\u0003\u023c\u011e\u0000\u1115\u112c\u0001\u0000\u0000\u0000\u1116\u1117"+
		"\u0003\u015c\u00ae\u0000\u1117\u1118\u0005\u045d\u0000\u0000\u1118\u1119"+
		"\u0007\u0018\u0000\u0000\u1119\u112c\u0001\u0000\u0000\u0000\u111a\u111b"+
		"\u0005\u01df\u0000\u0000\u111b\u111c\u0005\u045d\u0000\u0000\u111c\u112c"+
		"\u0005\u0478\u0000\u0000\u111d\u111e\u0005\u01bf\u0000\u0000\u111e\u111f"+
		"\u0005\u045d\u0000\u0000\u111f\u1128\u0005\u0466\u0000\u0000\u1120\u1125"+
		"\u0003\u0236\u011b\u0000\u1121\u1122\u0005\u0468\u0000\u0000\u1122\u1124"+
		"\u0003\u0236\u011b\u0000\u1123\u1121\u0001\u0000\u0000\u0000\u1124\u1127"+
		"\u0001\u0000\u0000\u0000\u1125\u1123\u0001\u0000\u0000\u0000\u1125\u1126"+
		"\u0001\u0000\u0000\u0000\u1126\u1129\u0001\u0000\u0000\u0000\u1127\u1125"+
		"\u0001\u0000\u0000\u0000\u1128\u1120\u0001\u0000\u0000\u0000\u1128\u1129"+
		"\u0001\u0000\u0000\u0000\u1129\u112a\u0001\u0000\u0000\u0000\u112a\u112c"+
		"\u0005\u0467\u0000\u0000\u112b\u110e\u0001\u0000\u0000\u0000\u112b\u1112"+
		"\u0001\u0000\u0000\u0000\u112b\u1116\u0001\u0000\u0000\u0000\u112b\u111a"+
		"\u0001\u0000\u0000\u0000\u112b\u111d\u0001\u0000\u0000\u0000\u112c\u0157"+
		"\u0001\u0000\u0000\u0000\u112d\u112e\u00079\u0000\u0000\u112e\u0159\u0001"+
		"\u0000\u0000\u0000\u112f\u1130\u0007:\u0000\u0000\u1130\u015b\u0001\u0000"+
		"\u0000\u0000\u1131\u1132\u0007;\u0000\u0000\u1132\u015d\u0001\u0000\u0000"+
		"\u0000\u1133\u1134\u0005@\u0000\u0000\u1134\u1135\u0005\u0161\u0000\u0000"+
		"\u1135\u1136\u0005\u0475\u0000\u0000\u1136\u015f\u0001\u0000\u0000\u0000"+
		"\u1137\u1138\u0005\u0243\u0000\u0000\u1138\u1139\u0005\u045d\u0000\u0000"+
		"\u1139\u113a\u0005\u0466\u0000\u0000\u113a\u113b\u0003\u0256\u012b\u0000"+
		"\u113b\u113c\u0005\u0467\u0000\u0000\u113c\u1169\u0001\u0000\u0000\u0000"+
		"\u113d\u113e\u0005\u0245\u0000\u0000\u113e\u113f\u0005\u045d\u0000\u0000"+
		"\u113f\u1140\u0005\u0466\u0000\u0000\u1140\u1141\u0003\u0256\u012b\u0000"+
		"\u1141\u1142\u0005\u0467\u0000\u0000\u1142\u1169\u0001\u0000\u0000\u0000"+
		"\u1143\u1144\u0005\u0244\u0000\u0000\u1144\u1145\u0005\u045d\u0000\u0000"+
		"\u1145\u1146\u0005\u0466\u0000\u0000\u1146\u1147\u0003\u025a\u012d\u0000"+
		"\u1147\u1148\u0005\u0467\u0000\u0000\u1148\u1169\u0001\u0000\u0000\u0000"+
		"\u1149\u114a\u0005\u0246\u0000\u0000\u114a\u114b\u0005\u045d\u0000\u0000"+
		"\u114b\u114c\u0005\u0466\u0000\u0000\u114c\u114d\u0003\u025a\u012d\u0000"+
		"\u114d\u114e\u0005\u0467\u0000\u0000\u114e\u1169\u0001\u0000\u0000\u0000"+
		"\u114f\u1150\u0005\u0248\u0000\u0000\u1150\u1151\u0005\u045d\u0000\u0000"+
		"\u1151\u1152\u0005\u0466\u0000\u0000\u1152\u1153\u0003\u0264\u0132\u0000"+
		"\u1153\u1154\u0005\u0467\u0000\u0000\u1154\u1169\u0001\u0000\u0000\u0000"+
		"\u1155\u1156\u0005\u0249\u0000\u0000\u1156\u1157\u0005\u045d\u0000\u0000"+
		"\u1157\u1158\u0005\u0466\u0000\u0000\u1158\u1159\u0003\u0264\u0132\u0000"+
		"\u1159\u115a\u0005\u0467\u0000\u0000\u115a\u1169\u0001\u0000\u0000\u0000"+
		"\u115b\u115c\u0005\u0247\u0000\u0000\u115c\u115d\u0005\u045d\u0000\u0000"+
		"\u115d\u115e\u0005\u0466\u0000\u0000\u115e\u1163\u0003\u0162\u00b1\u0000"+
		"\u115f\u1160\u0005\u0468\u0000\u0000\u1160\u1162\u0003\u0162\u00b1\u0000"+
		"\u1161\u115f\u0001\u0000\u0000\u0000\u1162\u1165\u0001\u0000\u0000\u0000"+
		"\u1163\u1161\u0001\u0000\u0000\u0000\u1163\u1164\u0001\u0000\u0000\u0000"+
		"\u1164\u1166\u0001\u0000\u0000\u0000\u1165\u1163\u0001\u0000\u0000\u0000"+
		"\u1166\u1167\u0005\u0467\u0000\u0000\u1167\u1169\u0001\u0000\u0000\u0000"+
		"\u1168\u1137\u0001\u0000\u0000\u0000\u1168\u113d\u0001\u0000\u0000\u0000"+
		"\u1168\u1143\u0001\u0000\u0000\u0000\u1168\u1149\u0001\u0000\u0000\u0000"+
		"\u1168\u114f\u0001\u0000\u0000\u0000\u1168\u1155\u0001\u0000\u0000\u0000"+
		"\u1168\u115b\u0001\u0000\u0000\u0000\u1169\u0161\u0001\u0000\u0000\u0000"+
		"\u116a\u116b\u0005\u0466\u0000\u0000\u116b\u116c\u0003\u021c\u010e\u0000"+
		"\u116c\u116d\u0005\u0468\u0000\u0000\u116d\u116e\u0003\u021c\u010e\u0000"+
		"\u116e\u116f\u0005\u0467\u0000\u0000\u116f\u0163\u0001\u0000\u0000\u0000"+
		"\u1170\u1171\u0007<\u0000\u0000\u1171\u0165\u0001\u0000\u0000\u0000\u1172"+
		"\u1173\u0007=\u0000\u0000\u1173\u1174\u0005\u045d\u0000\u0000\u1174\u1185"+
		"\u0003\u016a\u00b5\u0000\u1175\u1176\u0005\u01e1\u0000\u0000\u1176\u1177"+
		"\u0005\u045d\u0000\u0000\u1177\u1178\u0005\u0475\u0000\u0000\u1178\u1179"+
		"\u0005\u0468\u0000\u0000\u1179\u117a\u0005\u01e2\u0000\u0000\u117a\u117b"+
		"\u0005\u045d\u0000\u0000\u117b\u1185\u0003\u023c\u011e\u0000\u117c\u117d"+
		"\u0005\u023d\u0000\u0000\u117d\u117e\u0005\u045d\u0000\u0000\u117e\u117f"+
		"\u0005\u0475\u0000\u0000\u117f\u1180\u0005\u0468\u0000\u0000\u1180\u1181"+
		"\u0005\u023e\u0000\u0000\u1181\u1182\u0005\u045d\u0000\u0000\u1182\u1185"+
		"\u0003\u023c\u011e\u0000\u1183\u1185\u0005\u026d\u0000\u0000\u1184\u1172"+
		"\u0001\u0000\u0000\u0000\u1184\u1175\u0001\u0000\u0000\u0000\u1184\u117c"+
		"\u0001\u0000\u0000\u0000\u1184\u1183\u0001\u0000\u0000\u0000\u1185\u0167"+
		"\u0001\u0000\u0000\u0000\u1186\u1187\u0005\u0297\u0000\u0000\u1187\u1188"+
		"\u0005\u045d\u0000\u0000\u1188\u1193\u0005\u0475\u0000\u0000\u1189\u118a"+
		"\u0005\u0225\u0000\u0000\u118a\u118b\u0005\u045d\u0000\u0000\u118b\u1193"+
		"\u0005\u0475\u0000\u0000\u118c\u118d\u0005\u0185\u0000\u0000\u118d\u118e"+
		"\u0005\u045d\u0000\u0000\u118e\u1193\u0005\u0475\u0000\u0000\u118f\u1190"+
		"\u0005\u0229\u0000\u0000\u1190\u1191\u0005\u045d\u0000\u0000\u1191\u1193"+
		"\u0005\u0475\u0000\u0000\u1192\u1186\u0001\u0000\u0000\u0000\u1192\u1189"+
		"\u0001\u0000\u0000\u0000\u1192\u118c\u0001\u0000\u0000\u0000\u1192\u118f"+
		"\u0001\u0000\u0000\u0000\u1193\u0169\u0001\u0000\u0000\u0000\u1194\u1199"+
		"\u0003\u022e\u0117\u0000\u1195\u1196\u0005\u0468\u0000\u0000\u1196\u1198"+
		"\u0003\u022e\u0117\u0000\u1197\u1195\u0001\u0000\u0000\u0000\u1198\u119b"+
		"\u0001\u0000\u0000\u0000\u1199\u1197\u0001\u0000\u0000\u0000\u1199\u119a"+
		"\u0001\u0000\u0000\u0000\u119a\u119e\u0001\u0000\u0000\u0000\u119b\u1199"+
		"\u0001\u0000\u0000\u0000\u119c\u119e\u0005\u0475\u0000\u0000\u119d\u1194"+
		"\u0001\u0000\u0000\u0000\u119d\u119c\u0001\u0000\u0000\u0000\u119e\u016b"+
		"\u0001\u0000\u0000\u0000\u119f\u11a0\u0005\u02a7\u0000\u0000\u11a0\u11a1"+
		"\u0007>\u0000\u0000\u11a1\u11a3\u0003\u0230\u0118\u0000\u11a2\u11a4\u0007"+
		"?\u0000\u0000\u11a3\u11a2\u0001\u0000\u0000\u0000\u11a3\u11a4\u0001\u0000"+
		"\u0000\u0000\u11a4\u016d\u0001\u0000\u0000\u0000\u11a5\u11a6\u0005\u02a7"+
		"\u0000\u0000\u11a6\u11a7\u0005\u0195\u0000\u0000\u11a7\u11ad\u0003\u0230"+
		"\u0118\u0000\u11a8\u11ab\u0005\u0281\u0000\u0000\u11a9\u11aa\u0005@\u0000"+
		"\u0000\u11aa\u11ac\u0005\u01fb\u0000\u0000\u11ab\u11a9\u0001\u0000\u0000"+
		"\u0000\u11ab\u11ac\u0001\u0000\u0000\u0000\u11ac\u11ae\u0001\u0000\u0000"+
		"\u0000\u11ad\u11a8\u0001\u0000\u0000\u0000\u11ad\u11ae\u0001\u0000\u0000"+
		"\u0000\u11ae\u016f\u0001\u0000\u0000\u0000\u11af\u11b0\u0005\u02a7\u0000"+
		"\u0000\u11b0\u11b1\u0005\u022e\u0000\u0000\u11b1\u11b2\u0003\u0230\u0118"+
		"\u0000\u11b2\u0171\u0001\u0000\u0000\u0000\u11b3\u11b4\u0005\u02a7\u0000"+
		"\u0000\u11b4\u11b5\u0005\u016f\u0000\u0000\u11b5\u11b8\u0003\u0230\u0118"+
		"\u0000\u11b6\u11b7\u0005\u0216\u0000\u0000\u11b7\u11b9\u0005\u0227\u0000"+
		"\u0000\u11b8\u11b6\u0001\u0000\u0000\u0000\u11b8\u11b9\u0001\u0000\u0000"+
		"\u0000\u11b9\u0173\u0001\u0000\u0000\u0000\u11ba\u11bb\u0005\u02a7\u0000"+
		"\u0000\u11bb\u11bc\u0005\u0253\u0000\u0000\u11bc\u11bd\u0003\u0230\u0118"+
		"\u0000\u11bd\u0175\u0001\u0000\u0000\u0000\u11be\u11bf\u0005\u02a7\u0000"+
		"\u0000\u11bf\u11c2\u0005\u0238\u0000\u0000\u11c0\u11c1\u0005 \u0000\u0000"+
		"\u11c1\u11c3\u0003\u0230\u0118\u0000\u11c2\u11c0\u0001\u0000\u0000\u0000"+
		"\u11c2\u11c3\u0001\u0000\u0000\u0000\u11c3\u0177\u0001\u0000\u0000\u0000"+
		"\u11c4\u11c5\u0005\u022e\u0000\u0000\u11c5\u11c6\u0003\u0236\u011b\u0000"+
		"\u11c6\u11c9\u0005C\u0000\u0000\u11c7\u11ca\u0005\u0475\u0000\u0000\u11c8"+
		"\u11ca\u0005\u0481\u0000\u0000\u11c9\u11c7\u0001\u0000\u0000\u0000\u11c9"+
		"\u11c8\u0001\u0000\u0000\u0000\u11ca\u0179\u0001\u0000\u0000\u0000\u11cb"+
		"\u11cc\u0005\u02c0\u0000\u0000\u11cc\u11cf\u0003\u0236\u011b\u0000\u11cd"+
		"\u11ce\u0005\u00b9\u0000\u0000\u11ce\u11d0\u0003\u0266\u0133\u0000\u11cf"+
		"\u11cd\u0001\u0000\u0000\u0000\u11cf\u11d0\u0001\u0000\u0000\u0000\u11d0"+
		"\u017b\u0001\u0000\u0000\u0000\u11d1\u11d2\u0007@\u0000\u0000\u11d2\u11d3"+
		"\u0005\u022e\u0000\u0000\u11d3\u11d4\u0003\u0236\u011b\u0000\u11d4\u017d"+
		"\u0001\u0000\u0000\u0000\u11d5\u11d8\u0003\u0180\u00c0\u0000\u11d6\u11d8"+
		"\u0003\u0004\u0002\u0000\u11d7\u11d5\u0001\u0000\u0000\u0000\u11d7\u11d6"+
		"\u0001\u0000\u0000\u0000\u11d8\u017f\u0001\u0000\u0000\u0000\u11d9\u11da"+
		"\u0003\u0236\u011b\u0000\u11da\u11db\u0005\u0471\u0000\u0000\u11db\u11dd"+
		"\u0001\u0000\u0000\u0000\u11dc\u11d9\u0001\u0000\u0000\u0000\u11dc\u11dd"+
		"\u0001\u0000\u0000\u0000\u11dd\u11de\u0001\u0000\u0000\u0000\u11de\u11e4"+
		"\u0005\u0156\u0000\u0000\u11df\u11e0\u0003\u0194\u00ca\u0000\u11e0\u11e1"+
		"\u0005\u0469\u0000\u0000\u11e1\u11e3\u0001\u0000\u0000\u0000\u11e2\u11df"+
		"\u0001\u0000\u0000\u0000\u11e3\u11e6\u0001\u0000\u0000\u0000\u11e4\u11e2"+
		"\u0001\u0000\u0000\u0000\u11e4\u11e5\u0001\u0000\u0000\u0000\u11e5\u11ec"+
		"\u0001\u0000\u0000\u0000\u11e6\u11e4\u0001\u0000\u0000\u0000\u11e7\u11e8"+
		"\u0003\u0196\u00cb\u0000\u11e8\u11e9\u0005\u0469\u0000\u0000\u11e9\u11eb"+
		"\u0001\u0000\u0000\u0000\u11ea\u11e7\u0001\u0000\u0000\u0000\u11eb\u11ee"+
		"\u0001\u0000\u0000\u0000\u11ec\u11ea\u0001\u0000\u0000\u0000\u11ec\u11ed"+
		"\u0001\u0000\u0000\u0000\u11ed\u11f4\u0001\u0000\u0000\u0000\u11ee\u11ec"+
		"\u0001\u0000\u0000\u0000\u11ef\u11f0\u0003\u0198\u00cc\u0000\u11f0\u11f1"+
		"\u0005\u0469\u0000\u0000\u11f1\u11f3\u0001\u0000\u0000\u0000\u11f2\u11ef"+
		"\u0001\u0000\u0000\u0000\u11f3\u11f6\u0001\u0000\u0000\u0000\u11f4\u11f2"+
		"\u0001\u0000\u0000\u0000\u11f4\u11f5\u0001\u0000\u0000\u0000\u11f5\u11fc"+
		"\u0001\u0000\u0000\u0000\u11f6\u11f4\u0001\u0000\u0000\u0000\u11f7\u11f8"+
		"\u0003\u019a\u00cd\u0000\u11f8\u11f9\u0005\u0469\u0000\u0000\u11f9\u11fb"+
		"\u0001\u0000\u0000\u0000\u11fa\u11f7\u0001\u0000\u0000\u0000\u11fb\u11fe"+
		"\u0001\u0000\u0000\u0000\u11fc\u11fa\u0001\u0000\u0000\u0000\u11fc\u11fd"+
		"\u0001\u0000\u0000\u0000\u11fd\u1202\u0001\u0000\u0000\u0000\u11fe\u11fc"+
		"\u0001\u0000\u0000\u0000\u11ff\u1201\u0003\u019e\u00cf\u0000\u1200\u11ff"+
		"\u0001\u0000\u0000\u0000\u1201\u1204\u0001\u0000\u0000\u0000\u1202\u1200"+
		"\u0001\u0000\u0000\u0000\u1202\u1203\u0001\u0000\u0000\u0000\u1203\u1205"+
		"\u0001\u0000\u0000\u0000\u1204\u1202\u0001\u0000\u0000\u0000\u1205\u1207"+
		"\u0005\u0195\u0000\u0000\u1206\u1208\u0003\u0236\u011b\u0000\u1207\u1206"+
		"\u0001\u0000\u0000\u0000\u1207\u1208\u0001\u0000\u0000\u0000\u1208\u0181"+
		"\u0001\u0000\u0000\u0000\u1209\u120c\u0005\u0016\u0000\u0000\u120a\u120d"+
		"\u0003\u0236\u011b\u0000\u120b\u120d\u0003\u029e\u014f\u0000\u120c\u120a"+
		"\u0001\u0000\u0000\u0000\u120c\u120b\u0001\u0000\u0000\u0000\u120c\u120d"+
		"\u0001\u0000\u0000\u0000\u120d\u120f\u0001\u0000\u0000\u0000\u120e\u1210"+
		"\u0003\u01a0\u00d0\u0000\u120f\u120e\u0001\u0000\u0000\u0000\u1210\u1211"+
		"\u0001\u0000\u0000\u0000\u1211\u120f\u0001\u0000\u0000\u0000\u1211\u1212"+
		"\u0001\u0000\u0000\u0000\u1212\u1219\u0001\u0000\u0000\u0000\u1213\u1215"+
		"\u00055\u0000\u0000\u1214\u1216\u0003\u019e\u00cf\u0000\u1215\u1214\u0001"+
		"\u0000\u0000\u0000\u1216\u1217\u0001\u0000\u0000\u0000\u1217\u1215\u0001"+
		"\u0000\u0000\u0000\u1217\u1218\u0001\u0000\u0000\u0000\u1218\u121a\u0001"+
		"\u0000\u0000\u0000\u1219\u1213\u0001\u0000\u0000\u0000\u1219\u121a\u0001"+
		"\u0000\u0000\u0000\u121a\u121b\u0001\u0000\u0000\u0000\u121b\u121c\u0005"+
		"\u0195\u0000\u0000\u121c\u121d\u0005\u0016\u0000\u0000\u121d\u0183\u0001"+
		"\u0000\u0000\u0000\u121e\u121f\u0005L\u0000\u0000\u121f\u1220\u0003\u029e"+
		"\u014f\u0000\u1220\u1222\u0005\u00ac\u0000\u0000\u1221\u1223\u0003\u019e"+
		"\u00cf\u0000\u1222\u1221\u0001\u0000\u0000\u0000\u1223\u1224\u0001\u0000"+
		"\u0000\u0000\u1224\u1222\u0001\u0000\u0000\u0000\u1224\u1225\u0001\u0000"+
		"\u0000\u0000\u1225\u1229\u0001\u0000\u0000\u0000\u1226\u1228\u0003\u01a2"+
		"\u00d1\u0000\u1227\u1226\u0001\u0000\u0000\u0000\u1228\u122b\u0001\u0000"+
		"\u0000\u0000\u1229\u1227\u0001\u0000\u0000\u0000\u1229\u122a\u0001\u0000"+
		"\u0000\u0000\u122a\u1232\u0001\u0000\u0000\u0000\u122b\u1229\u0001\u0000"+
		"\u0000\u0000\u122c\u122e\u00055\u0000\u0000\u122d\u122f\u0003\u019e\u00cf"+
		"\u0000\u122e\u122d\u0001\u0000\u0000\u0000\u122f\u1230\u0001\u0000\u0000"+
		"\u0000\u1230\u122e\u0001\u0000\u0000\u0000\u1230\u1231\u0001\u0000\u0000"+
		"\u0000\u1231\u1233\u0001\u0000\u0000\u0000\u1232\u122c\u0001\u0000\u0000"+
		"\u0000\u1232\u1233\u0001\u0000\u0000\u0000\u1233\u1234\u0001\u0000\u0000"+
		"\u0000\u1234\u1235\u0005\u0195\u0000\u0000\u1235\u1236\u0005L\u0000\u0000"+
		"\u1236\u0185\u0001\u0000\u0000\u0000\u1237\u1238\u0005X\u0000\u0000\u1238"+
		"\u1239\u0003\u0236\u011b\u0000\u1239\u0187\u0001\u0000\u0000\u0000\u123a"+
		"\u123b\u0005_\u0000\u0000\u123b\u123c\u0003\u0236\u011b\u0000\u123c\u0189"+
		"\u0001\u0000\u0000\u0000\u123d\u123e\u0003\u0236\u011b\u0000\u123e\u123f"+
		"\u0005\u0471\u0000\u0000\u123f\u1241\u0001\u0000\u0000\u0000\u1240\u123d"+
		"\u0001\u0000\u0000\u0000\u1240\u1241\u0001\u0000\u0000\u0000\u1241\u1242"+
		"\u0001\u0000\u0000\u0000\u1242\u1244\u0005h\u0000\u0000\u1243\u1245\u0003"+
		"\u019e\u00cf\u0000\u1244\u1243\u0001\u0000\u0000\u0000\u1245\u1246\u0001"+
		"\u0000\u0000\u0000\u1246\u1244\u0001\u0000\u0000\u0000\u1246\u1247\u0001"+
		"\u0000\u0000\u0000\u1247\u1248\u0001\u0000\u0000\u0000\u1248\u1249\u0005"+
		"\u0195\u0000\u0000\u1249\u124b\u0005h\u0000\u0000\u124a\u124c\u0003\u0236"+
		"\u011b\u0000\u124b\u124a\u0001\u0000\u0000\u0000\u124b\u124c\u0001\u0000"+
		"\u0000\u0000\u124c\u018b\u0001\u0000\u0000\u0000\u124d\u124e\u0003\u0236"+
		"\u011b\u0000\u124e\u124f\u0005\u0471\u0000\u0000\u124f\u1251\u0001\u0000"+
		"\u0000\u0000\u1250\u124d\u0001\u0000\u0000\u0000\u1250\u1251\u0001\u0000"+
		"\u0000\u0000\u1251\u1252\u0001\u0000\u0000\u0000\u1252\u1254\u0005\u008b"+
		"\u0000\u0000\u1253\u1255\u0003\u019e\u00cf\u0000\u1254\u1253\u0001\u0000"+
		"\u0000\u0000\u1255\u1256\u0001\u0000\u0000\u0000\u1256\u1254\u0001\u0000"+
		"\u0000\u0000\u1256\u1257\u0001\u0000\u0000\u0000\u1257\u1258\u0001\u0000"+
		"\u0000\u0000\u1258\u1259\u0005\u0295\u0000\u0000\u1259\u125a\u0003\u029e"+
		"\u014f\u0000\u125a\u125b\u0005\u0195\u0000\u0000\u125b\u125d\u0005\u008b"+
		"\u0000\u0000\u125c\u125e\u0003\u0236\u011b\u0000\u125d\u125c\u0001\u0000"+
		"\u0000\u0000\u125d\u125e\u0001\u0000\u0000\u0000\u125e\u018d\u0001\u0000"+
		"\u0000\u0000\u125f\u1260\u0005\u0091\u0000\u0000\u1260\u1261\u0003\u029e"+
		"\u014f\u0000\u1261\u018f\u0001\u0000\u0000\u0000\u1262\u1263\u0003\u0236"+
		"\u011b\u0000\u1263\u1264\u0005\u0471\u0000\u0000\u1264\u1266\u0001\u0000"+
		"\u0000\u0000\u1265\u1262\u0001\u0000\u0000\u0000\u1265\u1266\u0001\u0000"+
		"\u0000\u0000\u1266\u1267\u0001\u0000\u0000\u0000\u1267\u1268\u0005\u00bd"+
		"\u0000\u0000\u1268\u1269\u0003\u029e\u014f\u0000\u1269\u126b\u0005\u018d"+
		"\u0000\u0000\u126a\u126c\u0003\u019e\u00cf\u0000\u126b\u126a\u0001\u0000"+
		"\u0000\u0000\u126c\u126d\u0001\u0000\u0000\u0000\u126d\u126b\u0001\u0000"+
		"\u0000\u0000\u126d\u126e\u0001\u0000\u0000\u0000\u126e\u126f\u0001\u0000"+
		"\u0000\u0000\u126f\u1270\u0005\u0195\u0000\u0000\u1270\u1272\u0005\u00bd"+
		"\u0000\u0000\u1271\u1273\u0003\u0236\u011b\u0000\u1272\u1271\u0001\u0000"+
		"\u0000\u0000\u1272\u1273\u0001\u0000\u0000\u0000\u1273\u0191\u0001\u0000"+
		"\u0000\u0000\u1274\u1275\u0005\u0167\u0000\u0000\u1275\u1284\u0003\u0236"+
		"\u011b\u0000\u1276\u127b\u0005?\u0000\u0000\u1277\u1279\u0005\u0206\u0000"+
		"\u0000\u1278\u1277\u0001\u0000\u0000\u0000\u1278\u1279\u0001\u0000\u0000"+
		"\u0000\u1279\u127a\u0001\u0000\u0000\u0000\u127a\u127c\u0005C\u0000\u0000"+
		"\u127b\u1278\u0001\u0000\u0000\u0000\u127b\u127c\u0001\u0000\u0000\u0000"+
		"\u127c\u127d\u0001\u0000\u0000\u0000\u127d\u127e\u0003\u0236\u011b\u0000"+
		"\u127e\u127f\u0005V\u0000\u0000\u127f\u1280\u0003\u0256\u012b\u0000\u1280"+
		"\u1284\u0001\u0000\u0000\u0000\u1281\u1282\u0005\u0219\u0000\u0000\u1282"+
		"\u1284\u0003\u0236\u011b\u0000\u1283\u1274\u0001\u0000\u0000\u0000\u1283"+
		"\u1276\u0001\u0000\u0000\u0000\u1283\u1281\u0001\u0000\u0000\u0000\u1284"+
		"\u0193\u0001\u0000\u0000\u0000\u1285\u1286\u0005)\u0000\u0000\u1286\u1287"+
		"\u0003\u0256\u012b\u0000\u1287\u128a\u0003\u024a\u0125\u0000\u1288\u1289"+
		"\u0005*\u0000\u0000\u1289\u128b\u0003\u029e\u014f\u0000\u128a\u1288\u0001"+
		"\u0000\u0000\u0000\u128a\u128b\u0001\u0000\u0000\u0000\u128b\u0195\u0001"+
		"\u0000\u0000\u0000\u128c\u128d\u0005)\u0000\u0000\u128d\u128e\u0003\u0236"+
		"\u011b\u0000\u128e\u128f\u0005\u001d\u0000\u0000\u128f\u1296\u0005@\u0000"+
		"\u0000\u1290\u1297\u0003\u023c\u011e\u0000\u1291\u1293\u0005\u00a0\u0000"+
		"\u0000\u1292\u1294\u0005\u029b\u0000\u0000\u1293\u1292\u0001\u0000\u0000"+
		"\u0000\u1293\u1294\u0001\u0000\u0000\u0000\u1294\u1295\u0001\u0000\u0000"+
		"\u0000\u1295\u1297\u0005\u0475\u0000\u0000\u1296\u1290\u0001\u0000\u0000"+
		"\u0000\u1296\u1291\u0001\u0000\u0000\u0000\u1297\u0197\u0001\u0000\u0000"+
		"\u0000\u1298\u1299\u0005)\u0000\u0000\u1299\u129a\u0003\u0236\u011b\u0000"+
		"\u129a\u129b\u0005&\u0000\u0000\u129b\u129c\u0005@\u0000\u0000\u129c\u129d"+
		"\u0003\u00c4b\u0000\u129d\u0199\u0001\u0000\u0000\u0000\u129e\u129f\u0005"+
		")\u0000\u0000\u129f\u12a0\u0007A\u0000\u0000\u12a0\u12a1\u0005\u01b8\u0000"+
		"\u0000\u12a1\u12a2\u0005@\u0000\u0000\u12a2\u12a7\u0003\u019c\u00ce\u0000"+
		"\u12a3\u12a4\u0005\u0468\u0000\u0000\u12a4\u12a6\u0003\u019c\u00ce\u0000"+
		"\u12a5\u12a3\u0001\u0000\u0000\u0000\u12a6\u12a9\u0001\u0000\u0000\u0000"+
		"\u12a7\u12a5\u0001\u0000\u0000\u0000\u12a7\u12a8\u0001\u0000\u0000\u0000"+
		"\u12a8\u12aa\u0001\u0000\u0000\u0000\u12a9\u12a7\u0001\u0000\u0000\u0000"+
		"\u12aa\u12ab\u0003\u017e\u00bf\u0000\u12ab\u019b\u0001\u0000\u0000\u0000"+
		"\u12ac\u12b8\u0003\u023c\u011e\u0000\u12ad\u12af\u0005\u00a0\u0000\u0000"+
		"\u12ae\u12b0\u0005\u029b\u0000\u0000\u12af\u12ae\u0001\u0000\u0000\u0000"+
		"\u12af\u12b0\u0001\u0000\u0000\u0000\u12b0\u12b1\u0001\u0000\u0000\u0000"+
		"\u12b1\u12b8\u0005\u0475\u0000\u0000\u12b2\u12b8\u0003\u0236\u011b\u0000"+
		"\u12b3\u12b8\u0005\u00a1\u0000\u0000\u12b4\u12b5\u0005q\u0000\u0000\u12b5"+
		"\u12b8\u0005\u01b1\u0000\u0000\u12b6\u12b8\u0005\u009f\u0000\u0000\u12b7"+
		"\u12ac\u0001\u0000\u0000\u0000\u12b7\u12ad\u0001\u0000\u0000\u0000\u12b7"+
		"\u12b2\u0001\u0000\u0000\u0000\u12b7\u12b3\u0001\u0000\u0000\u0000\u12b7"+
		"\u12b4\u0001\u0000\u0000\u0000\u12b7\u12b6\u0001\u0000\u0000\u0000\u12b8"+
		"\u019d\u0001\u0000\u0000\u0000\u12b9\u12bc\u0003\u0012\t\u0000\u12ba\u12bc"+
		"\u0003\u0004\u0002\u0000\u12bb\u12b9\u0001\u0000\u0000\u0000\u12bb\u12ba"+
		"\u0001\u0000\u0000\u0000\u12bc\u12bd\u0001\u0000\u0000\u0000\u12bd\u12be"+
		"\u0005\u0469\u0000\u0000\u12be\u019f\u0001\u0000\u0000\u0000\u12bf\u12c2"+
		"\u0005\u00bb\u0000\u0000\u12c0\u12c3\u0003\u0248\u0124\u0000\u12c1\u12c3"+
		"\u0003\u029e\u014f\u0000\u12c2\u12c0\u0001\u0000\u0000\u0000\u12c2\u12c1"+
		"\u0001\u0000\u0000\u0000\u12c3\u12c4\u0001\u0000\u0000\u0000\u12c4\u12c6"+
		"\u0005\u00ac\u0000\u0000\u12c5\u12c7\u0003\u019e\u00cf\u0000\u12c6\u12c5"+
		"\u0001\u0000\u0000\u0000\u12c7\u12c8\u0001\u0000\u0000\u0000\u12c8\u12c6"+
		"\u0001\u0000\u0000\u0000\u12c8\u12c9\u0001\u0000\u0000\u0000\u12c9\u01a1"+
		"\u0001\u0000\u0000\u0000\u12ca\u12cb\u00056\u0000\u0000\u12cb\u12cc\u0003"+
		"\u029e\u014f\u0000\u12cc\u12ce\u0005\u00ac\u0000\u0000\u12cd\u12cf\u0003"+
		"\u019e\u00cf\u0000\u12ce\u12cd\u0001\u0000\u0000\u0000\u12cf\u12d0\u0001"+
		"\u0000\u0000\u0000\u12d0\u12ce\u0001\u0000\u0000\u0000\u12d0\u12d1\u0001"+
		"\u0000\u0000\u0000\u12d1\u01a3\u0001\u0000\u0000\u0000\u12d2\u12d3\u0005"+
		"\u0007\u0000\u0000\u12d3\u12d4\u0005\u0297\u0000\u0000\u12d4\u12d9\u0003"+
		"\u01b8\u00dc\u0000\u12d5\u12d6\u0005\u0468\u0000\u0000\u12d6\u12d8\u0003"+
		"\u01b8\u00dc\u0000\u12d7\u12d5\u0001\u0000\u0000\u0000\u12d8\u12db\u0001"+
		"\u0000\u0000\u0000\u12d9\u12d7\u0001\u0000\u0000\u0000\u12d9\u12da\u0001"+
		"\u0000\u0000\u0000\u12da\u131c\u0001\u0000\u0000\u0000\u12db\u12d9\u0001"+
		"\u0000\u0000\u0000\u12dc\u12dd\u0005\u0007\u0000\u0000\u12dd\u12df\u0005"+
		"\u0297\u0000\u0000\u12de\u12e0\u0003\u026e\u0137\u0000\u12df\u12de\u0001"+
		"\u0000\u0000\u0000\u12df\u12e0\u0001\u0000\u0000\u0000\u12e0\u12e1\u0001"+
		"\u0000\u0000\u0000\u12e1\u12e6\u0003\u01ba\u00dd\u0000\u12e2\u12e3\u0005"+
		"\u0468\u0000\u0000\u12e3\u12e5\u0003\u01ba\u00dd\u0000\u12e4\u12e2\u0001"+
		"\u0000\u0000\u0000\u12e5\u12e8\u0001\u0000\u0000\u0000\u12e6\u12e4\u0001"+
		"\u0000\u0000\u0000\u12e6\u12e7\u0001\u0000\u0000\u0000\u12e7\u12f7\u0001"+
		"\u0000\u0000\u0000\u12e8\u12e6\u0001\u0000\u0000\u0000\u12e9\u12f5\u0005"+
		"\u008d\u0000\u0000\u12ea\u12f6\u0005\u020f\u0000\u0000\u12eb\u12f2\u0003"+
		"\u01be\u00df\u0000\u12ec\u12ee\u0005\n\u0000\u0000\u12ed\u12ec\u0001\u0000"+
		"\u0000\u0000\u12ed\u12ee\u0001\u0000\u0000\u0000\u12ee\u12ef\u0001\u0000"+
		"\u0000\u0000\u12ef\u12f1\u0003\u01be\u00df\u0000\u12f0\u12ed\u0001\u0000"+
		"\u0000\u0000\u12f1\u12f4\u0001\u0000\u0000\u0000\u12f2\u12f0\u0001\u0000"+
		"\u0000\u0000\u12f2\u12f3\u0001\u0000\u0000\u0000\u12f3\u12f6\u0001\u0000"+
		"\u0000\u0000\u12f4\u12f2\u0001\u0000\u0000\u0000\u12f5\u12ea\u0001\u0000"+
		"\u0000\u0000\u12f5\u12eb\u0001\u0000\u0000\u0000\u12f6\u12f8\u0001\u0000"+
		"\u0000\u0000\u12f7\u12e9\u0001\u0000\u0000\u0000\u12f7\u12f8\u0001\u0000"+
		"\u0000\u0000\u12f8\u12ff\u0001\u0000\u0000\u0000\u12f9\u12fb\u0005\u00be"+
		"\u0000\u0000\u12fa\u12fc\u0003\u01c0\u00e0\u0000\u12fb\u12fa\u0001\u0000"+
		"\u0000\u0000\u12fc\u12fd\u0001\u0000\u0000\u0000\u12fd\u12fb\u0001\u0000"+
		"\u0000\u0000\u12fd\u12fe\u0001\u0000\u0000\u0000\u12fe\u1300\u0001\u0000"+
		"\u0000\u0000\u12ff\u12f9\u0001\u0000\u0000\u0000\u12ff\u1300\u0001\u0000"+
		"\u0000\u0000\u1300\u1305\u0001\u0000\u0000\u0000\u1301\u1304\u0003\u01c2"+
		"\u00e1\u0000\u1302\u1304\u0003\u01c4\u00e2\u0000\u1303\u1301\u0001\u0000"+
		"\u0000\u0000\u1303\u1302\u0001\u0000\u0000\u0000\u1304\u1307\u0001\u0000"+
		"\u0000\u0000\u1305\u1303\u0001\u0000\u0000\u0000\u1305\u1306\u0001\u0000"+
		"\u0000\u0000\u1306\u130c\u0001\u0000\u0000\u0000\u1307\u1305\u0001\u0000"+
		"\u0000\u0000\u1308\u1309\u0005\u016e\u0000\u0000\u1309\u130d\u0005\u0475"+
		"\u0000\u0000\u130a\u130b\u0005\u000e\u0000\u0000\u130b\u130d\u0005\u0475"+
		"\u0000\u0000\u130c\u1308\u0001\u0000\u0000\u0000\u130c\u130a\u0001\u0000"+
		"\u0000\u0000\u130c\u130d\u0001\u0000\u0000\u0000\u130d\u131c\u0001\u0000"+
		"\u0000\u0000\u130e\u130f\u0005\u0007\u0000\u0000\u130f\u1311\u0005\u0297"+
		"\u0000\u0000\u1310\u1312\u0003\u026e\u0137\u0000\u1311\u1310\u0001\u0000"+
		"\u0000\u0000\u1311\u1312\u0001\u0000\u0000\u0000\u1312\u1315\u0001\u0000"+
		"\u0000\u0000\u1313\u1316\u0003\u0224\u0112\u0000\u1314\u1316\u0003\u0236"+
		"\u011b\u0000\u1315\u1313\u0001\u0000\u0000\u0000\u1315\u1314\u0001\u0000"+
		"\u0000\u0000\u1316\u1317\u0001\u0000\u0000\u0000\u1317\u1318\u0005*\u0000"+
		"\u0000\u1318\u1319\u0005\u0252\u0000\u0000\u1319\u131a\u0003\u01ac\u00d6"+
		"\u0000\u131a\u131c\u0001\u0000\u0000\u0000\u131b\u12d2\u0001\u0000\u0000"+
		"\u0000\u131b\u12dc\u0001\u0000\u0000\u0000\u131b\u130e\u0001\u0000\u0000"+
		"\u0000\u131c\u01a5\u0001\u0000\u0000\u0000\u131d\u131e\u0005!\u0000\u0000"+
		"\u131e\u131f\u0005\u0297\u0000\u0000\u131f\u1324\u0003\u01ba\u00dd\u0000"+
		"\u1320\u1321\u0005\u0468\u0000\u0000\u1321\u1323\u0003\u01ba\u00dd\u0000"+
		"\u1322\u1320\u0001\u0000\u0000\u0000\u1323\u1326\u0001\u0000\u0000\u0000"+
		"\u1324\u1322\u0001\u0000\u0000\u0000\u1324\u1325\u0001\u0000\u0000\u0000"+
		"\u1325\u135f\u0001\u0000\u0000\u0000\u1326\u1324\u0001\u0000\u0000\u0000"+
		"\u1327\u1328\u0005!\u0000\u0000\u1328\u132a\u0005\u0297\u0000\u0000\u1329"+
		"\u132b\u0003\u0270\u0138\u0000\u132a\u1329\u0001\u0000\u0000\u0000\u132a"+
		"\u132b\u0001\u0000\u0000\u0000\u132b\u132c\u0001\u0000\u0000\u0000\u132c"+
		"\u1331\u0003\u01ba\u00dd\u0000\u132d\u132e\u0005\u0468\u0000\u0000\u132e"+
		"\u1330\u0003\u01ba\u00dd\u0000\u132f\u132d\u0001\u0000\u0000\u0000\u1330"+
		"\u1333\u0001\u0000\u0000\u0000\u1331\u132f\u0001\u0000\u0000\u0000\u1331"+
		"\u1332\u0001\u0000\u0000\u0000\u1332\u1337\u0001\u0000\u0000\u0000\u1333"+
		"\u1331\u0001\u0000\u0000\u0000\u1334\u1335\u0005*\u0000\u0000\u1335\u1336"+
		"\u0005\u0252\u0000\u0000\u1336\u1338\u0003\u01ac\u00d6\u0000\u1337\u1334"+
		"\u0001\u0000\u0000\u0000\u1337\u1338\u0001\u0000\u0000\u0000\u1338\u1347"+
		"\u0001\u0000\u0000\u0000\u1339\u1345\u0005\u008d\u0000\u0000\u133a\u1346"+
		"\u0005\u020f\u0000\u0000\u133b\u1342\u0003\u01be\u00df\u0000\u133c\u133e"+
		"\u0005\n\u0000\u0000\u133d\u133c\u0001\u0000\u0000\u0000\u133d\u133e\u0001"+
		"\u0000\u0000\u0000\u133e\u133f\u0001\u0000\u0000\u0000\u133f\u1341\u0003"+
		"\u01be\u00df\u0000\u1340\u133d\u0001\u0000\u0000\u0000\u1341\u1344\u0001"+
		"\u0000\u0000\u0000\u1342\u1340\u0001\u0000\u0000\u0000\u1342\u1343\u0001"+
		"\u0000\u0000\u0000\u1343\u1346\u0001\u0000\u0000\u0000\u1344\u1342\u0001"+
		"\u0000\u0000\u0000\u1345\u133a\u0001\u0000\u0000\u0000\u1345\u133b\u0001"+
		"\u0000\u0000\u0000\u1346\u1348\u0001\u0000\u0000\u0000\u1347\u1339\u0001"+
		"\u0000\u0000\u0000\u1347\u1348\u0001\u0000\u0000\u0000\u1348\u134f\u0001"+
		"\u0000\u0000\u0000\u1349\u134b\u0005\u00be\u0000\u0000\u134a\u134c\u0003"+
		"\u01c0\u00e0\u0000\u134b\u134a\u0001\u0000\u0000\u0000\u134c\u134d\u0001"+
		"\u0000\u0000\u0000\u134d\u134b\u0001\u0000\u0000\u0000\u134d\u134e\u0001"+
		"\u0000\u0000\u0000\u134e\u1350\u0001\u0000\u0000\u0000\u134f\u1349\u0001"+
		"\u0000\u0000\u0000\u134f\u1350\u0001\u0000\u0000\u0000\u1350\u1355\u0001"+
		"\u0000\u0000\u0000\u1351\u1354\u0003\u01c2\u00e1\u0000\u1352\u1354\u0003"+
		"\u01c4\u00e2\u0000\u1353\u1351\u0001\u0000\u0000\u0000\u1353\u1352\u0001"+
		"\u0000\u0000\u0000\u1354\u1357\u0001\u0000\u0000\u0000\u1355\u1353\u0001"+
		"\u0000\u0000\u0000\u1355\u1356\u0001\u0000\u0000\u0000\u1356\u135c\u0001"+
		"\u0000\u0000\u0000\u1357\u1355\u0001\u0000\u0000\u0000\u1358\u1359\u0005"+
		"\u016e\u0000\u0000\u1359\u135d\u0005\u0475\u0000\u0000\u135a\u135b\u0005"+
		"\u000e\u0000\u0000\u135b\u135d\u0005\u0475\u0000\u0000\u135c\u1358\u0001"+
		"\u0000\u0000\u0000\u135c\u135a\u0001\u0000\u0000\u0000\u135c\u135d\u0001"+
		"\u0000\u0000\u0000\u135d\u135f\u0001\u0000\u0000\u0000\u135e\u131d\u0001"+
		"\u0000\u0000\u0000\u135e\u1327\u0001\u0000\u0000\u0000\u135f\u01a7\u0001"+
		"\u0000\u0000\u0000\u1360\u1361\u00053\u0000\u0000\u1361\u1363\u0005\u0297"+
		"\u0000\u0000\u1362\u1364\u0003\u026e\u0137\u0000\u1363\u1362\u0001\u0000"+
		"\u0000\u0000\u1363\u1364\u0001\u0000\u0000\u0000\u1364\u1365\u0001\u0000"+
		"\u0000\u0000\u1365\u136a\u0003\u0224\u0112\u0000\u1366\u1367\u0005\u0468"+
		"\u0000\u0000\u1367\u1369\u0003\u0224\u0112\u0000\u1368\u1366\u0001\u0000"+
		"\u0000\u0000\u1369\u136c\u0001\u0000\u0000\u0000\u136a\u1368\u0001\u0000"+
		"\u0000\u0000\u136a\u136b\u0001\u0000\u0000\u0000\u136b\u01a9\u0001\u0000"+
		"\u0000\u0000\u136c\u136a\u0001\u0000\u0000\u0000\u136d\u136e\u0005G\u0000"+
		"\u0000\u136e\u1373\u0003\u01c6\u00e3\u0000\u136f\u1370\u0005\u0468\u0000"+
		"\u0000\u1370\u1372\u0003\u01c6\u00e3\u0000\u1371\u136f\u0001\u0000\u0000"+
		"\u0000\u1372\u1375\u0001\u0000\u0000\u0000\u1373\u1371\u0001\u0000\u0000"+
		"\u0000\u1373\u1374\u0001\u0000\u0000\u0000\u1374\u1376\u0001\u0000\u0000"+
		"\u0000\u1375\u1373\u0001\u0000\u0000\u0000\u1376\u1378\u0005u\u0000\u0000"+
		"\u1377\u1379\u0007B\u0000\u0000\u1378\u1377\u0001\u0000\u0000\u0000\u1378"+
		"\u1379\u0001\u0000\u0000\u0000\u1379\u137a\u0001\u0000\u0000\u0000\u137a"+
		"\u137b\u0003\u01ca\u00e5\u0000\u137b\u137c\u0005\u00ad\u0000\u0000\u137c"+
		"\u1381\u0003\u01ba\u00dd\u0000\u137d\u137e\u0005\u0468\u0000\u0000\u137e"+
		"\u1380\u0003\u01ba\u00dd\u0000\u137f\u137d\u0001\u0000\u0000\u0000\u1380"+
		"\u1383\u0001\u0000\u0000\u0000\u1381\u137f\u0001\u0000\u0000\u0000\u1381"+
		"\u1382\u0001\u0000\u0000\u0000\u1382\u1392\u0001\u0000\u0000\u0000\u1383"+
		"\u1381\u0001\u0000\u0000\u0000\u1384\u1390\u0005\u008d\u0000\u0000\u1385"+
		"\u1391\u0005\u020f\u0000\u0000\u1386\u138d\u0003\u01be\u00df\u0000\u1387"+
		"\u1389\u0005\n\u0000\u0000\u1388\u1387\u0001\u0000\u0000\u0000\u1388\u1389"+
		"\u0001\u0000\u0000\u0000\u1389\u138a\u0001\u0000\u0000\u0000\u138a\u138c"+
		"\u0003\u01be\u00df\u0000\u138b\u1388\u0001\u0000\u0000\u0000\u138c\u138f"+
		"\u0001\u0000\u0000\u0000\u138d\u138b\u0001\u0000\u0000\u0000\u138d\u138e"+
		"\u0001\u0000\u0000\u0000\u138e\u1391\u0001\u0000\u0000\u0000\u138f\u138d"+
		"\u0001\u0000\u0000\u0000\u1390\u1385\u0001\u0000\u0000\u0000\u1390\u1386"+
		"\u0001\u0000\u0000\u0000\u1391\u1393\u0001\u0000\u0000\u0000\u1392\u1384"+
		"\u0001\u0000\u0000\u0000\u1392\u1393\u0001\u0000\u0000\u0000\u1393\u139d"+
		"\u0001\u0000\u0000\u0000\u1394\u139a\u0005\u00be\u0000\u0000\u1395\u1396"+
		"\u0005G\u0000\u0000\u1396\u1399\u0005w\u0000\u0000\u1397\u1399\u0003\u01c0"+
		"\u00e0\u0000\u1398\u1395\u0001\u0000\u0000\u0000\u1398\u1397\u0001\u0000"+
		"\u0000\u0000\u1399\u139c\u0001\u0000\u0000\u0000\u139a\u1398\u0001\u0000"+
		"\u0000\u0000\u139a\u139b\u0001\u0000\u0000\u0000\u139b\u139e\u0001\u0000"+
		"\u0000\u0000\u139c\u139a\u0001\u0000\u0000\u0000\u139d\u1394\u0001\u0000"+
		"\u0000\u0000\u139d\u139e\u0001\u0000\u0000\u0000\u139e\u13a5\u0001\u0000"+
		"\u0000\u0000\u139f\u13a0\u0005\f\u0000\u0000\u13a0\u13a1\u0003\u0224\u0112"+
		"\u0000\u13a1\u13a2\u0005\u00be\u0000\u0000\u13a2\u13a3\u0005\u0252\u0000"+
		"\u0000\u13a3\u13a4\u0003\u01ac\u00d6\u0000\u13a4\u13a6\u0001\u0000\u0000"+
		"\u0000\u13a5\u139f\u0001\u0000\u0000\u0000\u13a5\u13a6\u0001\u0000\u0000"+
		"\u0000\u13a6\u13cb\u0001\u0000\u0000\u0000\u13a7\u13aa\u0005G\u0000\u0000"+
		"\u13a8\u13ab\u0003\u0224\u0112\u0000\u13a9\u13ab\u0003\u0236\u011b\u0000"+
		"\u13aa\u13a8\u0001\u0000\u0000\u0000\u13aa\u13a9\u0001\u0000\u0000\u0000"+
		"\u13ab\u13b3\u0001\u0000\u0000\u0000\u13ac\u13af\u0005\u0468\u0000\u0000"+
		"\u13ad\u13b0\u0003\u0224\u0112\u0000\u13ae\u13b0\u0003\u0236\u011b\u0000"+
		"\u13af\u13ad\u0001\u0000\u0000\u0000\u13af\u13ae\u0001\u0000\u0000\u0000"+
		"\u13b0\u13b2\u0001\u0000\u0000\u0000\u13b1\u13ac\u0001\u0000\u0000\u0000"+
		"\u13b2\u13b5\u0001\u0000\u0000\u0000\u13b3\u13b1\u0001\u0000\u0000\u0000"+
		"\u13b3\u13b4\u0001\u0000\u0000\u0000\u13b4\u13b6\u0001\u0000\u0000\u0000"+
		"\u13b5\u13b3\u0001\u0000\u0000\u0000\u13b6\u13b9\u0005\u00ad\u0000\u0000"+
		"\u13b7\u13ba\u0003\u0224\u0112\u0000\u13b8\u13ba\u0003\u0236\u011b\u0000"+
		"\u13b9\u13b7\u0001\u0000\u0000\u0000\u13b9\u13b8\u0001\u0000\u0000\u0000"+
		"\u13ba\u13c2\u0001\u0000\u0000\u0000\u13bb\u13be\u0005\u0468\u0000\u0000"+
		"\u13bc\u13bf\u0003\u0224\u0112\u0000\u13bd\u13bf\u0003\u0236\u011b\u0000"+
		"\u13be\u13bc\u0001\u0000\u0000\u0000\u13be\u13bd\u0001\u0000\u0000\u0000"+
		"\u13bf\u13c1\u0001\u0000\u0000\u0000\u13c0\u13bb\u0001\u0000\u0000\u0000"+
		"\u13c1\u13c4\u0001\u0000\u0000\u0000\u13c2\u13c0\u0001\u0000\u0000\u0000"+
		"\u13c2\u13c3\u0001\u0000\u0000\u0000\u13c3\u13c8\u0001\u0000\u0000\u0000"+
		"\u13c4\u13c2\u0001\u0000\u0000\u0000\u13c5\u13c6\u0005\u00be\u0000\u0000"+
		"\u13c6\u13c7\u0005\u02b7\u0000\u0000\u13c7\u13c9\u0005w\u0000\u0000\u13c8"+
		"\u13c5\u0001\u0000\u0000\u0000\u13c8\u13c9\u0001\u0000\u0000\u0000\u13c9"+
		"\u13cb\u0001\u0000\u0000\u0000\u13ca\u136d\u0001\u0000\u0000\u0000\u13ca"+
		"\u13a7\u0001\u0000\u0000\u0000\u13cb\u01ab\u0001\u0000\u0000\u0000\u13cc"+
		"\u13e3\u0005*\u0000\u0000\u13cd\u13e3\u0005\u020f\u0000\u0000\u13ce\u13d8"+
		"\u0005\u0006\u0000\u0000\u13cf\u13d0\u0005:\u0000\u0000\u13d0\u13d5\u0003"+
		"\u0224\u0112\u0000\u13d1\u13d2\u0005\u0468\u0000\u0000\u13d2\u13d4\u0003"+
		"\u0224\u0112\u0000\u13d3\u13d1\u0001\u0000\u0000\u0000\u13d4\u13d7\u0001"+
		"\u0000\u0000\u0000\u13d5\u13d3\u0001\u0000\u0000\u0000\u13d5\u13d6\u0001"+
		"\u0000\u0000\u0000\u13d6\u13d9\u0001\u0000\u0000\u0000\u13d7\u13d5\u0001"+
		"\u0000\u0000\u0000\u13d8\u13cf\u0001\u0000\u0000\u0000\u13d8\u13d9\u0001"+
		"\u0000\u0000\u0000\u13d9\u13e3\u0001\u0000\u0000\u0000\u13da\u13df\u0003"+
		"\u0224\u0112\u0000\u13db\u13dc\u0005\u0468\u0000\u0000\u13dc\u13de\u0003"+
		"\u0224\u0112\u0000\u13dd\u13db\u0001\u0000\u0000\u0000\u13de\u13e1\u0001"+
		"\u0000\u0000\u0000\u13df\u13dd\u0001\u0000\u0000\u0000\u13df\u13e0\u0001"+
		"\u0000\u0000\u0000\u13e0\u13e3\u0001\u0000\u0000\u0000\u13e1\u13df\u0001"+
		"\u0000\u0000\u0000\u13e2\u13cc\u0001\u0000\u0000\u0000\u13e2\u13cd\u0001"+
		"\u0000\u0000\u0000\u13e2\u13ce\u0001\u0000\u0000\u0000\u13e2\u13da\u0001"+
		"\u0000\u0000\u0000\u13e3\u01ad\u0001\u0000\u0000\u0000\u13e4\u13e5\u0005"+
		"G\u0000\u0000\u13e5\u13e6\u0005\u0234\u0000\u0000\u13e6\u13e7\u0005u\u0000"+
		"\u0000\u13e7\u13e8\u0003\u0224\u0112\u0000\u13e8\u13e9\u0005\u00ad\u0000"+
		"\u0000\u13e9\u13ee\u0003\u0224\u0112\u0000\u13ea\u13eb\u0005\u0468\u0000"+
		"\u0000\u13eb\u13ed\u0003\u0224\u0112\u0000\u13ec\u13ea\u0001\u0000\u0000"+
		"\u0000\u13ed\u13f0\u0001\u0000\u0000\u0000\u13ee\u13ec\u0001\u0000\u0000"+
		"\u0000\u13ee\u13ef\u0001\u0000\u0000\u0000\u13ef\u13f4\u0001\u0000\u0000"+
		"\u0000\u13f0\u13ee\u0001\u0000\u0000\u0000\u13f1\u13f2\u0005\u00be\u0000"+
		"\u0000\u13f2\u13f3\u0005G\u0000\u0000\u13f3\u13f5\u0005w\u0000\u0000\u13f4"+
		"\u13f1\u0001\u0000\u0000\u0000\u13f4\u13f5\u0001\u0000\u0000\u0000\u13f5"+
		"\u01af\u0001\u0000\u0000\u0000\u13f6\u13f7\u0005\u008a\u0000\u0000\u13f7"+
		"\u13f8\u0005\u0297\u0000\u0000\u13f8\u13fd\u0003\u01cc\u00e6\u0000\u13f9"+
		"\u13fa\u0005\u0468\u0000\u0000\u13fa\u13fc\u0003\u01cc\u00e6\u0000\u13fb"+
		"\u13f9\u0001\u0000\u0000\u0000\u13fc\u13ff\u0001\u0000\u0000\u0000\u13fd"+
		"\u13fb\u0001\u0000\u0000\u0000\u13fd\u13fe\u0001\u0000\u0000\u0000\u13fe"+
		"\u01b1\u0001\u0000\u0000\u0000\u13ff\u13fd\u0001\u0000\u0000\u0000\u1400"+
		"\u1401\u0005\u0092\u0000\u0000\u1401\u1406\u0003\u01c6\u00e3\u0000\u1402"+
		"\u1403\u0005\u0468\u0000\u0000\u1403\u1405\u0003\u01c6\u00e3\u0000\u1404"+
		"\u1402\u0001\u0000\u0000\u0000\u1405\u1408\u0001\u0000\u0000\u0000\u1406"+
		"\u1404\u0001\u0000\u0000\u0000\u1406\u1407\u0001\u0000\u0000\u0000\u1407"+
		"\u1409\u0001\u0000\u0000\u0000\u1408\u1406\u0001\u0000\u0000\u0000\u1409"+
		"\u140b\u0005u\u0000\u0000\u140a\u140c\u0007B\u0000\u0000\u140b\u140a\u0001"+
		"\u0000\u0000\u0000\u140b\u140c\u0001\u0000\u0000\u0000\u140c\u140d\u0001"+
		"\u0000\u0000\u0000\u140d\u140e\u0003\u01ca\u00e5\u0000\u140e\u140f\u0005"+
		"C\u0000\u0000\u140f\u1414\u0003\u0224\u0112\u0000\u1410\u1411\u0005\u0468"+
		"\u0000\u0000\u1411\u1413\u0003\u0224\u0112\u0000\u1412\u1410\u0001\u0000"+
		"\u0000\u0000\u1413\u1416\u0001\u0000\u0000\u0000\u1414\u1412\u0001\u0000"+
		"\u0000\u0000\u1414\u1415\u0001\u0000\u0000\u0000\u1415\u1447\u0001\u0000"+
		"\u0000\u0000\u1416\u1414\u0001\u0000\u0000\u0000\u1417\u1418\u0005\u0092"+
		"\u0000\u0000\u1418\u141a\u0005\u0006\u0000\u0000\u1419\u141b\u0005\u02d0"+
		"\u0000\u0000\u141a\u1419\u0001\u0000\u0000\u0000\u141a\u141b\u0001\u0000"+
		"\u0000\u0000\u141b\u141c\u0001\u0000\u0000\u0000\u141c\u141d\u0005\u0468"+
		"\u0000\u0000\u141d\u141e\u0005G\u0000\u0000\u141e\u141f\u0005w\u0000\u0000"+
		"\u141f\u1420\u0005C\u0000\u0000\u1420\u1425\u0003\u0224\u0112\u0000\u1421"+
		"\u1422\u0005\u0468\u0000\u0000\u1422\u1424\u0003\u0224\u0112\u0000\u1423"+
		"\u1421\u0001\u0000\u0000\u0000\u1424\u1427\u0001\u0000\u0000\u0000\u1425"+
		"\u1423\u0001\u0000\u0000\u0000\u1425\u1426\u0001\u0000\u0000\u0000\u1426"+
		"\u1447\u0001\u0000\u0000\u0000\u1427\u1425\u0001\u0000\u0000\u0000\u1428"+
		"\u142b\u0005\u0092\u0000\u0000\u1429\u142c\u0003\u0224\u0112\u0000\u142a"+
		"\u142c\u0003\u0236\u011b\u0000\u142b\u1429\u0001\u0000\u0000\u0000\u142b"+
		"\u142a\u0001\u0000\u0000\u0000\u142c\u1434\u0001\u0000\u0000\u0000\u142d"+
		"\u1430\u0005\u0468\u0000\u0000\u142e\u1431\u0003\u0224\u0112\u0000\u142f"+
		"\u1431\u0003\u0236\u011b\u0000\u1430\u142e\u0001\u0000\u0000\u0000\u1430"+
		"\u142f\u0001\u0000\u0000\u0000\u1431\u1433\u0001\u0000\u0000\u0000\u1432"+
		"\u142d\u0001\u0000\u0000\u0000\u1433\u1436\u0001\u0000\u0000\u0000\u1434"+
		"\u1432\u0001\u0000\u0000\u0000\u1434\u1435\u0001\u0000\u0000\u0000\u1435"+
		"\u1437\u0001\u0000\u0000\u0000\u1436\u1434\u0001\u0000\u0000\u0000\u1437"+
		"\u143a\u0005C\u0000\u0000\u1438\u143b\u0003\u0224\u0112\u0000\u1439\u143b"+
		"\u0003\u0236\u011b\u0000\u143a\u1438\u0001\u0000\u0000\u0000\u143a\u1439"+
		"\u0001\u0000\u0000\u0000\u143b\u1443\u0001\u0000\u0000\u0000\u143c\u143f"+
		"\u0005\u0468\u0000\u0000\u143d\u1440\u0003\u0224\u0112\u0000\u143e\u1440"+
		"\u0003\u0236\u011b\u0000\u143f\u143d\u0001\u0000\u0000\u0000\u143f\u143e"+
		"\u0001\u0000\u0000\u0000\u1440\u1442\u0001\u0000\u0000\u0000\u1441\u143c"+
		"\u0001\u0000\u0000\u0000\u1442\u1445\u0001\u0000\u0000\u0000\u1443\u1441"+
		"\u0001\u0000\u0000\u0000\u1443\u1444\u0001\u0000\u0000\u0000\u1444\u1447"+
		"\u0001\u0000\u0000\u0000\u1445\u1443\u0001\u0000\u0000\u0000\u1446\u1400"+
		"\u0001\u0000\u0000\u0000\u1446\u1417\u0001\u0000\u0000\u0000\u1446\u1428"+
		"\u0001\u0000\u0000\u0000\u1447\u01b3\u0001\u0000\u0000\u0000\u1448\u1449"+
		"\u0005\u0092\u0000\u0000\u1449\u144a\u0005\u0234\u0000\u0000\u144a\u144b"+
		"\u0005u\u0000\u0000\u144b\u144c\u0003\u0224\u0112\u0000\u144c\u144d\u0005"+
		"C\u0000\u0000\u144d\u1452\u0003\u0224\u0112\u0000\u144e\u144f\u0005\u0468"+
		"\u0000\u0000\u144f\u1451\u0003\u0224\u0112\u0000\u1450\u144e\u0001\u0000"+
		"\u0000\u0000\u1451\u1454\u0001\u0000\u0000\u0000\u1452\u1450\u0001\u0000"+
		"\u0000\u0000\u1452\u1453\u0001\u0000\u0000\u0000\u1453\u01b5\u0001\u0000"+
		"\u0000\u0000\u1454\u1452\u0001\u0000\u0000\u0000\u1455\u1456\u0005\u0098"+
		"\u0000\u0000\u1456\u1459\u0005\u0225\u0000\u0000\u1457\u1458\u0005@\u0000"+
		"\u0000\u1458\u145a\u0003\u0224\u0112\u0000\u1459\u1457\u0001\u0000\u0000"+
		"\u0000\u1459\u145a\u0001\u0000\u0000\u0000\u145a\u145b\u0001\u0000\u0000"+
		"\u0000\u145b\u145e\u0005\u045d\u0000\u0000\u145c\u145f\u0003\u0298\u014c"+
		"\u0000\u145d\u145f\u0005\u0475\u0000\u0000\u145e\u145c\u0001\u0000\u0000"+
		"\u0000\u145e\u145d\u0001\u0000\u0000\u0000\u145f\u01b7\u0001\u0000\u0000"+
		"\u0000\u1460\u1461\u0003\u0224\u0112\u0000\u1461\u1462\u0003\u01c2\u00e1"+
		"\u0000\u1462\u01b9\u0001\u0000\u0000\u0000\u1463\u1464\u0003\u0224\u0112"+
		"\u0000\u1464\u1465\u0005\u01be\u0000\u0000\u1465\u1466\u0005\u0013\u0000"+
		"\u0000\u1466\u1467\u0005\u0225\u0000\u0000\u1467\u1468\u0005\u0475\u0000"+
		"\u0000\u1468\u1479\u0001\u0000\u0000\u0000\u1469\u146a\u0003\u0224\u0112"+
		"\u0000\u146a\u146b\u0005\u01be\u0000\u0000\u146b\u146c\u0005\u0013\u0000"+
		"\u0000\u146c\u1470\u0005\u0475\u0000\u0000\u146d\u146e\u0005\u0090\u0000"+
		"\u0000\u146e\u146f\u0005#\u0000\u0000\u146f\u1471\u0005\u0225\u0000\u0000"+
		"\u1470\u146d\u0001\u0000\u0000\u0000\u1470\u1471\u0001\u0000\u0000\u0000"+
		"\u1471\u1479\u0001\u0000\u0000\u0000\u1472\u1473\u0003\u0224\u0112\u0000"+
		"\u1473\u1474\u0005\u01be\u0000\u0000\u1474\u1475\u0005\u00be\u0000\u0000"+
		"\u1475\u1476\u0003\u01bc\u00de\u0000\u1476\u1479\u0001\u0000\u0000\u0000"+
		"\u1477\u1479\u0003\u0224\u0112\u0000\u1478\u1463\u0001\u0000\u0000\u0000"+
		"\u1478\u1469\u0001\u0000\u0000\u0000\u1478\u1472\u0001\u0000\u0000\u0000"+
		"\u1478\u1477\u0001\u0000\u0000\u0000\u1479\u01bb\u0001\u0000\u0000\u0000"+
		"\u147a\u147d\u0003\u0234\u011a\u0000\u147b\u147c\u0007C\u0000\u0000\u147c"+
		"\u147e\u0005\u0475\u0000\u0000\u147d\u147b\u0001\u0000\u0000\u0000\u147d"+
		"\u147e\u0001\u0000\u0000\u0000\u147e\u1484\u0001\u0000\u0000\u0000\u147f"+
		"\u1480\u0003\u0234\u011a\u0000\u1480\u1481\u0005\u00b9\u0000\u0000\u1481"+
		"\u1482\u0003\u0298\u014c\u0000\u1482\u1484\u0001\u0000\u0000\u0000\u1483"+
		"\u147a\u0001\u0000\u0000\u0000\u1483\u147f\u0001\u0000\u0000\u0000\u1484"+
		"\u01bd\u0001\u0000\u0000\u0000\u1485\u148e\u0005\u00a5\u0000\u0000\u1486"+
		"\u148e\u0005\u02a6\u0000\u0000\u1487\u1488\u0005\u0164\u0000\u0000\u1488"+
		"\u148e\u0005\u0475\u0000\u0000\u1489\u148a\u0005\u01cf\u0000\u0000\u148a"+
		"\u148e\u0005\u0475\u0000\u0000\u148b\u148c\u0005\u027e\u0000\u0000\u148c"+
		"\u148e\u0005\u0475\u0000\u0000\u148d\u1485\u0001\u0000\u0000\u0000\u148d"+
		"\u1486\u0001\u0000\u0000\u0000\u148d\u1487\u0001\u0000\u0000\u0000\u148d"+
		"\u1489\u0001\u0000\u0000\u0000\u148d\u148b\u0001\u0000\u0000\u0000\u148e"+
		"\u01bf\u0001\u0000\u0000\u0000\u148f\u1490\u0005\u01f1\u0000\u0000\u1490"+
		"\u1498\u0003\u023c\u011e\u0000\u1491\u1492\u0005\u01f4\u0000\u0000\u1492"+
		"\u1498\u0003\u023c\u011e\u0000\u1493\u1494\u0005\u01f0\u0000\u0000\u1494"+
		"\u1498\u0003\u023c\u011e\u0000\u1495\u1496\u0005\u01f5\u0000\u0000\u1496"+
		"\u1498\u0003\u023c\u011e\u0000\u1497\u148f\u0001\u0000\u0000\u0000\u1497"+
		"\u1491\u0001\u0000\u0000\u0000\u1497\u1493\u0001\u0000\u0000\u0000\u1497"+
		"\u1495\u0001\u0000\u0000\u0000\u1498\u01c1\u0001\u0000\u0000\u0000\u1499"+
		"\u149a\u0005\u0225\u0000\u0000\u149a\u14a1\u0005\u01a2\u0000\u0000\u149b"+
		"\u14a2\u0005*\u0000\u0000\u149c\u14a2\u0005\u0205\u0000\u0000\u149d\u149e"+
		"\u0005U\u0000\u0000\u149e\u149f\u0003\u023c\u011e\u0000\u149f\u14a0\u0005"+
		"\u02b1\u0000\u0000\u14a0\u14a2\u0001\u0000\u0000\u0000\u14a1\u149b\u0001"+
		"\u0000\u0000\u0000\u14a1\u149c\u0001\u0000\u0000\u0000\u14a1\u149d\u0001"+
		"\u0000\u0000\u0000\u14a1\u14a2\u0001\u0000\u0000\u0000\u14a2\u14c0\u0001"+
		"\u0000\u0000\u0000\u14a3\u14a4\u0005\u0225\u0000\u0000\u14a4\u14a7\u0005"+
		"\u01bb\u0000\u0000\u14a5\u14a8\u0005*\u0000\u0000\u14a6\u14a8\u0003\u023c"+
		"\u011e\u0000\u14a7\u14a5\u0001\u0000\u0000\u0000\u14a7\u14a6\u0001\u0000"+
		"\u0000\u0000\u14a8\u14c0\u0001\u0000\u0000\u0000\u14a9\u14aa\u0005\u0225"+
		"\u0000\u0000\u14aa\u14ab\u0005\u0251\u0000\u0000\u14ab\u14b0\u0005U\u0000"+
		"\u0000\u14ac\u14b1\u0005*\u0000\u0000\u14ad\u14ae\u0003\u023c\u011e\u0000"+
		"\u14ae\u14af\u0005\u02b1\u0000\u0000\u14af\u14b1\u0001\u0000\u0000\u0000"+
		"\u14b0\u14ac\u0001\u0000\u0000\u0000\u14b0\u14ad\u0001\u0000\u0000\u0000"+
		"\u14b1\u14c0\u0001\u0000\u0000\u0000\u14b2\u14b3\u0005\u0225\u0000\u0000"+
		"\u14b3\u14b4\u0005\u008d\u0000\u0000\u14b4\u14b6\u0005#\u0000\u0000\u14b5"+
		"\u14b7\u0007D\u0000\u0000\u14b6\u14b5\u0001\u0000\u0000\u0000\u14b6\u14b7"+
		"\u0001\u0000\u0000\u0000\u14b7\u14c0\u0001\u0000\u0000\u0000\u14b8\u14b9"+
		"\u0005\u01a6\u0000\u0000\u14b9\u14c0\u0003\u023c\u011e\u0000\u14ba\u14bd"+
		"\u0005\u0226\u0000\u0000\u14bb\u14be\u0003\u023c\u011e\u0000\u14bc\u14be"+
		"\u0005\u028f\u0000\u0000\u14bd\u14bb\u0001\u0000\u0000\u0000\u14bd\u14bc"+
		"\u0001\u0000\u0000\u0000\u14be\u14c0\u0001\u0000\u0000\u0000\u14bf\u1499"+
		"\u0001\u0000\u0000\u0000\u14bf\u14a3\u0001\u0000\u0000\u0000\u14bf\u14a9"+
		"\u0001\u0000\u0000\u0000\u14bf\u14b2\u0001\u0000\u0000\u0000\u14bf\u14b8"+
		"\u0001\u0000\u0000\u0000\u14bf\u14ba\u0001\u0000\u0000\u0000\u14c0\u01c3"+
		"\u0001\u0000\u0000\u0000\u14c1\u14c2\u0005\u014a\u0000\u0000\u14c2\u14c3"+
		"\u0007E\u0000\u0000\u14c3\u01c5\u0001\u0000\u0000\u0000\u14c4\u14c9\u0003"+
		"\u01c8\u00e4\u0000\u14c5\u14c6\u0005\u0466\u0000\u0000\u14c6\u14c7\u0003"+
		"\u0256\u012b\u0000\u14c7\u14c8\u0005\u0467\u0000\u0000\u14c8\u14ca\u0001"+
		"\u0000\u0000\u0000\u14c9\u14c5\u0001\u0000\u0000\u0000\u14c9\u14ca\u0001"+
		"\u0000\u0000\u0000\u14ca\u01c7\u0001\u0000\u0000\u0000\u14cb\u14cd\u0005"+
		"\u0006\u0000\u0000\u14cc\u14ce\u0005\u02d0\u0000\u0000\u14cd\u14cc\u0001"+
		"\u0000\u0000\u0000\u14cd\u14ce\u0001\u0000\u0000\u0000\u14ce\u1524\u0001"+
		"\u0000\u0000\u0000\u14cf\u14d1\u0005\u0007\u0000\u0000\u14d0\u14d2\u0005"+
		"\u02d8\u0000\u0000\u14d1\u14d0\u0001\u0000\u0000\u0000\u14d1\u14d2\u0001"+
		"\u0000\u0000\u0000\u14d2\u1524\u0001\u0000\u0000\u0000\u14d3\u14db\u0005"+
		"!\u0000\u0000\u14d4\u14d5\u0005\u0287\u0000\u0000\u14d5\u14dc\u0005\u02e1"+
		"\u0000\u0000\u14d6\u14dc\u0005\u02d8\u0000\u0000\u14d7\u14dc\u0005\u029d"+
		"\u0000\u0000\u14d8\u14dc\u0005\u0297\u0000\u0000\u14d9\u14dc\u0005\u0285"+
		"\u0000\u0000\u14da\u14dc\u0005\u0252\u0000\u0000\u14db\u14d4\u0001\u0000"+
		"\u0000\u0000\u14db\u14d6\u0001\u0000\u0000\u0000\u14db\u14d7\u0001\u0000"+
		"\u0000\u0000\u14db\u14d8\u0001\u0000\u0000\u0000\u14db\u14d9\u0001\u0000"+
		"\u0000\u0000\u14db\u14da\u0001\u0000\u0000\u0000\u14db\u14dc\u0001\u0000"+
		"\u0000\u0000\u14dc\u1524\u0001\u0000\u0000\u0000\u14dd\u1524\u0005,\u0000"+
		"\u0000\u14de\u14e0\u00053\u0000\u0000\u14df\u14e1\u0005\u0252\u0000\u0000"+
		"\u14e0\u14df\u0001\u0000\u0000\u0000\u14e0\u14e1\u0001\u0000\u0000\u0000"+
		"\u14e1\u1524\u0001\u0000\u0000\u0000\u14e2\u1524\u0005\u019d\u0000\u0000"+
		"\u14e3\u1524\u0005\u02c0\u0000\u0000\u14e4\u1524\u0005\u02c1\u0000\u0000"+
		"\u14e5\u14e6\u0005G\u0000\u0000\u14e6\u1524\u0005w\u0000\u0000\u14e7\u1524"+
		"\u0005P\u0000\u0000\u14e8\u1524\u0005T\u0000\u0000\u14e9\u14ea\u0005f"+
		"\u0000\u0000\u14ea\u1524\u0005\u02e1\u0000\u0000\u14eb\u1524\u0005\u02d1"+
		"\u0000\u0000\u14ec\u1524\u0005\u0234\u0000\u0000\u14ed\u1524\u0005\u0087"+
		"\u0000\u0000\u14ee\u1524\u0005\u02d2\u0000\u0000\u14ef\u14f0\u0005\u024a"+
		"\u0000\u0000\u14f0\u1524\u0007F\u0000\u0000\u14f1\u1524\u0005\u0097\u0000"+
		"\u0000\u14f2\u14f3\u0005\u009a\u0000\u0000\u14f3\u1524\u0007G\u0000\u0000"+
		"\u14f4\u1524\u0005\u02de\u0000\u0000\u14f5\u1524\u0005\u02df\u0000\u0000"+
		"\u14f6\u1524\u0005\u00af\u0000\u0000\u14f7\u1524\u0005\u00b6\u0000\u0000"+
		"\u14f8\u1524\u0005\u00b7\u0000\u0000\u14f9\u1524\u0005\u02b8\u0000\u0000"+
		"\u14fa\u1524\u0005\u02b9\u0000\u0000\u14fb\u1524\u0005\u02ba\u0000\u0000"+
		"\u14fc\u1524\u0005\u02bb\u0000\u0000\u14fd\u1524\u0005\u02bc\u0000\u0000"+
		"\u14fe\u1524\u0005\u02bd\u0000\u0000\u14ff\u1524\u0005\u02be\u0000\u0000"+
		"\u1500\u1524\u0005\u02bf\u0000\u0000\u1501\u1524\u0005\u02c2\u0000\u0000"+
		"\u1502\u1524\u0005\u02c3\u0000\u0000\u1503\u1524\u0005\u02c4\u0000\u0000"+
		"\u1504\u1524\u0005\u02c5\u0000\u0000\u1505\u1524\u0005\u02c6\u0000\u0000"+
		"\u1506\u1524\u0005\u02c7\u0000\u0000\u1507\u1524\u0005\u02c8\u0000\u0000"+
		"\u1508\u1524\u0005\u02c9\u0000\u0000\u1509\u1524\u0005\u02ca\u0000\u0000"+
		"\u150a\u1524\u0005\u02cd\u0000\u0000\u150b\u1524\u0005\u02ce\u0000\u0000"+
		"\u150c\u1524\u0005\u02cf\u0000\u0000\u150d\u1524\u0005\u02d3\u0000\u0000"+
		"\u150e\u1524\u0005\u02d4\u0000\u0000\u150f\u1524\u0005\u02d5\u0000\u0000"+
		"\u1510\u1524\u0005\u02d6\u0000\u0000\u1511\u1524\u0005\u02d7\u0000\u0000"+
		"\u1512\u1524\u0005\u02da\u0000\u0000\u1513\u1524\u0005\u02db\u0000\u0000"+
		"\u1514\u1524\u0005\u02dc\u0000\u0000\u1515\u1524\u0005\u02dd\u0000\u0000"+
		"\u1516\u1524\u0005\u042f\u0000\u0000\u1517\u1524\u0005\u02e0\u0000\u0000"+
		"\u1518\u1524\u0005\u02e2\u0000\u0000\u1519\u1524\u0005\u02e3\u0000\u0000"+
		"\u151a\u1524\u0005\u02e4\u0000\u0000\u151b\u151c\u0005e\u0000\u0000\u151c"+
		"\u151d\u0005C\u0000\u0000\u151d\u1524\u0005\u02d9\u0000\u0000\u151e\u151f"+
		"\u0005\u0097\u0000\u0000\u151f\u1520\u0005V\u0000\u0000\u1520\u1524\u0005"+
		"\u02d9\u0000\u0000\u1521\u1522\u0005\u02cb\u0000\u0000\u1522\u1524\u0005"+
		"\u02cc\u0000\u0000\u1523\u14cb\u0001\u0000\u0000\u0000\u1523\u14cf\u0001"+
		"\u0000\u0000\u0000\u1523\u14d3\u0001\u0000\u0000\u0000\u1523\u14dd\u0001"+
		"\u0000\u0000\u0000\u1523\u14de\u0001\u0000\u0000\u0000\u1523\u14e2\u0001"+
		"\u0000\u0000\u0000\u1523\u14e3\u0001\u0000\u0000\u0000\u1523\u14e4\u0001"+
		"\u0000\u0000\u0000\u1523\u14e5\u0001\u0000\u0000\u0000\u1523\u14e7\u0001"+
		"\u0000\u0000\u0000\u1523\u14e8\u0001\u0000\u0000\u0000\u1523\u14e9\u0001"+
		"\u0000\u0000\u0000\u1523\u14eb\u0001\u0000\u0000\u0000\u1523\u14ec\u0001"+
		"\u0000\u0000\u0000\u1523\u14ed\u0001\u0000\u0000\u0000\u1523\u14ee\u0001"+
		"\u0000\u0000\u0000\u1523\u14ef\u0001\u0000\u0000\u0000\u1523\u14f1\u0001"+
		"\u0000\u0000\u0000\u1523\u14f2\u0001\u0000\u0000\u0000\u1523\u14f4\u0001"+
		"\u0000\u0000\u0000\u1523\u14f5\u0001\u0000\u0000\u0000\u1523\u14f6\u0001"+
		"\u0000\u0000\u0000\u1523\u14f7\u0001\u0000\u0000\u0000\u1523\u14f8\u0001"+
		"\u0000\u0000\u0000\u1523\u14f9\u0001\u0000\u0000\u0000\u1523\u14fa\u0001"+
		"\u0000\u0000\u0000\u1523\u14fb\u0001\u0000\u0000\u0000\u1523\u14fc\u0001"+
		"\u0000\u0000\u0000\u1523\u14fd\u0001\u0000\u0000\u0000\u1523\u14fe\u0001"+
		"\u0000\u0000\u0000\u1523\u14ff\u0001\u0000\u0000\u0000\u1523\u1500\u0001"+
		"\u0000\u0000\u0000\u1523\u1501\u0001\u0000\u0000\u0000\u1523\u1502\u0001"+
		"\u0000\u0000\u0000\u1523\u1503\u0001\u0000\u0000\u0000\u1523\u1504\u0001"+
		"\u0000\u0000\u0000\u1523\u1505\u0001\u0000\u0000\u0000\u1523\u1506\u0001"+
		"\u0000\u0000\u0000\u1523\u1507\u0001\u0000\u0000\u0000\u1523\u1508\u0001"+
		"\u0000\u0000\u0000\u1523\u1509\u0001\u0000\u0000\u0000\u1523\u150a\u0001"+
		"\u0000\u0000\u0000\u1523\u150b\u0001\u0000\u0000\u0000\u1523\u150c\u0001"+
		"\u0000\u0000\u0000\u1523\u150d\u0001\u0000\u0000\u0000\u1523\u150e\u0001"+
		"\u0000\u0000\u0000\u1523\u150f\u0001\u0000\u0000\u0000\u1523\u1510\u0001"+
		"\u0000\u0000\u0000\u1523\u1511\u0001\u0000\u0000\u0000\u1523\u1512\u0001"+
		"\u0000\u0000\u0000\u1523\u1513\u0001\u0000\u0000\u0000\u1523\u1514\u0001"+
		"\u0000\u0000\u0000\u1523\u1515\u0001\u0000\u0000\u0000\u1523\u1516\u0001"+
		"\u0000\u0000\u0000\u1523\u1517\u0001\u0000\u0000\u0000\u1523\u1518\u0001"+
		"\u0000\u0000\u0000\u1523\u1519\u0001\u0000\u0000\u0000\u1523\u151a\u0001"+
		"\u0000\u0000\u0000\u1523\u151b\u0001\u0000\u0000\u0000\u1523\u151e\u0001"+
		"\u0000\u0000\u0000\u1523\u1521\u0001\u0000\u0000\u0000\u1524\u01c9\u0001"+
		"\u0000\u0000\u0000\u1525\u1536\u0005\u0456\u0000\u0000\u1526\u1527\u0005"+
		"\u0456\u0000\u0000\u1527\u1528\u0005\u0465\u0000\u0000\u1528\u1536\u0005"+
		"\u0456\u0000\u0000\u1529\u152a\u0003\u0236\u011b\u0000\u152a\u152b\u0005"+
		"\u0465\u0000\u0000\u152b\u152c\u0005\u0456\u0000\u0000\u152c\u1536\u0001"+
		"\u0000\u0000\u0000\u152d\u152e\u0003\u0236\u011b\u0000\u152e\u152f\u0005"+
		"\u0465\u0000\u0000\u152f\u1530\u0003\u0236\u011b\u0000\u1530\u1536\u0001"+
		"\u0000\u0000\u0000\u1531\u1532\u0003\u0236\u011b\u0000\u1532\u1533\u0003"+
		"\u023a\u011d\u0000\u1533\u1536\u0001\u0000\u0000\u0000\u1534\u1536\u0003"+
		"\u0236\u011b\u0000\u1535\u1525\u0001\u0000\u0000\u0000\u1535\u1526\u0001"+
		"\u0000\u0000\u0000\u1535\u1529\u0001\u0000\u0000\u0000\u1535\u152d\u0001"+
		"\u0000\u0000\u0000\u1535\u1531\u0001\u0000\u0000\u0000\u1535\u1534\u0001"+
		"\u0000\u0000\u0000\u1536\u01cb\u0001\u0000\u0000\u0000\u1537\u1538\u0003"+
		"\u0224\u0112\u0000\u1538\u1539\u0005\u00ad\u0000\u0000\u1539\u153a\u0003"+
		"\u0224\u0112\u0000\u153a\u01cd\u0001\u0000\u0000\u0000\u153b\u153d\u0005"+
		"\t\u0000\u0000\u153c\u153e\u0007H\u0000\u0000\u153d\u153c\u0001\u0000"+
		"\u0000\u0000\u153d\u153e\u0001\u0000\u0000\u0000\u153e\u153f\u0001\u0000"+
		"\u0000\u0000\u153f\u1540\u00076\u0000\u0000\u1540\u1552\u0003\u025a\u012d"+
		"\u0000\u1541\u1542\u0005\u00b6\u0000\u0000\u1542\u1543\u0005K\u0000\u0000"+
		"\u1543\u1544\u0005u\u0000\u0000\u1544\u1549\u0003\u0220\u0110\u0000\u1545"+
		"\u1546\u0005\u0468\u0000\u0000\u1546\u1548\u0003\u0220\u0110\u0000\u1547"+
		"\u1545\u0001\u0000\u0000\u0000\u1548\u154b\u0001\u0000\u0000\u0000\u1549"+
		"\u1547\u0001\u0000\u0000\u0000\u1549\u154a\u0001\u0000\u0000\u0000\u154a"+
		"\u1550\u0001\u0000\u0000\u0000\u154b\u1549\u0001\u0000\u0000\u0000\u154c"+
		"\u154d\u0005\u00be\u0000\u0000\u154d\u154e\u0003\u023c\u011e\u0000\u154e"+
		"\u154f\u0005\u0012\u0000\u0000\u154f\u1551\u0001\u0000\u0000\u0000\u1550"+
		"\u154c\u0001\u0000\u0000\u0000\u1550\u1551\u0001\u0000\u0000\u0000\u1551"+
		"\u1553\u0001\u0000\u0000\u0000\u1552\u1541\u0001\u0000\u0000\u0000\u1552"+
		"\u1553\u0001\u0000\u0000\u0000\u1553\u155f\u0001\u0000\u0000\u0000\u1554"+
		"\u1555\u00053\u0000\u0000\u1555\u1556\u0005K\u0000\u0000\u1556\u1557\u0005"+
		"u\u0000\u0000\u1557\u155c\u0003\u0220\u0110\u0000\u1558\u1559\u0005\u0468"+
		"\u0000\u0000\u1559\u155b\u0003\u0220\u0110\u0000\u155a\u1558\u0001\u0000"+
		"\u0000\u0000\u155b\u155e\u0001\u0000\u0000\u0000\u155c\u155a\u0001\u0000"+
		"\u0000\u0000\u155c\u155d\u0001\u0000\u0000\u0000\u155d\u1560\u0001\u0000"+
		"\u0000\u0000\u155e\u155c\u0001\u0000\u0000\u0000\u155f\u1554\u0001\u0000"+
		"\u0000\u0000\u155f\u1560\u0001\u0000\u0000\u0000\u1560\u01cf\u0001\u0000"+
		"\u0000\u0000\u1561\u1562\u0005\u001a\u0000\u0000\u1562\u1563\u0005\u00aa"+
		"\u0000\u0000\u1563\u1567\u0003\u025a\u012d\u0000\u1564\u1566\u0003\u01d8"+
		"\u00ec\u0000\u1565\u1564\u0001\u0000\u0000\u0000\u1566\u1569\u0001\u0000"+
		"\u0000\u0000\u1567\u1565\u0001\u0000\u0000\u0000\u1567\u1568\u0001\u0000"+
		"\u0000\u0000\u1568\u01d1\u0001\u0000\u0000\u0000\u1569\u1567\u0001\u0000"+
		"\u0000\u0000\u156a\u156b\u0005\u0162\u0000\u0000\u156b\u156c\u0005\u00aa"+
		"\u0000\u0000\u156c\u156e\u0003\u025a\u012d\u0000\u156d\u156f\u0007I\u0000"+
		"\u0000\u156e\u156d\u0001\u0000\u0000\u0000\u156e\u156f\u0001\u0000\u0000"+
		"\u0000\u156f\u01d3\u0001\u0000\u0000\u0000\u1570\u1572\u0005v\u0000\u0000"+
		"\u1571\u1573\u0007H\u0000\u0000\u1572\u1571\u0001\u0000\u0000\u0000\u1572"+
		"\u1573\u0001\u0000\u0000\u0000\u1573\u1574\u0001\u0000\u0000\u0000\u1574"+
		"\u1575\u00076\u0000\u0000\u1575\u1576\u0003\u025a\u012d\u0000\u1576\u01d5"+
		"\u0001\u0000\u0000\u0000\u1577\u1579\u0005\u0242\u0000\u0000\u1578\u157a"+
		"\u0007H\u0000\u0000\u1579\u1578\u0001\u0000\u0000\u0000\u1579\u157a\u0001"+
		"\u0000\u0000\u0000\u157a\u157b\u0001\u0000\u0000\u0000\u157b\u157c\u0005"+
		"\u00aa\u0000\u0000\u157c\u157e\u0003\u025a\u012d\u0000\u157d\u157f\u0005"+
		"\u0236\u0000\u0000\u157e\u157d\u0001\u0000\u0000\u0000\u157e\u157f\u0001"+
		"\u0000\u0000\u0000\u157f\u1581\u0001\u0000\u0000\u0000\u1580\u1582\u0005"+
		"\u01a4\u0000\u0000\u1581\u1580\u0001\u0000\u0000\u0000\u1581\u1582\u0001"+
		"\u0000\u0000\u0000\u1582\u1584\u0001\u0000\u0000\u0000\u1583\u1585\u0005"+
		"\u0298\u0000\u0000\u1584\u1583\u0001\u0000\u0000\u0000\u1584\u1585\u0001"+
		"\u0000\u0000\u0000\u1585\u01d7\u0001\u0000\u0000\u0000\u1586\u1587\u0005"+
		"@\u0000\u0000\u1587\u158e\u0005\u0296\u0000\u0000\u1588\u158e\u0005\u0236"+
		"\u0000\u0000\u1589\u158e\u0005\u01a7\u0000\u0000\u158a\u158e\u0005\u01f6"+
		"\u0000\u0000\u158b\u158e\u0005\u01a4\u0000\u0000\u158c\u158e\u0005\u0160"+
		"\u0000\u0000\u158d\u1586\u0001\u0000\u0000\u0000\u158d\u1588\u0001\u0000"+
		"\u0000\u0000\u158d\u1589\u0001\u0000\u0000\u0000\u158d\u158a\u0001\u0000"+
		"\u0000\u0000\u158d\u158b\u0001\u0000\u0000\u0000\u158d\u158c\u0001\u0000"+
		"\u0000\u0000\u158e\u01d9\u0001\u0000\u0000\u0000\u158f\u1591\u0005!\u0000"+
		"\u0000\u1590\u1592\u0005\u014d\u0000\u0000\u1591\u1590\u0001\u0000\u0000"+
		"\u0000\u1591\u1592\u0001\u0000\u0000\u0000\u1592\u1593\u0001\u0000\u0000"+
		"\u0000\u1593\u1595\u0005\u01b3\u0000\u0000\u1594\u1596\u0003\u0270\u0138"+
		"\u0000\u1595\u1594\u0001\u0000\u0000\u0000\u1595\u1596\u0001\u0000\u0000"+
		"\u0000\u1596\u1597\u0001\u0000\u0000\u0000\u1597\u1598\u0003\u0236\u011b"+
		"\u0000\u1598\u1599\u0005\u0250\u0000\u0000\u1599\u159a\u0007J\u0000\u0000"+
		"\u159a\u159b\u0005\u0269\u0000\u0000\u159b\u159c\u0005\u0475\u0000\u0000"+
		"\u159c\u01db\u0001\u0000\u0000\u0000\u159d\u159e\u0005\u01c6\u0000\u0000"+
		"\u159e\u159f\u0005\u0228\u0000\u0000\u159f\u15a0\u0003\u0236\u011b\u0000"+
		"\u15a0\u15a1\u0005\u0269\u0000\u0000\u15a1\u15a2\u0005\u0475\u0000\u0000"+
		"\u15a2\u01dd\u0001\u0000\u0000\u0000\u15a3\u15a4\u0005\u0293\u0000\u0000"+
		"\u15a4\u15a5\u0005\u0228\u0000\u0000\u15a5\u15a6\u0003\u0236\u011b\u0000"+
		"\u15a6\u01df\u0001\u0000\u0000\u0000\u15a7\u15a8\u0005\u0098\u0000\u0000"+
		"\u15a8\u15a9\u0003\u01e4\u00f2\u0000\u15a9\u15ac\u0007K\u0000\u0000\u15aa"+
		"\u15ad\u0003\u029e\u014f\u0000\u15ab\u15ad\u0005u\u0000\u0000\u15ac\u15aa"+
		"\u0001\u0000\u0000\u0000\u15ac\u15ab\u0001\u0000\u0000\u0000\u15ad\u15b7"+
		"\u0001\u0000\u0000\u0000\u15ae\u15af\u0005\u0468\u0000\u0000\u15af\u15b0"+
		"\u0003\u01e4\u00f2\u0000\u15b0\u15b3\u0007K\u0000\u0000\u15b1\u15b4\u0003"+
		"\u029e\u014f\u0000\u15b2\u15b4\u0005u\u0000\u0000\u15b3\u15b1\u0001\u0000"+
		"\u0000\u0000\u15b3\u15b2\u0001\u0000\u0000\u0000\u15b4\u15b6\u0001\u0000"+
		"\u0000\u0000\u15b5\u15ae\u0001\u0000\u0000\u0000\u15b6\u15b9\u0001\u0000"+
		"\u0000\u0000\u15b7\u15b5\u0001\u0000\u0000\u0000\u15b7\u15b8\u0001\u0000"+
		"\u0000\u0000\u15b8\u15dc\u0001\u0000\u0000\u0000\u15b9\u15b7\u0001\u0000"+
		"\u0000\u0000\u15ba\u15bb\u0005\u0098\u0000\u0000\u15bb\u15be\u0003<\u001e"+
		"\u0000\u15bc\u15bf\u0003\u0228\u0114\u0000\u15bd\u15bf\u0005*\u0000\u0000"+
		"\u15be\u15bc\u0001\u0000\u0000\u0000\u15be\u15bd\u0001\u0000\u0000\u0000"+
		"\u15bf\u15dc\u0001\u0000\u0000\u0000\u15c0\u15c1\u0005\u0098\u0000\u0000"+
		"\u15c1\u15c8\u0005\u0203\u0000\u0000\u15c2\u15c5\u0003\u0228\u0114\u0000"+
		"\u15c3\u15c4\u0005\u001b\u0000\u0000\u15c4\u15c6\u0003\u022a\u0115\u0000"+
		"\u15c5\u15c3\u0001\u0000\u0000\u0000\u15c5\u15c6\u0001\u0000\u0000\u0000"+
		"\u15c6\u15c9\u0001\u0000\u0000\u0000\u15c7\u15c9\u0005*\u0000\u0000\u15c8"+
		"\u15c2\u0001\u0000\u0000\u0000\u15c8\u15c7\u0001\u0000\u0000\u0000\u15c9"+
		"\u15dc\u0001\u0000\u0000\u0000\u15ca\u15dc\u0003\u01b6\u00db\u0000\u15cb"+
		"\u15dc\u0003\u0138\u009c\u0000\u15cc\u15dc\u0003\u0136\u009b\u0000\u15cd"+
		"\u15ce\u0005\u0098\u0000\u0000\u15ce\u15cf\u0003\u021a\u010d\u0000\u15cf"+
		"\u15d0\u0007K\u0000\u0000\u15d0\u15d8\u0003\u029e\u014f\u0000\u15d1\u15d2"+
		"\u0005\u0468\u0000\u0000\u15d2\u15d3\u0003\u021a\u010d\u0000\u15d3\u15d4"+
		"\u0007K\u0000\u0000\u15d4\u15d5\u0003\u029e\u014f\u0000\u15d5\u15d7\u0001"+
		"\u0000\u0000\u0000\u15d6\u15d1\u0001\u0000\u0000\u0000\u15d7\u15da\u0001"+
		"\u0000\u0000\u0000\u15d8\u15d6\u0001\u0000\u0000\u0000\u15d8\u15d9\u0001"+
		"\u0000\u0000\u0000\u15d9\u15dc\u0001\u0000\u0000\u0000\u15da\u15d8\u0001"+
		"\u0000\u0000\u0000\u15db\u15a7\u0001\u0000\u0000\u0000\u15db\u15ba\u0001"+
		"\u0000\u0000\u0000\u15db\u15c0\u0001\u0000\u0000\u0000\u15db\u15ca\u0001"+
		"\u0000\u0000\u0000\u15db\u15cb\u0001\u0000\u0000\u0000\u15db\u15cc\u0001"+
		"\u0000\u0000\u0000\u15db\u15cd\u0001\u0000\u0000\u0000\u15dc\u01e1\u0001"+
		"\u0000\u0000\u0000\u15dd\u15de\u0005\u009a\u0000\u0000\u15de\u15df\u0007"+
		"8\u0000\u0000\u15df\u1677\u0005\u01da\u0000\u0000\u15e0\u15e1\u0005\u009a"+
		"\u0000\u0000\u15e1\u15e2\u0007L\u0000\u0000\u15e2\u15e5\u0005\u019e\u0000"+
		"\u0000\u15e3\u15e4\u0005O\u0000\u0000\u15e4\u15e6\u0005\u0475\u0000\u0000"+
		"\u15e5\u15e3\u0001\u0000\u0000\u0000\u15e5\u15e6\u0001\u0000\u0000\u0000"+
		"\u15e6\u15e9\u0001\u0000\u0000\u0000\u15e7\u15e8\u0005C\u0000\u0000\u15e8"+
		"\u15ea\u0003\u023c\u011e\u0000\u15e9\u15e7\u0001\u0000\u0000\u0000\u15e9"+
		"\u15ea\u0001\u0000\u0000\u0000\u15ea\u15f2\u0001\u0000\u0000\u0000\u15eb"+
		"\u15ef\u0005b\u0000\u0000\u15ec\u15ed\u0003\u023c\u011e\u0000\u15ed\u15ee"+
		"\u0005\u0468\u0000\u0000\u15ee\u15f0\u0001\u0000\u0000\u0000\u15ef\u15ec"+
		"\u0001\u0000\u0000\u0000\u15ef\u15f0\u0001\u0000\u0000\u0000\u15f0\u15f1"+
		"\u0001\u0000\u0000\u0000\u15f1\u15f3\u0003\u023c\u011e\u0000\u15f2\u15eb"+
		"\u0001\u0000\u0000\u0000\u15f2\u15f3\u0001\u0000\u0000\u0000\u15f3\u1677"+
		"\u0001\u0000\u0000\u0000\u15f4\u15f5\u0005\u009a\u0000\u0000\u15f5\u15f7"+
		"\u0003\u01e6\u00f3\u0000\u15f6\u15f8\u0003\u01e8\u00f4\u0000\u15f7\u15f6"+
		"\u0001\u0000\u0000\u0000\u15f7\u15f8\u0001\u0000\u0000\u0000\u15f8\u1677"+
		"\u0001\u0000\u0000\u0000\u15f9\u15fb\u0005\u009a\u0000\u0000\u15fa\u15fc"+
		"\u0005\u01b2\u0000\u0000\u15fb\u15fa\u0001\u0000\u0000\u0000\u15fb\u15fc"+
		"\u0001\u0000\u0000\u0000\u15fc\u15fd\u0001\u0000\u0000\u0000\u15fd\u15fe"+
		"\u0007)\u0000\u0000\u15fe\u15ff\u0007M\u0000\u0000\u15ff\u1602\u0003\u021c"+
		"\u010e\u0000\u1600\u1601\u0007M\u0000\u0000\u1601\u1603\u0003\u0236\u011b"+
		"\u0000\u1602\u1600\u0001\u0000\u0000\u0000\u1602\u1603\u0001\u0000\u0000"+
		"\u0000\u1603\u1605\u0001\u0000\u0000\u0000\u1604\u1606\u0003\u01e8\u00f4"+
		"\u0000\u1605\u1604\u0001\u0000\u0000\u0000\u1605\u1606\u0001\u0000\u0000"+
		"\u0000\u1606\u1677\u0001\u0000\u0000\u0000\u1607\u1608\u0005\u009a\u0000"+
		"\u0000\u1608\u1609\u0005!\u0000\u0000\u1609\u160b\u0007\u0000\u0000\u0000"+
		"\u160a\u160c\u0003\u0270\u0138\u0000\u160b\u160a\u0001\u0000\u0000\u0000"+
		"\u160b\u160c\u0001\u0000\u0000\u0000\u160c\u160d\u0001\u0000\u0000\u0000"+
		"\u160d\u1677\u0003\u0236\u011b\u0000\u160e\u160f\u0005\u009a\u0000\u0000"+
		"\u160f\u1610\u0005!\u0000\u0000\u1610\u1611\u0007N\u0000\u0000\u1611\u1677"+
		"\u0003\u021a\u010d\u0000\u1612\u1613\u0005\u009a\u0000\u0000\u1613\u1614"+
		"\u0005!\u0000\u0000\u1614\u1615\u0005\u0297\u0000\u0000\u1615\u1677\u0003"+
		"\u0224\u0112\u0000\u1616\u1617\u0005\u009a\u0000\u0000\u1617\u1618\u0005"+
		"\u0197\u0000\u0000\u1618\u1619\u0003\u022c\u0116\u0000\u1619\u161a\u0007"+
		"O\u0000\u0000\u161a\u1677\u0001\u0000\u0000\u0000\u161b\u161c\u0005\u009a"+
		"\u0000\u0000\u161c\u1677\u0003\u01ea\u00f5\u0000\u161d\u161e\u0005\u009a"+
		"\u0000\u0000\u161e\u1626\u0007P\u0000\u0000\u161f\u1623\u0005b\u0000\u0000"+
		"\u1620\u1621\u0003\u023c\u011e\u0000\u1621\u1622\u0005\u0468\u0000\u0000"+
		"\u1622\u1624\u0001\u0000\u0000\u0000\u1623\u1620\u0001\u0000\u0000\u0000"+
		"\u1623\u1624\u0001\u0000\u0000\u0000\u1624\u1625\u0001\u0000\u0000\u0000"+
		"\u1625\u1627\u0003\u023c\u011e\u0000\u1626\u161f\u0001\u0000\u0000\u0000"+
		"\u1626\u1627\u0001\u0000\u0000\u0000\u1627\u1677\u0001\u0000\u0000\u0000"+
		"\u1628\u1629\u0005\u009a\u0000\u0000\u1629\u162a\u0005\u0120\u0000\u0000"+
		"\u162a\u162b\u0005\u0466\u0000\u0000\u162b\u162c\u0005\u0456\u0000\u0000"+
		"\u162c\u162d\u0005\u0467\u0000\u0000\u162d\u1677\u0007P\u0000\u0000\u162e"+
		"\u162f\u0005\u009a\u0000\u0000\u162f\u1632\u0003\u01ec\u00f6\u0000\u1630"+
		"\u1631\u0007M\u0000\u0000\u1631\u1633\u0003\u0236\u011b\u0000\u1632\u1630"+
		"\u0001\u0000\u0000\u0000\u1632\u1633\u0001\u0000\u0000\u0000\u1633\u1635"+
		"\u0001\u0000\u0000\u0000\u1634\u1636\u0003\u01e8\u00f4\u0000\u1635\u1634"+
		"\u0001\u0000\u0000\u0000\u1635\u1636\u0001\u0000\u0000\u0000\u1636\u1677"+
		"\u0001\u0000\u0000\u0000\u1637\u1638\u0005\u009a\u0000\u0000\u1638\u1639"+
		"\u0007Q\u0000\u0000\u1639\u163a\u0005\u016a\u0000\u0000\u163a\u1677\u0003"+
		"\u021a\u010d\u0000\u163b\u163c\u0005\u009a\u0000\u0000\u163c\u163f\u0005"+
		"\u01b6\u0000\u0000\u163d\u163e\u0005@\u0000\u0000\u163e\u1640\u0003\u0224"+
		"\u0112\u0000\u163f\u163d\u0001\u0000\u0000\u0000\u163f\u1640\u0001\u0000"+
		"\u0000\u0000\u1640\u1677\u0001\u0000\u0000\u0000\u1641\u1642\u0005\u009a"+
		"\u0000\u0000\u1642\u1643\u0007R\u0000\u0000\u1643\u1644\u0007M\u0000\u0000"+
		"\u1644\u1647\u0003\u021c\u010e\u0000\u1645\u1646\u0007M\u0000\u0000\u1646"+
		"\u1648\u0003\u0236\u011b\u0000\u1647\u1645\u0001\u0000\u0000\u0000\u1647"+
		"\u1648\u0001\u0000\u0000\u0000\u1648\u164b\u0001\u0000\u0000\u0000\u1649"+
		"\u164a\u0005\u00bc\u0000\u0000\u164a\u164c\u0003\u029e\u014f\u0000\u164b"+
		"\u1649\u0001\u0000\u0000\u0000\u164b\u164c\u0001\u0000\u0000\u0000\u164c"+
		"\u1677\u0001\u0000\u0000\u0000\u164d\u164e\u0005\u009a\u0000\u0000\u164e"+
		"\u164f\u0005\u0219\u0000\u0000\u164f\u1652\u0005\u02e1\u0000\u0000\u1650"+
		"\u1651\u0007M\u0000\u0000\u1651\u1653\u0003\u0236\u011b\u0000\u1652\u1650"+
		"\u0001\u0000\u0000\u0000\u1652\u1653\u0001\u0000\u0000\u0000\u1653\u1655"+
		"\u0001\u0000\u0000\u0000\u1654\u1656\u0003\u01e8\u00f4\u0000\u1655\u1654"+
		"\u0001\u0000\u0000\u0000\u1655\u1656\u0001\u0000\u0000\u0000\u1656\u1677"+
		"\u0001\u0000\u0000\u0000\u1657\u1658\u0005\u009a\u0000\u0000\u1658\u1659"+
		"\u0005\u0232\u0000\u0000\u1659\u165e\u0003\u01ee\u00f7\u0000\u165a\u165b"+
		"\u0005\u0468\u0000\u0000\u165b\u165d\u0003\u01ee\u00f7\u0000\u165c\u165a"+
		"\u0001\u0000\u0000\u0000\u165d\u1660\u0001\u0000\u0000\u0000\u165e\u165c"+
		"\u0001\u0000\u0000\u0000\u165e\u165f\u0001\u0000\u0000\u0000\u165f\u1664"+
		"\u0001\u0000\u0000\u0000\u1660\u165e\u0001\u0000\u0000\u0000\u1661\u1662"+
		"\u0005@\u0000\u0000\u1662\u1663\u0005\u0235\u0000\u0000\u1663\u1665\u0003"+
		"\u023c\u011e\u0000\u1664\u1661\u0001\u0000\u0000\u0000\u1664\u1665\u0001"+
		"\u0000\u0000\u0000\u1665\u1666\u0001\u0000\u0000\u0000\u1666\u166a\u0005"+
		"b\u0000\u0000\u1667\u1668\u0003\u023c\u011e\u0000\u1668\u1669\u0005\u0468"+
		"\u0000\u0000\u1669\u166b\u0001\u0000\u0000\u0000\u166a\u1667\u0001\u0000"+
		"\u0000\u0000\u166a\u166b\u0001\u0000\u0000\u0000\u166b\u166c\u0001\u0000"+
		"\u0000\u0000\u166c\u166d\u0003\u023c\u011e\u0000\u166d\u1677\u0001\u0000"+
		"\u0000\u0000\u166e\u166f\u0005\u009a\u0000\u0000\u166f\u1670\u0005\u0264"+
		"\u0000\u0000\u1670\u1674\u0005\u0278\u0000\u0000\u1671\u1672\u0005@\u0000"+
		"\u0000\u1672\u1673\u0005\u0161\u0000\u0000\u1673\u1675\u0005\u0475\u0000"+
		"\u0000\u1674\u1671\u0001\u0000\u0000\u0000\u1674\u1675\u0001\u0000\u0000"+
		"\u0000\u1675\u1677\u0001\u0000\u0000\u0000\u1676\u15dd\u0001\u0000\u0000"+
		"\u0000\u1676\u15e0\u0001\u0000\u0000\u0000\u1676\u15f4\u0001\u0000\u0000"+
		"\u0000\u1676\u15f9\u0001\u0000\u0000\u0000\u1676\u1607\u0001\u0000\u0000"+
		"\u0000\u1676\u160e\u0001\u0000\u0000\u0000\u1676\u1612\u0001\u0000\u0000"+
		"\u0000\u1676\u1616\u0001\u0000\u0000\u0000\u1676\u161b\u0001\u0000\u0000"+
		"\u0000\u1676\u161d\u0001\u0000\u0000\u0000\u1676\u1628\u0001\u0000\u0000"+
		"\u0000\u1676\u162e\u0001\u0000\u0000\u0000\u1676\u1637\u0001\u0000\u0000"+
		"\u0000\u1676\u163b\u0001\u0000\u0000\u0000\u1676\u1641\u0001\u0000\u0000"+
		"\u0000\u1676\u164d\u0001\u0000\u0000\u0000\u1676\u1657\u0001\u0000\u0000"+
		"\u0000\u1676\u166e\u0001\u0000\u0000\u0000\u1677\u01e3\u0001\u0000\u0000"+
		"\u0000\u1678\u1683\u0005\u0481\u0000\u0000\u1679\u1683\u0005\u0482\u0000"+
		"\u0000\u167a\u167b\u0005\u046a\u0000\u0000\u167b\u167d\u0005\u046a\u0000"+
		"\u0000\u167c\u167a\u0001\u0000\u0000\u0000\u167c\u167d\u0001\u0000\u0000"+
		"\u0000\u167d\u167e\u0001\u0000\u0000\u0000\u167e\u1680\u0007S\u0000\u0000"+
		"\u167f\u167c\u0001\u0000\u0000\u0000\u167f\u1680\u0001\u0000\u0000\u0000"+
		"\u1680\u1681\u0001\u0000\u0000\u0000\u1681\u1683\u0003\u0236\u011b\u0000"+
		"\u1682\u1678\u0001\u0000\u0000\u0000\u1682\u1679\u0001\u0000\u0000\u0000"+
		"\u1682\u167f\u0001\u0000\u0000\u0000\u1683\u01e5\u0001\u0000\u0000\u0000"+
		"\u1684\u1685\u0005\u0019\u0000\u0000\u1685\u1692\u0005\u0098\u0000\u0000"+
		"\u1686\u1692\u0005\u0347\u0000\u0000\u1687\u1692\u0005(\u0000\u0000\u1688"+
		"\u1692\u0005\u0096\u0000\u0000\u1689\u168a\u0005\u01b3\u0000\u0000\u168a"+
		"\u1692\u0005\u0278\u0000\u0000\u168b\u168c\u0005\u0082\u0000\u0000\u168c"+
		"\u1692\u0005\u0278\u0000\u0000\u168d\u168f\u00077\u0000\u0000\u168e\u168d"+
		"\u0001\u0000\u0000\u0000\u168e\u168f\u0001\u0000\u0000\u0000\u168f\u1690"+
		"\u0001\u0000\u0000\u0000\u1690\u1692\u0007T\u0000\u0000\u1691\u1684\u0001"+
		"\u0000\u0000\u0000\u1691\u1686\u0001\u0000\u0000\u0000\u1691\u1687\u0001"+
		"\u0000\u0000\u0000\u1691\u1688\u0001\u0000\u0000\u0000\u1691\u1689\u0001"+
		"\u0000\u0000\u0000\u1691\u168b\u0001\u0000\u0000\u0000\u1691\u168e\u0001"+
		"\u0000\u0000\u0000\u1692\u01e7\u0001\u0000\u0000\u0000\u1693\u1694\u0005"+
		"a\u0000\u0000\u1694\u1698\u0005\u0475\u0000\u0000\u1695\u1696\u0005\u00bc"+
		"\u0000\u0000\u1696\u1698\u0003\u029e\u014f\u0000\u1697\u1693\u0001\u0000"+
		"\u0000\u0000\u1697\u1695\u0001\u0000\u0000\u0000\u1698\u01e9\u0001\u0000"+
		"\u0000\u0000\u1699\u169b\u0005\u027a\u0000\u0000\u169a\u1699\u0001\u0000"+
		"\u0000\u0000\u169a\u169b\u0001\u0000\u0000\u0000\u169b\u169c\u0001\u0000"+
		"\u0000\u0000\u169c\u16ab\u0005\u0198\u0000\u0000\u169d\u169e\u0005\u01db"+
		"\u0000\u0000\u169e\u16ab\u0005\u0278\u0000\u0000\u169f\u16ab\u0005\u022a"+
		"\u0000\u0000\u16a0\u16ab\u0005\u02d0\u0000\u0000\u16a1\u16a3\u0005\u01b2"+
		"\u0000\u0000\u16a2\u16a1\u0001\u0000\u0000\u0000\u16a2\u16a3\u0001\u0000"+
		"\u0000\u0000\u16a3\u16a4\u0001\u0000\u0000\u0000\u16a4\u16ab\u0005\u0231"+
		"\u0000\u0000\u16a5\u16ab\u0005\u0233\u0000\u0000\u16a6\u16a7\u0005\u0264"+
		"\u0000\u0000\u16a7\u16ab\u0005\u01bd\u0000\u0000\u16a8\u16ab\u0005\u0151"+
		"\u0000\u0000\u16a9\u16ab\u0005\u017d\u0000\u0000\u16aa\u169a\u0001\u0000"+
		"\u0000\u0000\u16aa\u169d\u0001\u0000\u0000\u0000\u16aa\u169f\u0001\u0000"+
		"\u0000\u0000\u16aa\u16a0\u0001\u0000\u0000\u0000\u16aa\u16a2\u0001\u0000"+
		"\u0000\u0000\u16aa\u16a5\u0001\u0000\u0000\u0000\u16aa\u16a6\u0001\u0000"+
		"\u0000\u0000\u16aa\u16a8\u0001\u0000\u0000\u0000\u16aa\u16a9\u0001\u0000"+
		"\u0000\u0000\u16ab\u01eb\u0001\u0000\u0000\u0000\u16ac\u16b5\u0005\u019e"+
		"\u0000\u0000\u16ad\u16ae\u0005\u00aa\u0000\u0000\u16ae\u16b5\u0005\u0278"+
		"\u0000\u0000\u16af\u16b1\u0005\u01b2\u0000\u0000\u16b0\u16af\u0001\u0000"+
		"\u0000\u0000\u16b0\u16b1\u0001\u0000\u0000\u0000\u16b1\u16b2\u0001\u0000"+
		"\u0000\u0000\u16b2\u16b5\u0005\u02e1\u0000\u0000\u16b3\u16b5\u0005\u028d"+
		"\u0000\u0000\u16b4\u16ac\u0001\u0000\u0000\u0000\u16b4\u16ad\u0001\u0000"+
		"\u0000\u0000\u16b4\u16b0\u0001\u0000\u0000\u0000\u16b4\u16b3\u0001\u0000"+
		"\u0000\u0000\u16b5\u01ed\u0001\u0000\u0000\u0000\u16b6\u16c3\u0005\u0006"+
		"\u0000\u0000\u16b7\u16b8\u0005\u0159\u0000\u0000\u16b8\u16c3\u0005\u01cb"+
		"\u0000\u0000\u16b9\u16ba\u0005\u017c\u0000\u0000\u16ba\u16c3\u0005\u0283"+
		"\u0000\u0000\u16bb\u16c3\u0005\u017f\u0000\u0000\u16bc\u16c3\u0005\u01cd"+
		"\u0000\u0000\u16bd\u16c3\u0005\u0313\u0000\u0000\u16be\u16bf\u0005\u021e"+
		"\u0000\u0000\u16bf\u16c3\u0005\u01a8\u0000\u0000\u16c0\u16c3\u0005\u026b"+
		"\u0000\u0000\u16c1\u16c3\u0005\u0282\u0000\u0000\u16c2\u16b6\u0001\u0000"+
		"\u0000\u0000\u16c2\u16b7\u0001\u0000\u0000\u0000\u16c2\u16b9\u0001\u0000"+
		"\u0000\u0000\u16c2\u16bb\u0001\u0000\u0000\u0000\u16c2\u16bc\u0001\u0000"+
		"\u0000\u0000\u16c2\u16bd\u0001\u0000\u0000\u0000\u16c2\u16be\u0001\u0000"+
		"\u0000\u0000\u16c2\u16c0\u0001\u0000\u0000\u0000\u16c2\u16c1\u0001\u0000"+
		"\u0000\u0000\u16c3\u01ef\u0001\u0000\u0000\u0000\u16c4\u16c5\u0005\u0157"+
		"\u0000\u0000\u16c5\u16c6\u0005\u0475\u0000\u0000\u16c6\u01f1\u0001\u0000"+
		"\u0000\u0000\u16c7\u16c8\u0005\u015d\u0000\u0000\u16c8\u16c9\u0005P\u0000"+
		"\u0000\u16c9\u16ce\u0003\u01fe\u00ff\u0000\u16ca\u16cb\u0005\u0468\u0000"+
		"\u0000\u16cb\u16cd\u0003\u01fe\u00ff\u0000\u16cc\u16ca\u0001\u0000\u0000"+
		"\u0000\u16cd\u16d0\u0001\u0000\u0000\u0000\u16ce\u16cc\u0001\u0000\u0000"+
		"\u0000\u16ce\u16cf\u0001\u0000\u0000\u0000\u16cf\u16d8\u0001\u0000\u0000"+
		"\u0000\u16d0\u16ce\u0001\u0000\u0000\u0000\u16d1\u16d2\u0005\u0080\u0000"+
		"\u0000\u16d2\u16d5\u0005\u0466\u0000\u0000\u16d3\u16d6\u0003\u0256\u012b"+
		"\u0000\u16d4\u16d6\u0005\u0006\u0000\u0000\u16d5\u16d3\u0001\u0000\u0000"+
		"\u0000\u16d5\u16d4\u0001\u0000\u0000\u0000\u16d6\u16d7\u0001\u0000\u0000"+
		"\u0000\u16d7\u16d9\u0005\u0467\u0000\u0000\u16d8\u16d1\u0001\u0000\u0000"+
		"\u0000\u16d8\u16d9\u0001\u0000\u0000\u0000\u16d9\u16da\u0001\u0000\u0000"+
		"\u0000\u16da\u16db\u0005O\u0000\u0000\u16db\u16dc\u0003\u0236\u011b\u0000"+
		"\u16dc\u01f3\u0001\u0000\u0000\u0000\u16dd\u16df\u0005\u01ae\u0000\u0000"+
		"\u16de\u16e0\u0007H\u0000\u0000\u16df\u16de\u0001\u0000\u0000\u0000\u16df"+
		"\u16e0\u0001\u0000\u0000\u0000\u16e0\u16e1\u0001\u0000\u0000\u0000\u16e1"+
		"\u16e6\u0003\u0200\u0100\u0000\u16e2\u16e3\u0005\u0468\u0000\u0000\u16e3"+
		"\u16e5\u0003\u0200\u0100\u0000\u16e4\u16e2\u0001\u0000\u0000\u0000\u16e5"+
		"\u16e8\u0001\u0000\u0000\u0000\u16e6\u16e4\u0001\u0000\u0000\u0000\u16e6"+
		"\u16e7\u0001\u0000\u0000\u0000\u16e7\u01f5\u0001\u0000\u0000\u0000\u16e8"+
		"\u16e6\u0001\u0000\u0000\u0000\u16e9\u16eb\u0005\\\u0000\u0000\u16ea\u16ec"+
		"\u0007U\u0000\u0000\u16eb\u16ea\u0001\u0000\u0000\u0000\u16eb\u16ec\u0001"+
		"\u0000\u0000\u0000\u16ec\u16ed\u0001\u0000\u0000\u0000\u16ed\u16ee\u0003"+
		"\u029e\u014f\u0000\u16ee\u01f7\u0001\u0000\u0000\u0000\u16ef\u16f0\u0005"+
		"e\u0000\u0000\u16f0\u16f1\u0005P\u0000\u0000\u16f1\u16f2\u0005V\u0000"+
		"\u0000\u16f2\u16f3\u0005\u015d\u0000\u0000\u16f3\u16f8\u0003\u0204\u0102"+
		"\u0000\u16f4\u16f5\u0005\u0468\u0000\u0000\u16f5\u16f7\u0003\u0204\u0102"+
		"\u0000\u16f6\u16f4\u0001\u0000\u0000\u0000\u16f7\u16fa\u0001\u0000\u0000"+
		"\u0000\u16f8\u16f6\u0001\u0000\u0000\u0000\u16f8\u16f9\u0001\u0000\u0000"+
		"\u0000\u16f9\u01f9\u0001\u0000\u0000\u0000\u16fa\u16f8\u0001\u0000\u0000"+
		"\u0000\u16fb\u16fc\u0005\u024b\u0000\u0000\u16fc\u16fd\u0005\u0235\u0000"+
		"\u0000\u16fd\u16fe\u0005\u015d\u0000\u0000\u16fe\u01fb\u0001\u0000\u0000"+
		"\u0000\u16ff\u1700\u0005\u02de\u0000\u0000\u1700\u01fd\u0001\u0000\u0000"+
		"\u0000\u1701\u1709\u0003\u021c\u010e\u0000\u1702\u1704\u0007\u0014\u0000"+
		"\u0000\u1703\u1702\u0001\u0000\u0000\u0000\u1703\u1704\u0001\u0000\u0000"+
		"\u0000\u1704\u1705\u0001\u0000\u0000\u0000\u1705\u1706\u0005\u0466\u0000"+
		"\u0000\u1706\u1707\u0003\u0256\u012b\u0000\u1707\u1708\u0005\u0467\u0000"+
		"\u0000\u1708\u170a\u0001\u0000\u0000\u0000\u1709\u1703\u0001\u0000\u0000"+
		"\u0000\u1709\u170a\u0001\u0000\u0000\u0000\u170a\u01ff\u0001\u0000\u0000"+
		"\u0000\u170b\u171e\u0005\u0188\u0000\u0000\u170c\u171e\u0005\u01bd\u0000"+
		"\u0000\u170d\u170f\u0007V\u0000\u0000\u170e\u170d\u0001\u0000\u0000\u0000"+
		"\u170e\u170f\u0001\u0000\u0000\u0000\u170f\u1710\u0001\u0000\u0000\u0000"+
		"\u1710\u171e\u0005\u01da\u0000\u0000\u1711\u171e\u0005\u021a\u0000\u0000"+
		"\u1712\u171e\u0005\u02d0\u0000\u0000\u1713\u1714\u0005\u0235\u0000\u0000"+
		"\u1714\u171e\u0005\u015d\u0000\u0000\u1715\u171e\u0005\u0278\u0000\u0000"+
		"\u1716\u171e\u0005\u0299\u0000\u0000\u1717\u171b\u0005\u02e1\u0000\u0000"+
		"\u1718\u1719\u0005\u00be\u0000\u0000\u1719\u171a\u0005\u0085\u0000\u0000"+
		"\u171a\u171c\u0005f\u0000\u0000\u171b\u1718\u0001\u0000\u0000\u0000\u171b"+
		"\u171c\u0001\u0000\u0000\u0000\u171c\u171e\u0001\u0000\u0000\u0000\u171d"+
		"\u170b\u0001\u0000\u0000\u0000\u171d\u170c\u0001\u0000\u0000\u0000\u171d"+
		"\u170e\u0001\u0000\u0000\u0000\u171d\u1711\u0001\u0000\u0000\u0000\u171d"+
		"\u1712\u0001\u0000\u0000\u0000\u171d\u1713\u0001\u0000\u0000\u0000\u171d"+
		"\u1715\u0001\u0000\u0000\u0000\u171d\u1716\u0001\u0000\u0000\u0000\u171d"+
		"\u1717\u0001\u0000\u0000\u0000\u171e\u172c\u0001\u0000\u0000\u0000\u171f"+
		"\u1720\u0005\u023c\u0000\u0000\u1720\u1722\u0005\u01da\u0000\u0000\u1721"+
		"\u1723\u0003\u015e\u00af\u0000\u1722\u1721\u0001\u0000\u0000\u0000\u1722"+
		"\u1723\u0001\u0000\u0000\u0000\u1723\u172c\u0001\u0000\u0000\u0000\u1724"+
		"\u1726\u00076\u0000\u0000\u1725\u1727\u0003\u025a\u012d\u0000\u1726\u1725"+
		"\u0001\u0000\u0000\u0000\u1726\u1727\u0001\u0000\u0000\u0000\u1727\u1729"+
		"\u0001\u0000\u0000\u0000\u1728\u172a\u0003\u0202\u0101\u0000\u1729\u1728"+
		"\u0001\u0000\u0000\u0000\u1729\u172a\u0001\u0000\u0000\u0000\u172a\u172c"+
		"\u0001\u0000\u0000\u0000\u172b\u171d\u0001\u0000\u0000\u0000\u172b\u171f"+
		"\u0001\u0000\u0000\u0000\u172b\u1724\u0001\u0000\u0000\u0000\u172c\u0201"+
		"\u0001\u0000\u0000\u0000\u172d\u172e\u0005\u00be\u0000\u0000\u172e\u172f"+
		"\u0005\u0085\u0000\u0000\u172f\u1733\u0005f\u0000\u0000\u1730\u1731\u0005"+
		"@\u0000\u0000\u1731\u1733\u0005\u01a3\u0000\u0000\u1732\u172d\u0001\u0000"+
		"\u0000\u0000\u1732\u1730\u0001\u0000\u0000\u0000\u1733\u0203\u0001\u0000"+
		"\u0000\u0000\u1734\u173c\u0003\u021c\u010e\u0000\u1735\u1736\u0005\u0080"+
		"\u0000\u0000\u1736\u1739\u0005\u0466\u0000\u0000\u1737\u173a\u0003\u0256"+
		"\u012b\u0000\u1738\u173a\u0005\u0006\u0000\u0000\u1739\u1737\u0001\u0000"+
		"\u0000\u0000\u1739\u1738\u0001\u0000\u0000\u0000\u173a\u173b\u0001\u0000"+
		"\u0000\u0000\u173b\u173d\u0005\u0467\u0000\u0000\u173c\u1735\u0001\u0000"+
		"\u0000\u0000\u173c\u173d\u0001\u0000\u0000\u0000\u173d\u1745\u0001\u0000"+
		"\u0000\u0000\u173e\u1740\u0007\u0014\u0000\u0000\u173f\u173e\u0001\u0000"+
		"\u0000\u0000\u173f\u1740\u0001\u0000\u0000\u0000\u1740\u1741\u0001\u0000"+
		"\u0000\u0000\u1741\u1742\u0005\u0466\u0000\u0000\u1742\u1743\u0003\u0256"+
		"\u012b\u0000\u1743\u1744\u0005\u0467\u0000\u0000\u1744\u1746\u0001\u0000"+
		"\u0000\u0000\u1745\u173f\u0001\u0000\u0000\u0000\u1745\u1746\u0001\u0000"+
		"\u0000\u0000\u1746\u1749\u0001\u0000\u0000\u0000\u1747\u1748\u0005M\u0000"+
		"\u0000\u1748\u174a\u0005\u01d4\u0000\u0000\u1749\u1747\u0001\u0000\u0000"+
		"\u0000\u1749\u174a\u0001\u0000\u0000\u0000\u174a\u0205\u0001\u0000\u0000"+
		"\u0000\u174b\u174c\u0007W\u0000\u0000\u174c\u174f\u0003\u021c\u010e\u0000"+
		"\u174d\u1750\u0003\u0236\u011b\u0000\u174e\u1750\u0005\u0475\u0000\u0000"+
		"\u174f\u174d\u0001\u0000\u0000\u0000\u174f\u174e\u0001\u0000\u0000\u0000"+
		"\u174f\u1750\u0001\u0000\u0000\u0000\u1750\u0207\u0001\u0000\u0000\u0000"+
		"\u1751\u1755\u0007W\u0000\u0000\u1752\u1753\u0007X\u0000\u0000\u1753\u1754"+
		"\u0005\u045d\u0000\u0000\u1754\u1756\u0007Y\u0000\u0000\u1755\u1752\u0001"+
		"\u0000\u0000\u0000\u1755\u1756\u0001\u0000\u0000\u0000\u1756\u1757\u0001"+
		"\u0000\u0000\u0000\u1757\u1758\u0003\u0218\u010c\u0000\u1758\u0209\u0001"+
		"\u0000\u0000\u0000\u1759\u175a\u0005\u01ba\u0000\u0000\u175a\u175b\u0005"+
		"\u0475\u0000\u0000\u175b\u020b\u0001\u0000\u0000\u0000\u175c\u175d\u0005"+
		"\u00b8\u0000\u0000\u175d\u175e\u0003\u0236\u011b\u0000\u175e\u020d\u0001"+
		"\u0000\u0000\u0000\u175f\u1767\u0005\u009b\u0000\u0000\u1760\u1762\u0005"+
		"\u00a0\u0000\u0000\u1761\u1763\u0005\u029b\u0000\u0000\u1762\u1761\u0001"+
		"\u0000\u0000\u0000\u1762\u1763\u0001\u0000\u0000\u0000\u1763\u1764\u0001"+
		"\u0000\u0000\u0000\u1764\u1768\u0003\u0240\u0120\u0000\u1765\u1768\u0005"+
		"\u047d\u0000\u0000\u1766\u1768\u0005\u047e\u0000\u0000\u1767\u1760\u0001"+
		"\u0000\u0000\u0000\u1767\u1765\u0001\u0000\u0000\u0000\u1767\u1766\u0001"+
		"\u0000\u0000\u0000\u1768\u1772\u0001\u0000\u0000\u0000\u1769\u176a\u0005"+
		"\u0098\u0000\u0000\u176a\u176f\u0003\u0212\u0109\u0000\u176b\u176c\u0005"+
		"\u0468\u0000\u0000\u176c\u176e\u0003\u0212\u0109\u0000\u176d\u176b\u0001"+
		"\u0000\u0000\u0000\u176e\u1771\u0001\u0000\u0000\u0000\u176f\u176d\u0001"+
		"\u0000\u0000\u0000\u176f\u1770\u0001\u0000\u0000\u0000\u1770\u1773\u0001"+
		"\u0000\u0000\u0000\u1771\u176f\u0001\u0000\u0000\u0000\u1772\u1769\u0001"+
		"\u0000\u0000\u0000\u1772\u1773\u0001\u0000\u0000\u0000\u1773\u020f\u0001"+
		"\u0000\u0000\u0000\u1774\u177c\u0005\u008e\u0000\u0000\u1775\u1777\u0005"+
		"\u00a0\u0000\u0000\u1776\u1778\u0005\u029b\u0000\u0000\u1777\u1776\u0001"+
		"\u0000\u0000\u0000\u1777\u1778\u0001\u0000\u0000\u0000\u1778\u1779\u0001"+
		"\u0000\u0000\u0000\u1779\u177d\u0003\u0240\u0120\u0000\u177a\u177d\u0005"+
		"\u047d\u0000\u0000\u177b\u177d\u0005\u047e\u0000\u0000\u177c\u1775\u0001"+
		"\u0000\u0000\u0000\u177c\u177a\u0001\u0000\u0000\u0000\u177c\u177b\u0001"+
		"\u0000\u0000\u0000\u177c\u177d\u0001\u0000\u0000\u0000\u177d\u1787\u0001"+
		"\u0000\u0000\u0000\u177e\u177f\u0005\u0098\u0000\u0000\u177f\u1784\u0003"+
		"\u0212\u0109\u0000\u1780\u1781\u0005\u0468\u0000\u0000\u1781\u1783\u0003"+
		"\u0212\u0109\u0000\u1782\u1780\u0001\u0000\u0000\u0000\u1783\u1786\u0001"+
		"\u0000\u0000\u0000\u1784\u1782\u0001\u0000\u0000\u0000\u1784\u1785\u0001"+
		"\u0000\u0000\u0000\u1785\u1788\u0001\u0000\u0000\u0000\u1786\u1784\u0001"+
		"\u0000\u0000\u0000\u1787\u177e\u0001\u0000\u0000\u0000\u1787\u1788\u0001"+
		"\u0000\u0000\u0000\u1788\u0211\u0001\u0000\u0000\u0000\u1789\u178a\u0007"+
		"Z\u0000\u0000\u178a\u178f\u0005\u045d\u0000\u0000\u178b\u1790\u0003\u0240"+
		"\u0120\u0000\u178c\u1790\u0005\u0476\u0000\u0000\u178d\u1790\u0003\u0226"+
		"\u0113\u0000\u178e\u1790\u0003\u0238\u011c\u0000\u178f\u178b\u0001\u0000"+
		"\u0000\u0000\u178f\u178c\u0001\u0000\u0000\u0000\u178f\u178d\u0001\u0000"+
		"\u0000\u0000\u178f\u178e\u0001\u0000\u0000\u0000\u1790\u0213\u0001\u0000"+
		"\u0000\u0000\u1791\u1793\u0005F\u0000\u0000\u1792\u1794\u0007[\u0000\u0000"+
		"\u1793\u1792\u0001\u0000\u0000\u0000\u1793\u1794\u0001\u0000\u0000\u0000"+
		"\u1794\u1795\u0001\u0000\u0000\u0000\u1795\u17b5\u00050\u0000\u0000\u1796"+
		"\u1797\u0003\u01e4\u00f2\u0000\u1797\u1798\u0005\u045d\u0000\u0000\u1798"+
		"\u17a0\u0007\\\u0000\u0000\u1799\u179a\u0005\u0468\u0000\u0000\u179a\u179b"+
		"\u0003\u01e4\u00f2\u0000\u179b\u179c\u0005\u045d\u0000\u0000\u179c\u179d"+
		"\u0007\\\u0000\u0000\u179d\u179f\u0001\u0000\u0000\u0000\u179e\u1799\u0001"+
		"\u0000\u0000\u0000\u179f\u17a2\u0001\u0000\u0000\u0000\u17a0\u179e\u0001"+
		"\u0000\u0000\u0000\u17a0\u17a1\u0001\u0000\u0000\u0000\u17a1\u17b6\u0001"+
		"\u0000\u0000\u0000\u17a2\u17a0\u0001\u0000\u0000\u0000\u17a3\u17a6\u0005"+
		"\u001d\u0000\u0000\u17a4\u17a7\u0003\u023c\u011e\u0000\u17a5\u17a7\u0003"+
		"\u01e4\u00f2\u0000\u17a6\u17a4\u0001\u0000\u0000\u0000\u17a6\u17a5\u0001"+
		"\u0000\u0000\u0000\u17a7\u17a8\u0001\u0000\u0000\u0000\u17a8\u17a9\u0003"+
		"\u01e4\u00f2\u0000\u17a9\u17aa\u0005\u045d\u0000\u0000\u17aa\u17b2\u0003"+
		"\u0216\u010b\u0000\u17ab\u17ac\u0005\u0468\u0000\u0000\u17ac\u17ad\u0003"+
		"\u01e4\u00f2\u0000\u17ad\u17ae\u0005\u045d\u0000\u0000\u17ae\u17af\u0003"+
		"\u0216\u010b\u0000\u17af\u17b1\u0001\u0000\u0000\u0000\u17b0\u17ab\u0001"+
		"\u0000\u0000\u0000\u17b1\u17b4\u0001\u0000\u0000\u0000\u17b2\u17b0\u0001"+
		"\u0000\u0000\u0000\u17b2\u17b3\u0001\u0000\u0000\u0000\u17b3\u17b6\u0001"+
		"\u0000\u0000\u0000\u17b4\u17b2\u0001\u0000\u0000\u0000\u17b5\u1796\u0001"+
		"\u0000\u0000\u0000\u17b5\u17a3\u0001\u0000\u0000\u0000\u17b6\u0215\u0001"+
		"\u0000\u0000\u0000\u17b7\u17b8\u0007]\u0000\u0000\u17b8\u0217\u0001\u0000"+
		"\u0000\u0000\u17b9\u17bf\u0003\u00c4b\u0000\u17ba\u17bf\u0003\u00b6[\u0000"+
		"\u17bb\u17bf\u0003\u00bc^\u0000\u17bc\u17bf\u0003\u00c2a\u0000\u17bd\u17bf"+
		"\u0003\u00c6c\u0000\u17be\u17b9\u0001\u0000\u0000\u0000\u17be\u17ba\u0001"+
		"\u0000\u0000\u0000\u17be\u17bb\u0001\u0000\u0000\u0000\u17be\u17bc\u0001"+
		"\u0000\u0000\u0000\u17be\u17bd\u0001\u0000\u0000\u0000\u17bf\u17c4\u0001"+
		"\u0000\u0000\u0000\u17c0\u17c1\u0005@\u0000\u0000\u17c1\u17c2\u0005\u0176"+
		"\u0000\u0000\u17c2\u17c4\u0003\u0236\u011b\u0000\u17c3\u17be\u0001\u0000"+
		"\u0000\u0000\u17c3\u17c0\u0001\u0000\u0000\u0000\u17c4\u0219\u0001\u0000"+
		"\u0000\u0000\u17c5\u17c9\u0003\u0236\u011b\u0000\u17c6\u17ca\u0005\u047c"+
		"\u0000\u0000\u17c7\u17c8\u0005\u0465\u0000\u0000\u17c8\u17ca\u0003\u0236"+
		"\u011b\u0000\u17c9\u17c6\u0001\u0000\u0000\u0000\u17c9\u17c7\u0001\u0000"+
		"\u0000\u0000\u17c9\u17ca\u0001\u0000\u0000\u0000\u17ca\u021b\u0001\u0000"+
		"\u0000\u0000\u17cb\u17cc\u0003\u021a\u010d\u0000\u17cc\u021d\u0001\u0000"+
		"\u0000\u0000\u17cd\u17d0\u0003\u0224\u0112\u0000\u17ce\u17d0\u0003\u0236"+
		"\u011b\u0000\u17cf\u17cd\u0001\u0000\u0000\u0000\u17cf\u17ce\u0001\u0000"+
		"\u0000\u0000\u17d0\u021f\u0001\u0000\u0000\u0000\u17d1\u17d6\u0003\u0236"+
		"\u011b\u0000\u17d2\u17d4\u0003\u023a\u011d\u0000\u17d3\u17d5\u0003\u023a"+
		"\u011d\u0000\u17d4\u17d3\u0001\u0000\u0000\u0000\u17d4\u17d5\u0001\u0000"+
		"\u0000\u0000\u17d5\u17d7\u0001\u0000\u0000\u0000\u17d6\u17d2\u0001\u0000"+
		"\u0000\u0000\u17d6\u17d7\u0001\u0000\u0000\u0000\u17d7\u17e0\u0001\u0000"+
		"\u0000\u0000\u17d8\u17da\t\u0000\u0000\u0000\u17d9\u17d8\u0001\u0000\u0000"+
		"\u0000\u17d9\u17da\u0001\u0000\u0000\u0000\u17da\u17db\u0001\u0000\u0000"+
		"\u0000\u17db\u17dd\u0003\u023a\u011d\u0000\u17dc\u17de\u0003\u023a\u011d"+
		"\u0000\u17dd\u17dc\u0001\u0000\u0000\u0000\u17dd\u17de\u0001\u0000\u0000"+
		"\u0000\u17de\u17e0\u0001\u0000\u0000\u0000\u17df\u17d1\u0001\u0000\u0000"+
		"\u0000\u17df\u17d9\u0001\u0000\u0000\u0000\u17e0\u0221\u0001\u0000\u0000"+
		"\u0000\u17e1\u17e4\u0003\u0236\u011b\u0000\u17e2\u17e4\u0005\u0475\u0000"+
		"\u0000\u17e3\u17e1\u0001\u0000\u0000\u0000\u17e3\u17e2\u0001\u0000\u0000"+
		"\u0000\u17e4\u17e9\u0001\u0000\u0000\u0000\u17e5\u17e6\u0005\u0466\u0000"+
		"\u0000\u17e6\u17e7\u0003\u023c\u011e\u0000\u17e7\u17e8\u0005\u0467\u0000"+
		"\u0000\u17e8\u17ea\u0001\u0000\u0000\u0000\u17e9\u17e5\u0001\u0000\u0000"+
		"\u0000\u17e9\u17ea\u0001\u0000\u0000\u0000\u17ea\u17ed\u0001\u0000\u0000"+
		"\u0000\u17eb\u17ed\u0003\u029e\u014f\u0000\u17ec\u17e3\u0001\u0000\u0000"+
		"\u0000\u17ec\u17eb\u0001\u0000\u0000\u0000\u17ed\u17ef\u0001\u0000\u0000"+
		"\u0000\u17ee\u17f0\u00070\u0000\u0000\u17ef\u17ee\u0001\u0000\u0000\u0000"+
		"\u17ef\u17f0\u0001\u0000\u0000\u0000\u17f0\u0223\u0001\u0000\u0000\u0000"+
		"\u17f1\u17f7\u0005\u047f\u0000\u0000\u17f2\u17f7\u0005\u047d\u0000\u0000"+
		"\u17f3\u17f7\u0005\u0475\u0000\u0000\u17f4\u17f7\u0005\u02b7\u0000\u0000"+
		"\u17f5\u17f7\u0003\u02ba\u015d\u0000\u17f6\u17f1\u0001\u0000\u0000\u0000"+
		"\u17f6\u17f2\u0001\u0000\u0000\u0000\u17f6\u17f3\u0001\u0000\u0000\u0000"+
		"\u17f6\u17f4\u0001\u0000\u0000\u0000\u17f6\u17f5\u0001\u0000\u0000\u0000"+
		"\u17f7\u0225\u0001\u0000\u0000\u0000\u17f8\u17f9\u0007^\u0000\u0000\u17f9"+
		"\u0227\u0001\u0000\u0000\u0000\u17fa\u17ff\u0005\u00e0\u0000\u0000\u17fb"+
		"\u17ff\u0003\u02b0\u0158\u0000\u17fc\u17ff\u0005\u0475\u0000\u0000\u17fd"+
		"\u17ff\u0005\u0472\u0000\u0000\u17fe\u17fa\u0001\u0000\u0000\u0000\u17fe"+
		"\u17fb\u0001\u0000\u0000\u0000\u17fe\u17fc\u0001\u0000\u0000\u0000\u17fe"+
		"\u17fd\u0001\u0000\u0000\u0000\u17ff\u0229\u0001\u0000\u0000\u0000\u1800"+
		"\u1803\u0003\u0236\u011b\u0000\u1801\u1803\u0005\u0475\u0000\u0000\u1802"+
		"\u1800\u0001\u0000\u0000\u0000\u1802\u1801\u0001\u0000\u0000\u0000\u1803"+
		"\u022b\u0001\u0000\u0000\u0000\u1804\u1805\u0007_\u0000\u0000\u1805\u022d"+
		"\u0001\u0000\u0000\u0000\u1806\u1807\u0003\u023c\u011e\u0000\u1807\u1808"+
		"\u0005\u045a\u0000\u0000\u1808\u1809\u0003\u023c\u011e\u0000\u1809\u180a"+
		"\u0005\u045a\u0000\u0000\u180a\u180b\u0003\u023c\u011e\u0000\u180b\u180c"+
		"\u0005\u045a\u0000\u0000\u180c\u180d\u0003\u023c\u011e\u0000\u180d\u180e"+
		"\u0005\u045a\u0000\u0000\u180e\u1814\u0003\u023c\u011e\u0000\u180f\u1810"+
		"\u0005\u0471\u0000\u0000\u1810\u1811\u0003\u023c\u011e\u0000\u1811\u1812"+
		"\u0005\u045a\u0000\u0000\u1812\u1813\u0003\u023c\u011e\u0000\u1813\u1815"+
		"\u0001\u0000\u0000\u0000\u1814\u180f\u0001\u0000\u0000\u0000\u1815\u1816"+
		"\u0001\u0000\u0000\u0000\u1816\u1814\u0001\u0000\u0000\u0000\u1816\u1817"+
		"\u0001\u0000\u0000\u0000\u1817\u022f\u0001\u0000\u0000\u0000\u1818\u181f"+
		"\u0003\u0232\u0119\u0000\u1819\u181a\u0005\u0468\u0000\u0000\u181a\u181d"+
		"\u0003\u0232\u0119\u0000\u181b\u181c\u0005\u0468\u0000\u0000\u181c\u181e"+
		"\u0003\u023c\u011e\u0000\u181d\u181b\u0001\u0000\u0000\u0000\u181d\u181e"+
		"\u0001\u0000\u0000\u0000\u181e\u1820\u0001\u0000\u0000\u0000\u181f\u1819"+
		"\u0001\u0000\u0000\u0000\u181f\u1820\u0001\u0000\u0000\u0000\u1820\u0231"+
		"\u0001\u0000\u0000\u0000\u1821\u1829\u0005\u0475\u0000\u0000\u1822\u1829"+
		"\u0005\u047a\u0000\u0000\u1823\u1825\u0005\u0477\u0000\u0000\u1824\u1823"+
		"\u0001\u0000\u0000\u0000\u1825\u1826\u0001\u0000\u0000\u0000\u1826\u1824"+
		"\u0001\u0000\u0000\u0000\u1826\u1827\u0001\u0000\u0000\u0000\u1827\u1829"+
		"\u0001\u0000\u0000\u0000\u1828\u1821\u0001\u0000\u0000\u0000\u1828\u1822"+
		"\u0001\u0000\u0000\u0000\u1828\u1824\u0001\u0000\u0000\u0000\u1829\u0233"+
		"\u0001\u0000\u0000\u0000\u182a\u182d\u0003\u0236\u011b\u0000\u182b\u182d"+
		"\u0005\u0475\u0000\u0000\u182c\u182a\u0001\u0000\u0000\u0000\u182c\u182b"+
		"\u0001\u0000\u0000\u0000\u182d\u0235\u0001\u0000\u0000\u0000\u182e\u1832"+
		"\u0003\u0238\u011c\u0000\u182f\u1832\u0005\u047e\u0000\u0000\u1830\u1832"+
		"\u0005\u0472\u0000\u0000\u1831\u182e\u0001\u0000\u0000\u0000\u1831\u182f"+
		"\u0001\u0000\u0000\u0000\u1831\u1830\u0001\u0000\u0000\u0000\u1832\u0237"+
		"\u0001\u0000\u0000\u0000\u1833\u183d\u0005\u047d\u0000\u0000\u1834\u183d"+
		"\u0003\u02b0\u0158\u0000\u1835\u183d\u0003\u02b2\u0159\u0000\u1836\u183d"+
		"\u0003\u022c\u0116\u0000\u1837\u183d\u0003\u02b4\u015a\u0000\u1838\u183d"+
		"\u0003\u02b6\u015b\u0000\u1839\u183d\u0003\u02b8\u015c\u0000\u183a\u183d"+
		"\u0003\u02ba\u015d\u0000\u183b\u183d\u0003\u0296\u014b\u0000\u183c\u1833"+
		"\u0001\u0000\u0000\u0000\u183c\u1834\u0001\u0000\u0000\u0000\u183c\u1835"+
		"\u0001\u0000\u0000\u0000\u183c\u1836\u0001\u0000\u0000\u0000\u183c\u1837"+
		"\u0001\u0000\u0000\u0000\u183c\u1838\u0001\u0000\u0000\u0000\u183c\u1839"+
		"\u0001\u0000\u0000\u0000\u183c\u183a\u0001\u0000\u0000\u0000\u183c\u183b"+
		"\u0001\u0000\u0000\u0000\u183d\u0239\u0001\u0000\u0000\u0000\u183e\u1842"+
		"\u0005\u047c\u0000\u0000\u183f\u1840\u0005\u0465\u0000\u0000\u1840\u1842"+
		"\u0003\u0236\u011b\u0000\u1841\u183e\u0001\u0000\u0000\u0000\u1841\u183f"+
		"\u0001\u0000\u0000\u0000\u1842\u023b\u0001\u0000\u0000\u0000\u1843\u1844"+
		"\u0007`\u0000\u0000\u1844\u023d\u0001\u0000\u0000\u0000\u1845\u1848\u0005"+
		"\u0473\u0000\u0000\u1846\u1848\u0003\u023c\u011e\u0000\u1847\u1845\u0001"+
		"\u0000\u0000\u0000\u1847\u1846\u0001\u0000\u0000\u0000\u1848\u023f\u0001"+
		"\u0000\u0000\u0000\u1849\u184b\u0005\u047b\u0000\u0000\u184a\u1849\u0001"+
		"\u0000\u0000\u0000\u184a\u184b\u0001\u0000\u0000\u0000\u184b\u184c\u0001"+
		"\u0000\u0000\u0000\u184c\u184f\u0005\u0475\u0000\u0000\u184d\u184f\u0005"+
		"\u0474\u0000\u0000\u184e\u184a\u0001\u0000\u0000\u0000\u184e\u184d\u0001"+
		"\u0000\u0000\u0000\u184f\u1851\u0001\u0000\u0000\u0000\u1850\u1852\u0005"+
		"\u0475\u0000\u0000\u1851\u1850\u0001\u0000\u0000\u0000\u1852\u1853\u0001"+
		"\u0000\u0000\u0000\u1853\u1851\u0001\u0000\u0000\u0000\u1853\u1854\u0001"+
		"\u0000\u0000\u0000\u1854\u1861\u0001\u0000\u0000\u0000\u1855\u1857\u0005"+
		"\u047b\u0000\u0000\u1856\u1855\u0001\u0000\u0000\u0000\u1856\u1857\u0001"+
		"\u0000\u0000\u0000\u1857\u1858\u0001\u0000\u0000\u0000\u1858\u185b\u0005"+
		"\u0475\u0000\u0000\u1859\u185b\u0005\u0474\u0000\u0000\u185a\u1856\u0001"+
		"\u0000\u0000\u0000\u185a\u1859\u0001\u0000\u0000\u0000\u185b\u185e\u0001"+
		"\u0000\u0000\u0000\u185c\u185d\u0005\u001b\u0000\u0000\u185d\u185f\u0003"+
		"\u022a\u0115\u0000\u185e\u185c\u0001\u0000\u0000\u0000\u185e\u185f\u0001"+
		"\u0000\u0000\u0000\u185f\u1861\u0001\u0000\u0000\u0000\u1860\u184e\u0001"+
		"\u0000\u0000\u0000\u1860\u185a\u0001\u0000\u0000\u0000\u1861\u0241\u0001"+
		"\u0000\u0000\u0000\u1862\u1863\u0007a\u0000\u0000\u1863\u0243\u0001\u0000"+
		"\u0000\u0000\u1864\u1866\u0005\u047b\u0000\u0000\u1865\u1864\u0001\u0000"+
		"\u0000\u0000\u1865\u1866\u0001\u0000\u0000\u0000\u1866\u1867\u0001\u0000"+
		"\u0000\u0000\u1867\u1868\u0005\u0477\u0000\u0000\u1868\u0245\u0001\u0000"+
		"\u0000\u0000\u1869\u186b\u0005q\u0000\u0000\u186a\u1869\u0001\u0000\u0000"+
		"\u0000\u186a\u186b\u0001\u0000\u0000\u0000\u186b\u186c\u0001\u0000\u0000"+
		"\u0000\u186c\u186d\u0007b\u0000\u0000\u186d\u0247\u0001\u0000\u0000\u0000"+
		"\u186e\u187b\u0003\u0240\u0120\u0000\u186f\u187b\u0003\u023c\u011e\u0000"+
		"\u1870\u1871\u0005\u045a\u0000\u0000\u1871\u187b\u0003\u023c\u011e\u0000"+
		"\u1872\u187b\u0003\u0244\u0122\u0000\u1873\u187b\u0003\u0242\u0121\u0000"+
		"\u1874\u187b\u0005\u0478\u0000\u0000\u1875\u187b\u0005\u047a\u0000\u0000"+
		"\u1876\u1878\u0005q\u0000\u0000\u1877\u1876\u0001\u0000\u0000\u0000\u1877"+
		"\u1878\u0001\u0000\u0000\u0000\u1878\u1879\u0001\u0000\u0000\u0000\u1879"+
		"\u187b\u0007b\u0000\u0000\u187a\u186e\u0001\u0000\u0000\u0000\u187a\u186f"+
		"\u0001\u0000\u0000\u0000\u187a\u1870\u0001\u0000\u0000\u0000\u187a\u1872"+
		"\u0001\u0000\u0000\u0000\u187a\u1873\u0001\u0000\u0000\u0000\u187a\u1874"+
		"\u0001\u0000\u0000\u0000\u187a\u1875\u0001\u0000\u0000\u0000\u187a\u1877"+
		"\u0001\u0000\u0000\u0000\u187b\u0249\u0001\u0000\u0000\u0000\u187c\u187e"+
		"\u0007c\u0000\u0000\u187d\u187f\u0005\u00ec\u0000\u0000\u187e\u187d\u0001"+
		"\u0000\u0000\u0000\u187e\u187f\u0001\u0000\u0000\u0000\u187f\u1881\u0001"+
		"\u0000\u0000\u0000\u1880\u1882\u0003\u0250\u0128\u0000\u1881\u1880\u0001"+
		"\u0000\u0000\u0000\u1881\u1882\u0001\u0000\u0000\u0000\u1882\u1884\u0001"+
		"\u0000\u0000\u0000\u1883\u1885\u0005\u00e0\u0000\u0000\u1884\u1883\u0001"+
		"\u0000\u0000\u0000\u1884\u1885\u0001\u0000\u0000\u0000\u1885\u1889\u0001"+
		"\u0000\u0000\u0000\u1886\u1887\u0003<\u001e\u0000\u1887\u1888\u0003\u0228"+
		"\u0114\u0000\u1888\u188a\u0001\u0000\u0000\u0000\u1889\u1886\u0001\u0000"+
		"\u0000\u0000\u1889\u188a\u0001\u0000\u0000\u0000\u188a\u188e\u0001\u0000"+
		"\u0000\u0000\u188b\u188c\u0005\u001b\u0000\u0000\u188c\u188f\u0003\u022a"+
		"\u0115\u0000\u188d\u188f\u0005\u00e0\u0000\u0000\u188e\u188b\u0001\u0000"+
		"\u0000\u0000\u188e\u188d\u0001\u0000\u0000\u0000\u188e\u188f\u0001\u0000"+
		"\u0000\u0000\u188f\u18f7\u0001\u0000\u0000\u0000\u1890\u1891\u0005\u00df"+
		"\u0000\u0000\u1891\u1893\u0007d\u0000\u0000\u1892\u1894\u0003\u0250\u0128"+
		"\u0000\u1893\u1892\u0001\u0000\u0000\u0000\u1893\u1894\u0001\u0000\u0000"+
		"\u0000\u1894\u1896\u0001\u0000\u0000\u0000\u1895\u1897\u0005\u00e0\u0000"+
		"\u0000\u1896\u1895\u0001\u0000\u0000\u0000\u1896\u1897\u0001\u0000\u0000"+
		"\u0000\u1897\u18f7\u0001\u0000\u0000\u0000\u1898\u1899\u0005\u0204\u0000"+
		"\u0000\u1899\u189b\u0005\u00dd\u0000\u0000\u189a\u189c\u0003\u0250\u0128"+
		"\u0000\u189b\u189a\u0001\u0000\u0000\u0000\u189b\u189c\u0001\u0000\u0000"+
		"\u0000\u189c\u189e\u0001\u0000\u0000\u0000\u189d\u189f\u0005\u00e0\u0000"+
		"\u0000\u189e\u189d\u0001\u0000\u0000\u0000\u189e\u189f\u0001\u0000\u0000"+
		"\u0000\u189f\u18f7\u0001\u0000\u0000\u0000\u18a0\u18a1\u0005\u00df\u0000"+
		"\u0000\u18a1\u18a2\u0007e\u0000\u0000\u18a2\u18a4\u0005\u00ec\u0000\u0000"+
		"\u18a3\u18a5\u0003\u0250\u0128\u0000\u18a4\u18a3\u0001\u0000\u0000\u0000"+
		"\u18a4\u18a5\u0001\u0000\u0000\u0000\u18a5\u18a7\u0001\u0000\u0000\u0000"+
		"\u18a6\u18a8\u0005\u00e0\u0000\u0000\u18a7\u18a6\u0001\u0000\u0000\u0000"+
		"\u18a7\u18a8\u0001\u0000\u0000\u0000\u18a8\u18f7\u0001\u0000\u0000\u0000"+
		"\u18a9\u18ab\u0007f\u0000\u0000\u18aa\u18ac\u0003\u0250\u0128\u0000\u18ab"+
		"\u18aa\u0001\u0000\u0000\u0000\u18ab\u18ac\u0001\u0000\u0000\u0000\u18ac"+
		"\u18b0\u0001\u0000\u0000\u0000\u18ad\u18af\u0007g\u0000\u0000\u18ae\u18ad"+
		"\u0001\u0000\u0000\u0000\u18af\u18b2\u0001\u0000\u0000\u0000\u18b0\u18ae"+
		"\u0001\u0000\u0000\u0000\u18b0\u18b1\u0001\u0000\u0000\u0000\u18b1\u18f7"+
		"\u0001\u0000\u0000\u0000\u18b2\u18b0\u0001\u0000\u0000\u0000\u18b3\u18b5"+
		"\u0005\u00ce\u0000\u0000\u18b4\u18b6\u0003\u0252\u0129\u0000\u18b5\u18b4"+
		"\u0001\u0000\u0000\u0000\u18b5\u18b6\u0001\u0000\u0000\u0000\u18b6\u18ba"+
		"\u0001\u0000\u0000\u0000\u18b7\u18b9\u0007g\u0000\u0000\u18b8\u18b7\u0001"+
		"\u0000\u0000\u0000\u18b9\u18bc\u0001\u0000\u0000\u0000\u18ba\u18b8\u0001"+
		"\u0000\u0000\u0000\u18ba\u18bb\u0001\u0000\u0000\u0000\u18bb\u18f7\u0001"+
		"\u0000\u0000\u0000\u18bc\u18ba\u0001\u0000\u0000\u0000\u18bd\u18bf\u0005"+
		"\u00cf\u0000\u0000\u18be\u18c0\u0005\u00d0\u0000\u0000\u18bf\u18be\u0001"+
		"\u0000\u0000\u0000\u18bf\u18c0\u0001\u0000\u0000\u0000\u18c0\u18c2\u0001"+
		"\u0000\u0000\u0000\u18c1\u18c3\u0003\u0252\u0129\u0000\u18c2\u18c1\u0001"+
		"\u0000\u0000\u0000\u18c2\u18c3\u0001\u0000\u0000\u0000\u18c3\u18c7\u0001"+
		"\u0000\u0000\u0000\u18c4\u18c6\u0007g\u0000\u0000\u18c5\u18c4\u0001\u0000"+
		"\u0000\u0000\u18c6\u18c9\u0001\u0000\u0000\u0000\u18c7\u18c5\u0001\u0000"+
		"\u0000\u0000\u18c7\u18c8\u0001\u0000\u0000\u0000\u18c8\u18f7\u0001\u0000"+
		"\u0000\u0000\u18c9\u18c7\u0001\u0000\u0000\u0000\u18ca\u18cc\u0007h\u0000"+
		"\u0000\u18cb\u18cd\u0003\u0254\u012a\u0000\u18cc\u18cb\u0001\u0000\u0000"+
		"\u0000\u18cc\u18cd\u0001\u0000\u0000\u0000\u18cd\u18d1\u0001\u0000\u0000"+
		"\u0000\u18ce\u18d0\u0007g\u0000\u0000\u18cf\u18ce\u0001\u0000\u0000\u0000"+
		"\u18d0\u18d3\u0001\u0000\u0000\u0000\u18d1\u18cf\u0001\u0000\u0000\u0000"+
		"\u18d1\u18d2\u0001\u0000\u0000\u0000\u18d2\u18f7\u0001\u0000\u0000\u0000"+
		"\u18d3\u18d1\u0001\u0000\u0000\u0000\u18d4\u18f7\u0007i\u0000\u0000\u18d5"+
		"\u18d7\u0007j\u0000\u0000\u18d6\u18d8\u0003\u0250\u0128\u0000\u18d7\u18d6"+
		"\u0001\u0000\u0000\u0000\u18d7\u18d8\u0001\u0000\u0000\u0000\u18d8\u18f7"+
		"\u0001\u0000\u0000\u0000\u18d9\u18da\u0007k\u0000\u0000\u18da\u18dc\u0003"+
		"\u024c\u0126\u0000\u18db\u18dd\u0005\u00e0\u0000\u0000\u18dc\u18db\u0001"+
		"\u0000\u0000\u0000\u18dc\u18dd\u0001\u0000\u0000\u0000\u18dd\u18e1\u0001"+
		"\u0000\u0000\u0000\u18de\u18df\u0003<\u001e\u0000\u18df\u18e0\u0003\u0228"+
		"\u0114\u0000\u18e0\u18e2\u0001\u0000\u0000\u0000\u18e1\u18de\u0001\u0000"+
		"\u0000\u0000\u18e1\u18e2\u0001\u0000\u0000\u0000\u18e2\u18f7\u0001\u0000"+
		"\u0000\u0000\u18e3\u18f7\u0007l\u0000\u0000\u18e4\u18e6\u0005\u00e5\u0000"+
		"\u0000\u18e5\u18e7\u0005\u00dd\u0000\u0000\u18e6\u18e5\u0001\u0000\u0000"+
		"\u0000\u18e6\u18e7\u0001\u0000\u0000\u0000\u18e7\u18e9\u0001\u0000\u0000"+
		"\u0000\u18e8\u18ea\u0005\u00e0\u0000\u0000\u18e9\u18e8\u0001\u0000\u0000"+
		"\u0000\u18e9\u18ea\u0001\u0000\u0000\u0000\u18ea\u18ee\u0001\u0000\u0000"+
		"\u0000\u18eb\u18ec\u0003<\u001e\u0000\u18ec\u18ed\u0003\u0228\u0114\u0000"+
		"\u18ed\u18ef\u0001\u0000\u0000\u0000\u18ee\u18eb\u0001\u0000\u0000\u0000"+
		"\u18ee\u18ef\u0001\u0000\u0000\u0000\u18ef\u18f2\u0001\u0000\u0000\u0000"+
		"\u18f0\u18f1\u0005\u001b\u0000\u0000\u18f1\u18f3\u0003\u022a\u0115\u0000"+
		"\u18f2\u18f0\u0001\u0000\u0000\u0000\u18f2\u18f3\u0001\u0000\u0000\u0000"+
		"\u18f3\u18f7\u0001\u0000\u0000\u0000\u18f4\u18f5\u0005\u00e5\u0000\u0000"+
		"\u18f5\u18f7\u0005\u00e1\u0000\u0000\u18f6\u187c\u0001\u0000\u0000\u0000"+
		"\u18f6\u1890\u0001\u0000\u0000\u0000\u18f6\u1898\u0001\u0000\u0000\u0000"+
		"\u18f6\u18a0\u0001\u0000\u0000\u0000\u18f6\u18a9\u0001\u0000\u0000\u0000"+
		"\u18f6\u18b3\u0001\u0000\u0000\u0000\u18f6\u18bd\u0001\u0000\u0000\u0000"+
		"\u18f6\u18ca\u0001\u0000\u0000\u0000\u18f6\u18d4\u0001\u0000\u0000\u0000"+
		"\u18f6\u18d5\u0001\u0000\u0000\u0000\u18f6\u18d9\u0001\u0000\u0000\u0000"+
		"\u18f6\u18e3\u0001\u0000\u0000\u0000\u18f6\u18e4\u0001\u0000\u0000\u0000"+
		"\u18f6\u18f4\u0001\u0000\u0000\u0000\u18f7\u024b\u0001\u0000\u0000\u0000"+
		"\u18f8\u18f9\u0005\u0466\u0000\u0000\u18f9\u18fe\u0005\u0475\u0000\u0000"+
		"\u18fa\u18fb\u0005\u0468\u0000\u0000\u18fb\u18fd\u0005\u0475\u0000\u0000"+
		"\u18fc\u18fa\u0001\u0000\u0000\u0000\u18fd\u1900\u0001\u0000\u0000\u0000"+
		"\u18fe\u18fc\u0001\u0000\u0000\u0000\u18fe\u18ff\u0001\u0000\u0000\u0000"+
		"\u18ff\u1901\u0001\u0000\u0000\u0000\u1900\u18fe\u0001\u0000\u0000\u0000"+
		"\u1901\u1902\u0005\u0467\u0000\u0000\u1902\u024d\u0001\u0000\u0000\u0000"+
		"\u1903\u1905\u0007m\u0000\u0000\u1904\u1906\u0003\u0250\u0128\u0000\u1905"+
		"\u1904\u0001\u0000\u0000\u0000\u1905\u1906\u0001\u0000\u0000\u0000\u1906"+
		"\u191a\u0001\u0000\u0000\u0000\u1907\u1909\u0005\u00dc\u0000\u0000\u1908"+
		"\u190a\u0003\u0250\u0128\u0000\u1909\u1908\u0001\u0000\u0000\u0000\u1909"+
		"\u190a\u0001\u0000\u0000\u0000\u190a\u190e\u0001\u0000\u0000\u0000\u190b"+
		"\u190c\u0003<\u001e\u0000\u190c\u190d\u0003\u0228\u0114\u0000\u190d\u190f"+
		"\u0001\u0000\u0000\u0000\u190e\u190b\u0001\u0000\u0000\u0000\u190e\u190f"+
		"\u0001\u0000\u0000\u0000\u190f\u191a\u0001\u0000\u0000\u0000\u1910\u191a"+
		"\u0007n\u0000\u0000\u1911\u1913\u0005\u00d4\u0000\u0000\u1912\u1914\u0003"+
		"\u0254\u012a\u0000\u1913\u1912\u0001\u0000\u0000\u0000\u1913\u1914\u0001"+
		"\u0000\u0000\u0000\u1914\u191a\u0001\u0000\u0000\u0000\u1915\u1917\u0007"+
		"o\u0000\u0000\u1916\u1918\u0005\u00cc\u0000\u0000\u1917\u1916\u0001\u0000"+
		"\u0000\u0000\u1917\u1918\u0001\u0000\u0000\u0000\u1918\u191a\u0001\u0000"+
		"\u0000\u0000\u1919\u1903\u0001\u0000\u0000\u0000\u1919\u1907\u0001\u0000"+
		"\u0000\u0000\u1919\u1910\u0001\u0000\u0000\u0000\u1919\u1911\u0001\u0000"+
		"\u0000\u0000\u1919\u1915\u0001\u0000\u0000\u0000\u191a\u191c\u0001\u0000"+
		"\u0000\u0000\u191b\u191d\u0005\u000b\u0000\u0000\u191c\u191b\u0001\u0000"+
		"\u0000\u0000\u191c\u191d\u0001\u0000\u0000\u0000\u191d\u024f\u0001\u0000"+
		"\u0000\u0000\u191e\u191f\u0005\u0466\u0000\u0000\u191f\u1920\u0003\u023c"+
		"\u011e\u0000\u1920\u1921\u0005\u0467\u0000\u0000\u1921\u0251\u0001\u0000"+
		"\u0000\u0000\u1922\u1923\u0005\u0466\u0000\u0000\u1923\u1924\u0003\u023c"+
		"\u011e\u0000\u1924\u1925\u0005\u0468\u0000\u0000\u1925\u1926\u0003\u023c"+
		"\u011e\u0000\u1926\u1927\u0005\u0467\u0000\u0000\u1927\u0253\u0001\u0000"+
		"\u0000\u0000\u1928\u1929\u0005\u0466\u0000\u0000\u1929\u192c\u0003\u023c"+
		"\u011e\u0000\u192a\u192b\u0005\u0468\u0000\u0000\u192b\u192d\u0003\u023c"+
		"\u011e\u0000\u192c\u192a\u0001\u0000\u0000\u0000\u192c\u192d\u0001\u0000"+
		"\u0000\u0000\u192d\u192e\u0001\u0000\u0000\u0000\u192e\u192f\u0005\u0467"+
		"\u0000\u0000\u192f\u0255\u0001\u0000\u0000\u0000\u1930\u1935\u0003\u0236"+
		"\u011b\u0000\u1931\u1932\u0005\u0468\u0000\u0000\u1932\u1934\u0003\u0236"+
		"\u011b\u0000\u1933\u1931\u0001\u0000\u0000\u0000\u1934\u1937\u0001\u0000"+
		"\u0000\u0000\u1935\u1933\u0001\u0000\u0000\u0000\u1935\u1936\u0001\u0000"+
		"\u0000\u0000\u1936\u0257\u0001\u0000\u0000\u0000\u1937\u1935\u0001\u0000"+
		"\u0000\u0000\u1938\u193d\u0003\u0220\u0110\u0000\u1939\u193a\u0005\u0468"+
		"\u0000\u0000\u193a\u193c\u0003\u0220\u0110\u0000\u193b\u1939\u0001\u0000"+
		"\u0000\u0000\u193c\u193f\u0001\u0000\u0000\u0000\u193d\u193b\u0001\u0000"+
		"\u0000\u0000\u193d\u193e\u0001\u0000\u0000\u0000\u193e\u0259\u0001\u0000"+
		"\u0000\u0000\u193f\u193d\u0001\u0000\u0000\u0000\u1940\u1945\u0003\u021c"+
		"\u010e\u0000\u1941\u1942\u0005\u0468\u0000\u0000\u1942\u1944\u0003\u021c"+
		"\u010e\u0000\u1943\u1941\u0001\u0000\u0000\u0000\u1944\u1947\u0001\u0000"+
		"\u0000\u0000\u1945\u1943\u0001\u0000\u0000\u0000\u1945\u1946\u0001\u0000"+
		"\u0000\u0000\u1946\u025b\u0001\u0000\u0000\u0000\u1947\u1945\u0001\u0000"+
		"\u0000\u0000\u1948\u1949\u0005\u0466\u0000\u0000\u1949\u194e\u0003\u0222"+
		"\u0111\u0000\u194a\u194b\u0005\u0468\u0000\u0000\u194b\u194d\u0003\u0222"+
		"\u0111\u0000\u194c\u194a\u0001\u0000\u0000\u0000\u194d\u1950\u0001\u0000"+
		"\u0000\u0000\u194e\u194c\u0001\u0000\u0000\u0000\u194e\u194f\u0001\u0000"+
		"\u0000\u0000\u194f\u1951\u0001\u0000\u0000\u0000\u1950\u194e\u0001\u0000"+
		"\u0000\u0000\u1951\u1952\u0005\u0467\u0000\u0000\u1952\u025d\u0001\u0000"+
		"\u0000\u0000\u1953\u1958\u0003\u029e\u014f\u0000\u1954\u1955\u0005\u0468"+
		"\u0000\u0000\u1955\u1957\u0003\u029e\u014f\u0000\u1956\u1954\u0001\u0000"+
		"\u0000\u0000\u1957\u195a\u0001\u0000\u0000\u0000\u1958\u1956\u0001\u0000"+
		"\u0000\u0000\u1958\u1959\u0001\u0000\u0000\u0000\u1959\u025f\u0001\u0000"+
		"\u0000\u0000\u195a\u1958\u0001\u0000\u0000\u0000\u195b\u1960\u0003\u026c"+
		"\u0136\u0000\u195c\u195d\u0005\u0468\u0000\u0000\u195d\u195f\u0003\u026c"+
		"\u0136\u0000\u195e\u195c\u0001\u0000\u0000\u0000\u195f\u1962\u0001\u0000"+
		"\u0000\u0000\u1960\u195e\u0001\u0000\u0000\u0000\u1960\u1961\u0001\u0000"+
		"\u0000\u0000\u1961\u0261\u0001\u0000\u0000\u0000\u1962\u1960\u0001\u0000"+
		"\u0000\u0000\u1963\u1968\u0003\u0248\u0124\u0000\u1964\u1965\u0005\u0468"+
		"\u0000\u0000\u1965\u1967\u0003\u0248\u0124\u0000\u1966\u1964\u0001\u0000"+
		"\u0000\u0000\u1967\u196a\u0001\u0000\u0000\u0000\u1968\u1966\u0001\u0000"+
		"\u0000\u0000\u1968\u1969\u0001\u0000\u0000\u0000\u1969\u0263\u0001\u0000"+
		"\u0000\u0000\u196a\u1968\u0001\u0000\u0000\u0000\u196b\u1970\u0005\u0475"+
		"\u0000\u0000\u196c\u196d\u0005\u0468\u0000\u0000\u196d\u196f\u0005\u0475"+
		"\u0000\u0000\u196e\u196c\u0001\u0000\u0000\u0000\u196f\u1972\u0001\u0000"+
		"\u0000\u0000\u1970\u196e\u0001\u0000\u0000\u0000\u1970\u1971\u0001\u0000"+
		"\u0000\u0000\u1971\u0265\u0001\u0000\u0000\u0000\u1972\u1970\u0001\u0000"+
		"\u0000\u0000\u1973\u1978\u0005\u0481\u0000\u0000\u1974\u1975\u0005\u0468"+
		"\u0000\u0000\u1975\u1977\u0005\u0481\u0000\u0000\u1976\u1974\u0001\u0000"+
		"\u0000\u0000\u1977\u197a\u0001\u0000\u0000\u0000\u1978\u1976\u0001\u0000"+
		"\u0000\u0000\u1978\u1979\u0001\u0000\u0000\u0000\u1979\u0267\u0001\u0000"+
		"\u0000\u0000\u197a\u1978\u0001\u0000\u0000\u0000\u197b\u1996\u0005s\u0000"+
		"\u0000\u197c\u197d\u0005\u0017\u0000\u0000\u197d\u197e\u0005\u0466\u0000"+
		"\u0000\u197e\u197f\u0003\u029e\u014f\u0000\u197f\u1980\u0005\f\u0000\u0000"+
		"\u1980\u1981\u0003\u024e\u0127\u0000\u1981\u1982\u0005\u0467\u0000\u0000"+
		"\u1982\u1996\u0001\u0000\u0000\u0000\u1983\u1985\u0003\u02a4\u0152\u0000"+
		"\u1984\u1983\u0001\u0000\u0000\u0000\u1984\u1985\u0001\u0000\u0000\u0000"+
		"\u1985\u1986\u0001\u0000\u0000\u0000\u1986\u1996\u0003\u0248\u0124\u0000"+
		"\u1987\u198b\u0003\u026a\u0135\u0000\u1988\u1989\u0005u\u0000\u0000\u1989"+
		"\u198a\u0005\u00b6\u0000\u0000\u198a\u198c\u0003\u026a\u0135\u0000\u198b"+
		"\u1988\u0001\u0000\u0000\u0000\u198b\u198c\u0001\u0000\u0000\u0000\u198c"+
		"\u1996\u0001\u0000\u0000\u0000\u198d\u198e\u0005\u0466\u0000\u0000\u198e"+
		"\u198f\u0003\u029e\u014f\u0000\u198f\u1990\u0005\u0467\u0000\u0000\u1990"+
		"\u1996\u0001\u0000\u0000\u0000\u1991\u1992\u0005\u0466\u0000\u0000\u1992"+
		"\u1993\u0003\u021a\u010d\u0000\u1993\u1994\u0005\u0467\u0000\u0000\u1994"+
		"\u1996\u0001\u0000\u0000\u0000\u1995\u197b\u0001\u0000\u0000\u0000\u1995"+
		"\u197c\u0001\u0000\u0000\u0000\u1995\u1984\u0001\u0000\u0000\u0000\u1995"+
		"\u1987\u0001\u0000\u0000\u0000\u1995\u198d\u0001\u0000\u0000\u0000\u1995"+
		"\u1991\u0001\u0000\u0000\u0000\u1996\u0269\u0001\u0000\u0000\u0000\u1997"+
		"\u199d\u0007p\u0000\u0000\u1998\u199a\u0005\u0466\u0000\u0000\u1999\u199b"+
		"\u0003\u023c\u011e\u0000\u199a\u1999\u0001\u0000\u0000\u0000\u199a\u199b"+
		"\u0001\u0000\u0000\u0000\u199b\u199c\u0001\u0000\u0000\u0000\u199c\u199e"+
		"\u0005\u0467\u0000\u0000\u199d\u1998\u0001\u0000\u0000\u0000\u199d\u199e"+
		"\u0001\u0000\u0000\u0000\u199e\u19a6\u0001\u0000\u0000\u0000\u199f\u19a0"+
		"\u0005\u0141\u0000\u0000\u19a0\u19a2\u0005\u0466\u0000\u0000\u19a1\u19a3"+
		"\u0003\u023c\u011e\u0000\u19a2\u19a1\u0001\u0000\u0000\u0000\u19a2\u19a3"+
		"\u0001\u0000\u0000\u0000\u19a3\u19a4\u0001\u0000\u0000\u0000\u19a4\u19a6"+
		"\u0005\u0467\u0000\u0000\u19a5\u1997\u0001\u0000\u0000\u0000\u19a5\u199f"+
		"\u0001\u0000\u0000\u0000\u19a6\u026b\u0001\u0000\u0000\u0000\u19a7\u19aa"+
		"\u0003\u029e\u014f\u0000\u19a8\u19aa\u0005*\u0000\u0000\u19a9\u19a7\u0001"+
		"\u0000\u0000\u0000\u19a9\u19a8\u0001\u0000\u0000\u0000\u19aa\u026d\u0001"+
		"\u0000\u0000\u0000\u19ab\u19ac\u0005L\u0000\u0000\u19ac\u19ad\u0005;\u0000"+
		"\u0000\u19ad\u026f\u0001\u0000\u0000\u0000\u19ae\u19af\u0005L\u0000\u0000"+
		"\u19af\u19b0\u0005q\u0000\u0000\u19b0\u19b1\u0005;\u0000\u0000\u19b1\u0271"+
		"\u0001\u0000\u0000\u0000\u19b2\u19b3\u0005z\u0000\u0000\u19b3\u19b4\u0005"+
		"\u008c\u0000\u0000\u19b4\u0273\u0001\u0000\u0000\u0000\u19b5\u19b6\u0005"+
		"\u02a0\u0000\u0000\u19b6\u19b9\u0003\u023c\u011e\u0000\u19b7\u19b9\u0005"+
		"\u020d\u0000\u0000\u19b8\u19b5\u0001\u0000\u0000\u0000\u19b8\u19b7\u0001"+
		"\u0000\u0000\u0000\u19b9\u0275\u0001\u0000\u0000\u0000\u19ba\u19cd\u0003"+
		"\u0278\u013c\u0000\u19bb\u19cd\u0003\u0280\u0140\u0000\u19bc\u19cd\u0003"+
		"\u0282\u0141\u0000\u19bd\u19be\u0003\u0296\u014b\u0000\u19be\u19c0\u0005"+
		"\u0466\u0000\u0000\u19bf\u19c1\u0003\u029a\u014d\u0000\u19c0\u19bf\u0001"+
		"\u0000\u0000\u0000\u19c0\u19c1\u0001\u0000\u0000\u0000\u19c1\u19c2\u0001"+
		"\u0000\u0000\u0000\u19c2\u19c3\u0005\u0467\u0000\u0000\u19c3\u19cd\u0001"+
		"\u0000\u0000\u0000\u19c4\u19c5\u0003\u021a\u010d\u0000\u19c5\u19c7\u0005"+
		"\u0466\u0000\u0000\u19c6\u19c8\u0003\u029a\u014d\u0000\u19c7\u19c6\u0001"+
		"\u0000\u0000\u0000\u19c7\u19c8\u0001\u0000\u0000\u0000\u19c8\u19c9\u0001"+
		"\u0000\u0000\u0000\u19c9\u19ca\u0005\u0467\u0000\u0000\u19ca\u19cd\u0001"+
		"\u0000\u0000\u0000\u19cb\u19cd\u0003\u0298\u014c\u0000\u19cc\u19ba\u0001"+
		"\u0000\u0000\u0000\u19cc\u19bb\u0001\u0000\u0000\u0000\u19cc\u19bc\u0001"+
		"\u0000\u0000\u0000\u19cc\u19bd\u0001\u0000\u0000\u0000\u19cc\u19c4\u0001"+
		"\u0000\u0000\u0000\u19cc\u19cb\u0001\u0000\u0000\u0000\u19cd\u0277\u0001"+
		"\u0000\u0000\u0000\u19ce\u19d1\u0007q\u0000\u0000\u19cf\u19d0\u0005\u0466"+
		"\u0000\u0000\u19d0\u19d2\u0005\u0467\u0000\u0000\u19d1\u19cf\u0001\u0000"+
		"\u0000\u0000\u19d1\u19d2\u0001\u0000\u0000\u0000\u19d2\u1a81\u0001\u0000"+
		"\u0000\u0000\u19d3\u19d4\u0005 \u0000\u0000\u19d4\u19d5\u0005\u0466\u0000"+
		"\u0000\u19d5\u19d6\u0003\u029e\u014f\u0000\u19d6\u19d7\u0005\u0468\u0000"+
		"\u0000\u19d7\u19d8\u0003\u024e\u0127\u0000\u19d8\u19d9\u0005\u0467\u0000"+
		"\u0000\u19d9\u1a81\u0001\u0000\u0000\u0000\u19da\u19db\u0005 \u0000\u0000"+
		"\u19db\u19dc\u0005\u0466\u0000\u0000\u19dc\u19dd\u0003\u029e\u014f\u0000"+
		"\u19dd\u19de\u0005\u00b9\u0000\u0000\u19de\u19df\u0003\u0228\u0114\u0000"+
		"\u19df\u19e0\u0005\u0467\u0000\u0000\u19e0\u1a81\u0001\u0000\u0000\u0000"+
		"\u19e1\u19e2\u0005\u0017\u0000\u0000\u19e2\u19e3\u0005\u0466\u0000\u0000"+
		"\u19e3\u19e4\u0003\u029e\u014f\u0000\u19e4\u19e5\u0005\f\u0000\u0000\u19e5"+
		"\u19e6\u0003\u024e\u0127\u0000\u19e6\u19e7\u0005\u0467\u0000\u0000\u19e7"+
		"\u1a81\u0001\u0000\u0000\u0000\u19e8\u19e9\u0005\u00ba\u0000\u0000\u19e9"+
		"\u19ea\u0005\u0466\u0000\u0000\u19ea\u19eb\u0003\u0220\u0110\u0000\u19eb"+
		"\u19ec\u0005\u0467\u0000\u0000\u19ec\u1a81\u0001\u0000\u0000\u0000\u19ed"+
		"\u19ee\u0005\u0016\u0000\u0000\u19ee\u19f0\u0003\u029e\u014f\u0000\u19ef"+
		"\u19f1\u0003\u027a\u013d\u0000\u19f0\u19ef\u0001\u0000\u0000\u0000\u19f1"+
		"\u19f2\u0001\u0000\u0000\u0000\u19f2\u19f0\u0001\u0000\u0000\u0000\u19f2"+
		"\u19f3\u0001\u0000\u0000\u0000\u19f3\u19f6\u0001\u0000\u0000\u0000\u19f4"+
		"\u19f5\u00055\u0000\u0000\u19f5\u19f7\u0003\u029c\u014e\u0000\u19f6\u19f4"+
		"\u0001\u0000\u0000\u0000\u19f6\u19f7\u0001\u0000\u0000\u0000\u19f7\u19f8"+
		"\u0001\u0000\u0000\u0000\u19f8\u19f9\u0005\u0195\u0000\u0000\u19f9\u1a81"+
		"\u0001\u0000\u0000\u0000\u19fa\u19fc\u0005\u0016\u0000\u0000\u19fb\u19fd"+
		"\u0003\u027a\u013d\u0000\u19fc\u19fb\u0001\u0000\u0000\u0000\u19fd\u19fe"+
		"\u0001\u0000\u0000\u0000\u19fe\u19fc\u0001\u0000\u0000\u0000\u19fe\u19ff"+
		"\u0001\u0000\u0000\u0000\u19ff\u1a02\u0001\u0000\u0000\u0000\u1a00\u1a01"+
		"\u00055\u0000\u0000\u1a01\u1a03\u0003\u029c\u014e\u0000\u1a02\u1a00\u0001"+
		"\u0000\u0000\u0000\u1a02\u1a03\u0001\u0000\u0000\u0000\u1a03\u1a04\u0001"+
		"\u0000\u0000\u0000\u1a04\u1a05\u0005\u0195\u0000\u0000\u1a05\u1a81\u0001"+
		"\u0000\u0000\u0000\u1a06\u1a07\u0005\u00dc\u0000\u0000\u1a07\u1a08\u0005"+
		"\u0466\u0000\u0000\u1a08\u1a0b\u0003\u029a\u014d\u0000\u1a09\u1a0a\u0005"+
		"\u00b9\u0000\u0000\u1a0a\u1a0c\u0003\u0228\u0114\u0000\u1a0b\u1a09\u0001"+
		"\u0000\u0000\u0000\u1a0b\u1a0c\u0001\u0000\u0000\u0000\u1a0c\u1a0d\u0001"+
		"\u0000\u0000\u0000\u1a0d\u1a0e\u0005\u0467\u0000\u0000\u1a0e\u1a81\u0001"+
		"\u0000\u0000\u0000\u1a0f\u1a10\u0005\u0142\u0000\u0000\u1a10\u1a13\u0005"+
		"\u0466\u0000\u0000\u1a11\u1a14\u0003\u0240\u0120\u0000\u1a12\u1a14\u0003"+
		"\u029e\u014f\u0000\u1a13\u1a11\u0001\u0000\u0000\u0000\u1a13\u1a12\u0001"+
		"\u0000\u0000\u0000\u1a14\u1a15\u0001\u0000\u0000\u0000\u1a15\u1a18\u0005"+
		"O\u0000\u0000\u1a16\u1a19\u0003\u0240\u0120\u0000\u1a17\u1a19\u0003\u029e"+
		"\u014f\u0000\u1a18\u1a16\u0001\u0000\u0000\u0000\u1a18\u1a17\u0001\u0000"+
		"\u0000\u0000\u1a19\u1a1a\u0001\u0000\u0000\u0000\u1a1a\u1a1b\u0005\u0467"+
		"\u0000\u0000\u1a1b\u1a81\u0001\u0000\u0000\u0000\u1a1c\u1a1d\u0007r\u0000"+
		"\u0000\u1a1d\u1a20\u0005\u0466\u0000\u0000\u1a1e\u1a21\u0003\u0240\u0120"+
		"\u0000\u1a1f\u1a21\u0003\u029e\u014f\u0000\u1a20\u1a1e\u0001\u0000\u0000"+
		"\u0000\u1a20\u1a1f\u0001\u0000\u0000\u0000\u1a21\u1a22\u0001\u0000\u0000"+
		"\u0000\u1a22\u1a25\u0005C\u0000\u0000\u1a23\u1a26\u0003\u023c\u011e\u0000"+
		"\u1a24\u1a26\u0003\u029e\u014f\u0000\u1a25\u1a23\u0001\u0000\u0000\u0000"+
		"\u1a25\u1a24\u0001\u0000\u0000\u0000\u1a26\u1a2c\u0001\u0000\u0000\u0000"+
		"\u1a27\u1a2a\u0005@\u0000\u0000\u1a28\u1a2b\u0003\u023c\u011e\u0000\u1a29"+
		"\u1a2b\u0003\u029e\u014f\u0000\u1a2a\u1a28\u0001\u0000\u0000\u0000\u1a2a"+
		"\u1a29\u0001\u0000\u0000\u0000\u1a2b\u1a2d\u0001\u0000\u0000\u0000\u1a2c"+
		"\u1a27\u0001\u0000\u0000\u0000\u1a2c\u1a2d\u0001\u0000\u0000\u0000\u1a2d"+
		"\u1a2e\u0001\u0000\u0000\u0000\u1a2e\u1a2f\u0005\u0467\u0000\u0000\u1a2f"+
		"\u1a81\u0001\u0000\u0000\u0000\u1a30\u1a31\u0005\u0146\u0000\u0000\u1a31"+
		"\u1a32\u0005\u0466\u0000\u0000\u1a32\u1a35\u0007s\u0000\u0000\u1a33\u1a36"+
		"\u0003\u0240\u0120\u0000\u1a34\u1a36\u0003\u029e\u014f\u0000\u1a35\u1a33"+
		"\u0001\u0000\u0000\u0000\u1a35\u1a34\u0001\u0000\u0000\u0000\u1a35\u1a36"+
		"\u0001\u0000\u0000\u0000\u1a36\u1a37\u0001\u0000\u0000\u0000\u1a37\u1a3a"+
		"\u0005C\u0000\u0000\u1a38\u1a3b\u0003\u0240\u0120\u0000\u1a39\u1a3b\u0003"+
		"\u029e\u014f\u0000\u1a3a\u1a38\u0001\u0000\u0000\u0000\u1a3a\u1a39\u0001"+
		"\u0000\u0000\u0000\u1a3b\u1a3c\u0001\u0000\u0000\u0000\u1a3c\u1a3d\u0005"+
		"\u0467\u0000\u0000\u1a3d\u1a81\u0001\u0000\u0000\u0000\u1a3e\u1a3f\u0005"+
		"\u0146\u0000\u0000\u1a3f\u1a42\u0005\u0466\u0000\u0000\u1a40\u1a43\u0003"+
		"\u0240\u0120\u0000\u1a41\u1a43\u0003\u029e\u014f\u0000\u1a42\u1a40\u0001"+
		"\u0000\u0000\u0000\u1a42\u1a41\u0001\u0000\u0000\u0000\u1a43\u1a44\u0001"+
		"\u0000\u0000\u0000\u1a44\u1a47\u0005C\u0000\u0000\u1a45\u1a48\u0003\u0240"+
		"\u0120\u0000\u1a46\u1a48\u0003\u029e\u014f\u0000\u1a47\u1a45\u0001\u0000"+
		"\u0000\u0000\u1a47\u1a46\u0001\u0000\u0000\u0000\u1a48\u1a49\u0001\u0000"+
		"\u0000\u0000\u1a49\u1a4a\u0005\u0467\u0000\u0000\u1a4a\u1a81\u0001\u0000"+
		"\u0000\u0000\u1a4b\u1a4c\u0005\u0448\u0000\u0000\u1a4c\u1a4f\u0005\u0466"+
		"\u0000\u0000\u1a4d\u1a50\u0003\u0240\u0120\u0000\u1a4e\u1a50\u0003\u029e"+
		"\u014f\u0000\u1a4f\u1a4d\u0001\u0000\u0000\u0000\u1a4f\u1a4e\u0001\u0000"+
		"\u0000\u0000\u1a50\u1a57\u0001\u0000\u0000\u0000\u1a51\u1a52\u0005\f\u0000"+
		"\u0000\u1a52\u1a53\u0007t\u0000\u0000\u1a53\u1a54\u0005\u0466\u0000\u0000"+
		"\u1a54\u1a55\u0003\u023c\u011e\u0000\u1a55\u1a56\u0005\u0467\u0000\u0000"+
		"\u1a56\u1a58\u0001\u0000\u0000\u0000\u1a57\u1a51\u0001\u0000\u0000\u0000"+
		"\u1a57\u1a58\u0001\u0000\u0000\u0000\u1a58\u1a5a\u0001\u0000\u0000\u0000"+
		"\u1a59\u1a5b\u0003\u027c\u013e\u0000\u1a5a\u1a59\u0001\u0000\u0000\u0000"+
		"\u1a5a\u1a5b\u0001\u0000\u0000\u0000\u1a5b\u1a5c\u0001\u0000\u0000\u0000"+
		"\u1a5c\u1a5d\u0005\u0467\u0000\u0000\u1a5d\u1a81\u0001\u0000\u0000\u0000"+
		"\u1a5e\u1a5f\u0005\u013f\u0000\u0000\u1a5f\u1a60\u0005\u0466\u0000\u0000"+
		"\u1a60\u1a61\u0003F#\u0000\u1a61\u1a64\u0005C\u0000\u0000\u1a62\u1a65"+
		"\u0003\u0240\u0120\u0000\u1a63\u1a65\u0003\u029e\u014f\u0000\u1a64\u1a62"+
		"\u0001\u0000\u0000\u0000\u1a64\u1a63\u0001\u0000\u0000\u0000\u1a65\u1a66"+
		"\u0001\u0000\u0000\u0000\u1a66\u1a67\u0005\u0467\u0000\u0000\u1a67\u1a81"+
		"\u0001\u0000\u0000\u0000\u1a68\u1a69\u0005\u037f\u0000\u0000\u1a69\u1a6a"+
		"\u0005\u0466\u0000\u0000\u1a6a\u1a6b\u0007u\u0000\u0000\u1a6b\u1a6c\u0005"+
		"\u0468\u0000\u0000\u1a6c\u1a6d\u0003\u0240\u0120\u0000\u1a6d\u1a6e\u0005"+
		"\u0467\u0000\u0000\u1a6e\u1a81\u0001\u0000\u0000\u0000\u1a6f\u1a70\u0005"+
		"\u0118\u0000\u0000\u1a70\u1a71\u0005\u0466\u0000\u0000\u1a71\u1a72\u0003"+
		"\u029e\u014f\u0000\u1a72\u1a73\u0005\u0468\u0000\u0000\u1a73\u1a76\u0003"+
		"\u029e\u014f\u0000\u1a74\u1a75\u0005\u024f\u0000\u0000\u1a75\u1a77\u0003"+
		"\u024e\u0127\u0000\u1a76\u1a74\u0001\u0000\u0000\u0000\u1a76\u1a77\u0001"+
		"\u0000\u0000\u0000\u1a77\u1a79\u0001\u0000\u0000\u0000\u1a78\u1a7a\u0003"+
		"\u0106\u0083\u0000\u1a79\u1a78\u0001\u0000\u0000\u0000\u1a79\u1a7a\u0001"+
		"\u0000\u0000\u0000\u1a7a\u1a7c\u0001\u0000\u0000\u0000\u1a7b\u1a7d\u0003"+
		"\u0108\u0084\u0000\u1a7c\u1a7b\u0001\u0000\u0000\u0000\u1a7c\u1a7d\u0001"+
		"\u0000\u0000\u0000\u1a7d\u1a7e\u0001\u0000\u0000\u0000\u1a7e\u1a7f\u0005"+
		"\u0467\u0000\u0000\u1a7f\u1a81\u0001\u0000\u0000\u0000\u1a80\u19ce\u0001"+
		"\u0000\u0000\u0000\u1a80\u19d3\u0001\u0000\u0000\u0000\u1a80\u19da\u0001"+
		"\u0000\u0000\u0000\u1a80\u19e1\u0001\u0000\u0000\u0000\u1a80\u19e8\u0001"+
		"\u0000\u0000\u0000\u1a80\u19ed\u0001\u0000\u0000\u0000\u1a80\u19fa\u0001"+
		"\u0000\u0000\u0000\u1a80\u1a06\u0001\u0000\u0000\u0000\u1a80\u1a0f\u0001"+
		"\u0000\u0000\u0000\u1a80\u1a1c\u0001\u0000\u0000\u0000\u1a80\u1a30\u0001"+
		"\u0000\u0000\u0000\u1a80\u1a3e\u0001\u0000\u0000\u0000\u1a80\u1a4b\u0001"+
		"\u0000\u0000\u0000\u1a80\u1a5e\u0001\u0000\u0000\u0000\u1a80\u1a68\u0001"+
		"\u0000\u0000\u0000\u1a80\u1a6f\u0001\u0000\u0000\u0000\u1a81\u0279\u0001"+
		"\u0000\u0000\u0000\u1a82\u1a83\u0005\u00bb\u0000\u0000\u1a83\u1a84\u0003"+
		"\u029c\u014e\u0000\u1a84\u1a85\u0005\u00ac\u0000\u0000\u1a85\u1a86\u0003"+
		"\u029c\u014e\u0000\u1a86\u027b\u0001\u0000\u0000\u0000\u1a87\u1a88\u0005"+
		"\u01d6\u0000\u0000\u1a88\u1a8d\u0003\u027e\u013f\u0000\u1a89\u1a8a\u0005"+
		"\u0468\u0000\u0000\u1a8a\u1a8c\u0003\u027e\u013f\u0000\u1a8b\u1a89\u0001"+
		"\u0000\u0000\u0000\u1a8c\u1a8f\u0001\u0000\u0000\u0000\u1a8d\u1a8b\u0001"+
		"\u0000\u0000\u0000\u1a8d\u1a8e\u0001\u0000\u0000\u0000\u1a8e\u1a96\u0001"+
		"\u0000\u0000\u0000\u1a8f\u1a8d\u0001\u0000\u0000\u0000\u1a90\u1a91\u0005"+
		"\u01d6\u0000\u0000\u1a91\u1a92\u0003\u023c\u011e\u0000\u1a92\u1a93\u0005"+
		"\u045a\u0000\u0000\u1a93\u1a94\u0003\u023c\u011e\u0000\u1a94\u1a96\u0001"+
		"\u0000\u0000\u0000\u1a95\u1a87\u0001\u0000\u0000\u0000\u1a95\u1a90\u0001"+
		"\u0000\u0000\u0000\u1a96\u027d\u0001\u0000\u0000\u0000\u1a97\u1a99\u0003"+
		"\u023c\u011e\u0000\u1a98\u1a9a\u0007v\u0000\u0000\u1a99\u1a98\u0001\u0000"+
		"\u0000\u0000\u1a99\u1a9a\u0001\u0000\u0000\u0000\u1a9a\u027f\u0001\u0000"+
		"\u0000\u0000\u1a9b\u1a9c\u0007w\u0000\u0000\u1a9c\u1a9e\u0005\u0466\u0000"+
		"\u0000\u1a9d\u1a9f\u0007,\u0000\u0000\u1a9e\u1a9d\u0001\u0000\u0000\u0000"+
		"\u1a9e\u1a9f\u0001\u0000\u0000\u0000\u1a9f\u1aa0\u0001\u0000\u0000\u0000"+
		"\u1aa0\u1aa1\u0003\u029c\u014e\u0000\u1aa1\u1aa3\u0005\u0467\u0000\u0000"+
		"\u1aa2\u1aa4\u0003\u0284\u0142\u0000\u1aa3\u1aa2\u0001\u0000\u0000\u0000"+
		"\u1aa3\u1aa4\u0001\u0000\u0000\u0000\u1aa4\u1ad7\u0001\u0000\u0000\u0000"+
		"\u1aa5\u1aa6\u0005\u0120\u0000\u0000\u1aa6\u1aae\u0005\u0466\u0000\u0000"+
		"\u1aa7\u1aaf\u0005\u0456\u0000\u0000\u1aa8\u1aaa\u0005\u0006\u0000\u0000"+
		"\u1aa9\u1aa8\u0001\u0000\u0000\u0000\u1aa9\u1aaa\u0001\u0000\u0000\u0000"+
		"\u1aaa\u1aab\u0001\u0000\u0000\u0000\u1aab\u1aaf\u0003\u029c\u014e\u0000"+
		"\u1aac\u1aad\u00051\u0000\u0000\u1aad\u1aaf\u0003\u029a\u014d\u0000\u1aae"+
		"\u1aa7\u0001\u0000\u0000\u0000\u1aae\u1aa9\u0001\u0000\u0000\u0000\u1aae"+
		"\u1aac\u0001\u0000\u0000\u0000\u1aaf\u1ab0\u0001\u0000\u0000\u0000\u1ab0"+
		"\u1ab2\u0005\u0467\u0000\u0000\u1ab1\u1ab3\u0003\u0284\u0142\u0000\u1ab2"+
		"\u1ab1\u0001\u0000\u0000\u0000\u1ab2\u1ab3\u0001\u0000\u0000\u0000\u1ab3"+
		"\u1ad7\u0001\u0000\u0000\u0000\u1ab4\u1ab5\u0007x\u0000\u0000\u1ab5\u1ab7"+
		"\u0005\u0466\u0000\u0000\u1ab6\u1ab8\u0005\u0006\u0000\u0000\u1ab7\u1ab6"+
		"\u0001\u0000\u0000\u0000\u1ab7\u1ab8\u0001\u0000\u0000\u0000\u1ab8\u1ab9"+
		"\u0001\u0000\u0000\u0000\u1ab9\u1aba\u0003\u029c\u014e\u0000\u1aba\u1abc"+
		"\u0005\u0467\u0000\u0000\u1abb\u1abd\u0003\u0284\u0142\u0000\u1abc\u1abb"+
		"\u0001\u0000\u0000\u0000\u1abc\u1abd\u0001\u0000\u0000\u0000\u1abd\u1ad7"+
		"\u0001\u0000\u0000\u0000\u1abe\u1abf\u0005\u0124\u0000\u0000\u1abf\u1ac1"+
		"\u0005\u0466\u0000\u0000\u1ac0\u1ac2\u00051\u0000\u0000\u1ac1\u1ac0\u0001"+
		"\u0000\u0000\u0000\u1ac1\u1ac2\u0001\u0000\u0000\u0000\u1ac2\u1ac3\u0001"+
		"\u0000\u0000\u0000\u1ac3\u1ace\u0003\u029a\u014d\u0000\u1ac4\u1ac5\u0005"+
		"{\u0000\u0000\u1ac5\u1ac6\u0005\u0013\u0000\u0000\u1ac6\u1acb\u0003\u00e4"+
		"r\u0000\u1ac7\u1ac8\u0005\u0468\u0000\u0000\u1ac8\u1aca\u0003\u00e4r\u0000"+
		"\u1ac9\u1ac7\u0001\u0000\u0000\u0000\u1aca\u1acd\u0001\u0000\u0000\u0000"+
		"\u1acb\u1ac9\u0001\u0000\u0000\u0000\u1acb\u1acc\u0001\u0000\u0000\u0000"+
		"\u1acc\u1acf\u0001\u0000\u0000\u0000\u1acd\u1acb\u0001\u0000\u0000\u0000"+
		"\u1ace\u1ac4\u0001\u0000\u0000\u0000\u1ace\u1acf\u0001\u0000\u0000\u0000"+
		"\u1acf\u1ad2\u0001\u0000\u0000\u0000\u1ad0\u1ad1\u0005\u0099\u0000\u0000"+
		"\u1ad1\u1ad3\u0005\u0475\u0000\u0000\u1ad2\u1ad0\u0001\u0000\u0000\u0000"+
		"\u1ad2\u1ad3\u0001\u0000\u0000\u0000\u1ad3\u1ad4\u0001\u0000\u0000\u0000"+
		"\u1ad4\u1ad5\u0005\u0467\u0000\u0000\u1ad5\u1ad7\u0001\u0000\u0000\u0000"+
		"\u1ad6\u1a9b\u0001\u0000\u0000\u0000\u1ad6\u1aa5\u0001\u0000\u0000\u0000"+
		"\u1ad6\u1ab4\u0001\u0000\u0000\u0000\u1ad6\u1abe\u0001\u0000\u0000\u0000"+
		"\u1ad7\u0281\u0001\u0000\u0000\u0000\u1ad8\u1ad9\u0007y\u0000\u0000\u1ad9"+
		"\u1ada\u0005\u0466\u0000\u0000\u1ada\u1add\u0003";
	private static final String _serializedATNSegment3 =
		"\u029e\u014f\u0000\u1adb\u1adc\u0005\u0468\u0000\u0000\u1adc\u1ade\u0003"+
		"\u023c\u011e\u0000\u1add\u1adb\u0001\u0000\u0000\u0000\u1add\u1ade\u0001"+
		"\u0000\u0000\u0000\u1ade\u1ae1\u0001\u0000\u0000\u0000\u1adf\u1ae0\u0005"+
		"\u0468\u0000\u0000\u1ae0\u1ae2\u0003\u023c\u011e\u0000\u1ae1\u1adf\u0001"+
		"\u0000\u0000\u0000\u1ae1\u1ae2\u0001\u0000\u0000\u0000\u1ae2\u1ae3\u0001"+
		"\u0000\u0000\u0000\u1ae3\u1ae4\u0005\u0467\u0000\u0000\u1ae4\u1ae5\u0003"+
		"\u0284\u0142\u0000\u1ae5\u1aff\u0001\u0000\u0000\u0000\u1ae6\u1ae7\u0007"+
		"z\u0000\u0000\u1ae7\u1ae8\u0005\u0466\u0000\u0000\u1ae8\u1ae9\u0003\u029e"+
		"\u014f\u0000\u1ae9\u1aea\u0005\u0467\u0000\u0000\u1aea\u1aeb\u0003\u0284"+
		"\u0142\u0000\u1aeb\u1aff\u0001\u0000\u0000\u0000\u1aec\u1aed\u0007{\u0000"+
		"\u0000\u1aed\u1aee\u0005\u0466\u0000\u0000\u1aee\u1aef\u0005\u0467\u0000"+
		"\u0000\u1aef\u1aff\u0003\u0284\u0142\u0000\u1af0\u1af1\u0005\u012b\u0000"+
		"\u0000\u1af1\u1af2\u0005\u0466\u0000\u0000\u1af2\u1af3\u0003\u029e\u014f"+
		"\u0000\u1af3\u1af4\u0005\u0468\u0000\u0000\u1af4\u1af5\u0003\u023c\u011e"+
		"\u0000\u1af5\u1af6\u0005\u0467\u0000\u0000\u1af6\u1af7\u0003\u0284\u0142"+
		"\u0000\u1af7\u1aff\u0001\u0000\u0000\u0000\u1af8\u1af9\u0005\u012a\u0000"+
		"\u0000\u1af9\u1afa\u0005\u0466\u0000\u0000\u1afa\u1afb\u0003\u023c\u011e"+
		"\u0000\u1afb\u1afc\u0005\u0467\u0000\u0000\u1afc\u1afd\u0003\u0284\u0142"+
		"\u0000\u1afd\u1aff\u0001\u0000\u0000\u0000\u1afe\u1ad8\u0001\u0000\u0000"+
		"\u0000\u1afe\u1ae6\u0001\u0000\u0000\u0000\u1afe\u1aec\u0001\u0000\u0000"+
		"\u0000\u1afe\u1af0\u0001\u0000\u0000\u0000\u1afe\u1af8\u0001\u0000\u0000"+
		"\u0000\u1aff\u0283\u0001\u0000\u0000\u0000\u1b00\u1b06\u0005\u007f\u0000"+
		"\u0000\u1b01\u1b02\u0005\u0466\u0000\u0000\u1b02\u1b03\u0003\u0286\u0143"+
		"\u0000\u1b03\u1b04\u0005\u0467\u0000\u0000\u1b04\u1b07\u0001\u0000\u0000"+
		"\u0000\u1b05\u1b07\u0003\u0288\u0144\u0000\u1b06\u1b01\u0001\u0000\u0000"+
		"\u0000\u1b06\u1b05\u0001\u0000\u0000\u0000\u1b07\u0285\u0001\u0000\u0000"+
		"\u0000\u1b08\u1b0a\u0003\u0288\u0144\u0000\u1b09\u1b08\u0001\u0000\u0000"+
		"\u0000\u1b09\u1b0a\u0001\u0000\u0000\u0000\u1b0a\u1b0c\u0001\u0000\u0000"+
		"\u0000\u1b0b\u1b0d\u0003\u0294\u014a\u0000\u1b0c\u1b0b\u0001\u0000\u0000"+
		"\u0000\u1b0c\u1b0d\u0001\u0000\u0000\u0000\u1b0d\u1b0f\u0001\u0000\u0000"+
		"\u0000\u1b0e\u1b10\u0003\u00e2q\u0000\u1b0f\u1b0e\u0001\u0000\u0000\u0000"+
		"\u1b0f\u1b10\u0001\u0000\u0000\u0000\u1b10\u1b12\u0001\u0000\u0000\u0000"+
		"\u1b11\u1b13\u0003\u028a\u0145\u0000\u1b12\u1b11\u0001\u0000\u0000\u0000"+
		"\u1b12\u1b13\u0001\u0000\u0000\u0000\u1b13\u0287\u0001\u0000\u0000\u0000"+
		"\u1b14\u1b15\u0003\u0236\u011b\u0000\u1b15\u0289\u0001\u0000\u0000\u0000"+
		"\u1b16\u1b17\u0003\u028c\u0146\u0000\u1b17\u1b18\u0003\u028e\u0147\u0000"+
		"\u1b18\u028b\u0001\u0000\u0000\u0000\u1b19\u1b1a\u0007|\u0000\u0000\u1b1a"+
		"\u028d\u0001\u0000\u0000\u0000\u1b1b\u1b1e\u0003\u0292\u0149\u0000\u1b1c"+
		"\u1b1e\u0003\u0290\u0148\u0000\u1b1d\u1b1b\u0001\u0000\u0000\u0000\u1b1d"+
		"\u1b1c\u0001\u0000\u0000\u0000\u1b1e\u028f\u0001\u0000\u0000\u0000\u1b1f"+
		"\u1b20\u0005\u0010\u0000\u0000\u1b20\u1b21\u0003\u0292\u0149\u0000\u1b21"+
		"\u1b22\u0005\n\u0000\u0000\u1b22\u1b23\u0003\u0292\u0149\u0000\u1b23\u0291"+
		"\u0001\u0000\u0000\u0000\u1b24\u1b25\u0005#\u0000\u0000\u1b25\u1b2c\u0005"+
		"\u0256\u0000\u0000\u1b26\u1b27\u0005\u028f\u0000\u0000\u1b27\u1b2c\u0007"+
		"}\u0000\u0000\u1b28\u1b29\u0003\u029e\u014f\u0000\u1b29\u1b2a\u0007}\u0000"+
		"\u0000\u1b2a\u1b2c\u0001\u0000\u0000\u0000\u1b2b\u1b24\u0001\u0000\u0000"+
		"\u0000\u1b2b\u1b26\u0001\u0000\u0000\u0000\u1b2b\u1b28\u0001\u0000\u0000"+
		"\u0000\u1b2c\u0293\u0001\u0000\u0000\u0000\u1b2d\u1b2e\u0005\u0080\u0000"+
		"\u0000\u1b2e\u1b2f\u0005\u0013\u0000\u0000\u1b2f\u1b34\u0003\u029e\u014f"+
		"\u0000\u1b30\u1b31\u0005\u0468\u0000\u0000\u1b31\u1b33\u0003\u029e\u014f"+
		"\u0000\u1b32\u1b30\u0001\u0000\u0000\u0000\u1b33\u1b36\u0001\u0000\u0000"+
		"\u0000\u1b34\u1b32\u0001\u0000\u0000\u0000\u1b34\u1b35\u0001\u0000\u0000"+
		"\u0000\u1b35\u0295\u0001\u0000\u0000\u0000\u1b36\u1b34\u0001\u0000\u0000"+
		"\u0000\u1b37\u1b4f\u0003\u02bc\u015e\u0000\u1b38\u1b4f\u0005\u02e6\u0000"+
		"\u0000\u1b39\u1b4f\u0005\u013b\u0000\u0000\u1b3a\u1b4f\u0005\u0137\u0000"+
		"\u0000\u1b3b\u1b4f\u0005\u0138\u0000\u0000\u1b3c\u1b4f\u0005\u0139\u0000"+
		"\u0000\u1b3d\u1b4f\u0005\u013c\u0000\u0000\u1b3e\u1b4f\u0005\u013d\u0000"+
		"\u0000\u1b3f\u1b4f\u0005\u013e\u0000\u0000\u1b40\u1b4f\u0005L\u0000\u0000"+
		"\u1b41\u1b4f\u0005T\u0000\u0000\u1b42\u1b4f\u0005\u013a\u0000\u0000\u1b43"+
		"\u1b4f\u0005\u0140\u0000\u0000\u1b44\u1b4f\u0005\u01fa\u0000\u0000\u1b45"+
		"\u1b4f\u0005\u0141\u0000\u0000\u1b46\u1b4f\u0005\u008c\u0000\u0000\u1b47"+
		"\u1b4f\u0005\u0143\u0000\u0000\u1b48\u1b4f\u0005\u0144\u0000\u0000\u1b49"+
		"\u1b4f\u0005\u0145\u0000\u0000\u1b4a\u1b4f\u0005\u0146\u0000\u0000\u1b4b"+
		"\u1b4f\u0005\u0147\u0000\u0000\u1b4c\u1b4f\u0005\u0148\u0000\u0000\u1b4d"+
		"\u1b4f\u0005\u0149\u0000\u0000\u1b4e\u1b37\u0001\u0000\u0000\u0000\u1b4e"+
		"\u1b38\u0001\u0000\u0000\u0000\u1b4e\u1b39\u0001\u0000\u0000\u0000\u1b4e"+
		"\u1b3a\u0001\u0000\u0000\u0000\u1b4e\u1b3b\u0001\u0000\u0000\u0000\u1b4e"+
		"\u1b3c\u0001\u0000\u0000\u0000\u1b4e\u1b3d\u0001\u0000\u0000\u0000\u1b4e"+
		"\u1b3e\u0001\u0000\u0000\u0000\u1b4e\u1b3f\u0001\u0000\u0000\u0000\u1b4e"+
		"\u1b40\u0001\u0000\u0000\u0000\u1b4e\u1b41\u0001\u0000\u0000\u0000\u1b4e"+
		"\u1b42\u0001\u0000\u0000\u0000\u1b4e\u1b43\u0001\u0000\u0000\u0000\u1b4e"+
		"\u1b44\u0001\u0000\u0000\u0000\u1b4e\u1b45\u0001\u0000\u0000\u0000\u1b4e"+
		"\u1b46\u0001\u0000\u0000\u0000\u1b4e\u1b47\u0001\u0000\u0000\u0000\u1b4e"+
		"\u1b48\u0001\u0000\u0000\u0000\u1b4e\u1b49\u0001\u0000\u0000\u0000\u1b4e"+
		"\u1b4a\u0001\u0000\u0000\u0000\u1b4e\u1b4b\u0001\u0000\u0000\u0000\u1b4e"+
		"\u1b4c\u0001\u0000\u0000\u0000\u1b4e\u1b4d\u0001\u0000\u0000\u0000\u1b4f"+
		"\u0297\u0001\u0000\u0000\u0000\u1b50\u1b51\u0007~\u0000\u0000\u1b51\u1b52"+
		"\u0005\u0466\u0000\u0000\u1b52\u1b53\u0003\u029c\u014e\u0000\u1b53\u1b54"+
		"\u0005\u0467\u0000\u0000\u1b54\u0299\u0001\u0000\u0000\u0000\u1b55\u1b5a"+
		"\u0003\u0248\u0124\u0000\u1b56\u1b5a\u0003\u0220\u0110\u0000\u1b57\u1b5a"+
		"\u0003\u0276\u013b\u0000\u1b58\u1b5a\u0003\u029e\u014f\u0000\u1b59\u1b55"+
		"\u0001\u0000\u0000\u0000\u1b59\u1b56\u0001\u0000\u0000\u0000\u1b59\u1b57"+
		"\u0001\u0000\u0000\u0000\u1b59\u1b58\u0001\u0000\u0000\u0000\u1b5a\u1b64"+
		"\u0001\u0000\u0000\u0000\u1b5b\u1b60\u0005\u0468\u0000\u0000\u1b5c\u1b61"+
		"\u0003\u0248\u0124\u0000\u1b5d\u1b61\u0003\u0220\u0110\u0000\u1b5e\u1b61"+
		"\u0003\u0276\u013b\u0000\u1b5f\u1b61\u0003\u029e\u014f\u0000\u1b60\u1b5c"+
		"\u0001\u0000\u0000\u0000\u1b60\u1b5d\u0001\u0000\u0000\u0000\u1b60\u1b5e"+
		"\u0001\u0000\u0000\u0000\u1b60\u1b5f\u0001\u0000\u0000\u0000\u1b61\u1b63"+
		"\u0001\u0000\u0000\u0000\u1b62\u1b5b\u0001\u0000\u0000\u0000\u1b63\u1b66"+
		"\u0001\u0000\u0000\u0000\u1b64\u1b62\u0001\u0000\u0000\u0000\u1b64\u1b65"+
		"\u0001\u0000\u0000\u0000\u1b65\u029b\u0001\u0000\u0000\u0000\u1b66\u1b64"+
		"\u0001\u0000\u0000\u0000\u1b67\u1b6c\u0003\u0248\u0124\u0000\u1b68\u1b6c"+
		"\u0003\u0220\u0110\u0000\u1b69\u1b6c\u0003\u0276\u013b\u0000\u1b6a\u1b6c"+
		"\u0003\u029e\u014f\u0000\u1b6b\u1b67\u0001\u0000\u0000\u0000\u1b6b\u1b68"+
		"\u0001\u0000\u0000\u0000\u1b6b\u1b69\u0001\u0000\u0000\u0000\u1b6b\u1b6a"+
		"\u0001\u0000\u0000\u0000\u1b6c\u029d\u0001\u0000\u0000\u0000\u1b6d\u1b6e"+
		"\u0006\u014f\uffff\uffff\u0000\u1b6e\u1b6f\u0007\u007f\u0000\u0000\u1b6f"+
		"\u1b79\u0003\u029e\u014f\u0004\u1b70\u1b71\u0003\u02a0\u0150\u0000\u1b71"+
		"\u1b73\u0005W\u0000\u0000\u1b72\u1b74\u0005q\u0000\u0000\u1b73\u1b72\u0001"+
		"\u0000\u0000\u0000\u1b73\u1b74\u0001\u0000\u0000\u0000\u1b74\u1b75\u0001"+
		"\u0000\u0000\u0000\u1b75\u1b76\u0007\u0080\u0000\u0000\u1b76\u1b79\u0001"+
		"\u0000\u0000\u0000\u1b77\u1b79\u0003\u02a0\u0150\u0000\u1b78\u1b6d\u0001"+
		"\u0000\u0000\u0000\u1b78\u1b70\u0001\u0000\u0000\u0000\u1b78\u1b77\u0001"+
		"\u0000\u0000\u0000\u1b79\u1b80\u0001\u0000\u0000\u0000\u1b7a\u1b7b\n\u0003"+
		"\u0000\u0000\u1b7b\u1b7c\u0003\u02a8\u0154\u0000\u1b7c\u1b7d\u0003\u029e"+
		"\u014f\u0004\u1b7d\u1b7f\u0001\u0000\u0000\u0000\u1b7e\u1b7a\u0001\u0000"+
		"\u0000\u0000\u1b7f\u1b82\u0001\u0000\u0000\u0000\u1b80\u1b7e\u0001\u0000"+
		"\u0000\u0000\u1b80\u1b81\u0001\u0000\u0000\u0000\u1b81\u029f\u0001\u0000"+
		"\u0000\u0000\u1b82\u1b80\u0001\u0000\u0000\u0000\u1b83\u1b86\u0006\u0150"+
		"\uffff\uffff\u0000\u1b84\u1b85\u0005\u0481\u0000\u0000\u1b85\u1b87\u0005"+
		"\u044d\u0000\u0000\u1b86\u1b84\u0001\u0000\u0000\u0000\u1b86\u1b87\u0001"+
		"\u0000\u0000\u0000\u1b87\u1b88\u0001\u0000\u0000\u0000\u1b88\u1b89\u0003"+
		"\u02a2\u0151\u0000\u1b89\u1bca\u0001\u0000\u0000\u0000\u1b8a\u1b8b\n\b"+
		"\u0000\u0000\u1b8b\u1b8c\u0003\u02a6\u0153\u0000\u1b8c\u1b8d\u0003\u02a0"+
		"\u0150\t\u1b8d\u1bc9\u0001\u0000\u0000\u0000\u1b8e\u1b90\n\u0006\u0000"+
		"\u0000\u1b8f\u1b91\u0005q\u0000\u0000\u1b90\u1b8f\u0001\u0000\u0000\u0000"+
		"\u1b90\u1b91\u0001\u0000\u0000\u0000\u1b91\u1b92\u0001\u0000\u0000\u0000"+
		"\u1b92\u1b93\u0005\u0010\u0000\u0000\u1b93\u1b94\u0003\u02a0\u0150\u0000"+
		"\u1b94\u1b95\u0005\n\u0000\u0000\u1b95\u1b96\u0003\u02a0\u0150\u0007\u1b96"+
		"\u1bc9\u0001\u0000\u0000\u0000\u1b97\u1b98\n\u0005\u0000\u0000\u1b98\u1b99"+
		"\u0005\u026a\u0000\u0000\u1b99\u1b9a\u0005a\u0000\u0000\u1b9a\u1bc9\u0003"+
		"\u02a0\u0150\u0006\u1b9b\u1b9d\n\u0003\u0000\u0000\u1b9c\u1b9e\u0005q"+
		"\u0000\u0000\u1b9d\u1b9c\u0001\u0000\u0000\u0000\u1b9d\u1b9e\u0001\u0000"+
		"\u0000\u0000\u1b9e\u1b9f\u0001\u0000\u0000\u0000\u1b9f\u1ba0\u0007\u0081"+
		"\u0000\u0000\u1ba0\u1bc9\u0003\u02a0\u0150\u0004\u1ba1\u1ba3\n\n\u0000"+
		"\u0000\u1ba2\u1ba4\u0005q\u0000\u0000\u1ba3\u1ba2\u0001\u0000\u0000\u0000"+
		"\u1ba3\u1ba4\u0001\u0000\u0000\u0000\u1ba4\u1ba5\u0001\u0000\u0000\u0000"+
		"\u1ba5\u1ba6\u0005O\u0000\u0000\u1ba6\u1ba9\u0005\u0466\u0000\u0000\u1ba7"+
		"\u1baa\u0003\u00c4b\u0000\u1ba8\u1baa\u0003\u025e\u012f\u0000\u1ba9\u1ba7"+
		"\u0001\u0000\u0000\u0000\u1ba9\u1ba8\u0001\u0000\u0000\u0000\u1baa\u1bab"+
		"\u0001\u0000\u0000\u0000\u1bab\u1bac\u0005\u0467\u0000\u0000\u1bac\u1bc9"+
		"\u0001\u0000\u0000\u0000\u1bad\u1bae\n\t\u0000\u0000\u1bae\u1baf\u0005"+
		"W\u0000\u0000\u1baf\u1bc9\u0003\u0246\u0123\u0000\u1bb0\u1bb1\n\u0007"+
		"\u0000\u0000\u1bb1\u1bb2\u0003\u02a6\u0153\u0000\u1bb2\u1bb3\u0007\u0082"+
		"\u0000\u0000\u1bb3\u1bb4\u0005\u0466\u0000\u0000\u1bb4\u1bb5\u0003\u00c4"+
		"b\u0000\u1bb5\u1bb6\u0005\u0467\u0000\u0000\u1bb6\u1bc9\u0001\u0000\u0000"+
		"\u0000\u1bb7\u1bb9\n\u0004\u0000\u0000\u1bb8\u1bba\u0005q\u0000\u0000"+
		"\u1bb9\u1bb8\u0001\u0000\u0000\u0000\u1bb9\u1bba\u0001\u0000\u0000\u0000"+
		"\u1bba\u1bbb\u0001\u0000\u0000\u0000\u1bbb\u1bbc\u0005a\u0000\u0000\u1bbc"+
		"\u1bbf\u0003\u02a0\u0150\u0000\u1bbd\u1bbe\u0005\u019b\u0000\u0000\u1bbe"+
		"\u1bc0\u0005\u0475\u0000\u0000\u1bbf\u1bbd\u0001\u0000\u0000\u0000\u1bbf"+
		"\u1bc0\u0001\u0000\u0000\u0000\u1bc0\u1bc9\u0001\u0000\u0000\u0000\u1bc1"+
		"\u1bc2\n\u0001\u0000\u0000\u1bc2\u1bc3\u0005\u01f7\u0000\u0000\u1bc3\u1bc4"+
		"\u0005\u0213\u0000\u0000\u1bc4\u1bc5\u0005\u0466\u0000\u0000\u1bc5\u1bc6"+
		"\u0003\u02a0\u0150\u0000\u1bc6\u1bc7\u0005\u0467\u0000\u0000\u1bc7\u1bc9"+
		"\u0001\u0000\u0000\u0000\u1bc8\u1b8a\u0001\u0000\u0000\u0000\u1bc8\u1b8e"+
		"\u0001\u0000\u0000\u0000\u1bc8\u1b97\u0001\u0000\u0000\u0000\u1bc8\u1b9b"+
		"\u0001\u0000\u0000\u0000\u1bc8\u1ba1\u0001\u0000\u0000\u0000\u1bc8\u1bad"+
		"\u0001\u0000\u0000\u0000\u1bc8\u1bb0\u0001\u0000\u0000\u0000\u1bc8\u1bb7"+
		"\u0001\u0000\u0000\u0000\u1bc8\u1bc1\u0001\u0000\u0000\u0000\u1bc9\u1bcc"+
		"\u0001\u0000\u0000\u0000\u1bca\u1bc8\u0001\u0000\u0000\u0000\u1bca\u1bcb"+
		"\u0001\u0000\u0000\u0000\u1bcb\u02a1\u0001\u0000\u0000\u0000\u1bcc\u1bca"+
		"\u0001\u0000\u0000\u0000\u1bcd\u1bce\u0006\u0151\uffff\uffff\u0000\u1bce"+
		"\u1bfb\u0003\u0248\u0124\u0000\u1bcf\u1bfb\u0003\u0220\u0110\u0000\u1bd0"+
		"\u1bfb\u0003\u0276\u013b\u0000\u1bd1\u1bfb\u0003\u0226\u0113\u0000\u1bd2"+
		"\u1bd3\u0003\u02a4\u0152\u0000\u1bd3\u1bd4\u0003\u02a2\u0151\n\u1bd4\u1bfb"+
		"\u0001\u0000\u0000\u0000\u1bd5\u1bd6\u0005\u00e0\u0000\u0000\u1bd6\u1bfb"+
		"\u0003\u02a2\u0151\t\u1bd7\u1bd8\u0005\u0466\u0000\u0000\u1bd8\u1bdd\u0003"+
		"\u029e\u014f\u0000\u1bd9\u1bda\u0005\u0468\u0000\u0000\u1bda\u1bdc\u0003"+
		"\u029e\u014f\u0000\u1bdb\u1bd9\u0001\u0000\u0000\u0000\u1bdc\u1bdf\u0001"+
		"\u0000\u0000\u0000\u1bdd\u1bdb\u0001\u0000\u0000\u0000\u1bdd\u1bde\u0001"+
		"\u0000\u0000\u0000\u1bde\u1be0\u0001\u0000\u0000\u0000\u1bdf\u1bdd\u0001"+
		"\u0000\u0000\u0000\u1be0\u1be1\u0005\u0467\u0000\u0000\u1be1\u1bfb\u0001"+
		"\u0000\u0000\u0000\u1be2\u1be3\u0005\u0256\u0000\u0000\u1be3\u1be4\u0005"+
		"\u0466\u0000\u0000\u1be4\u1be7\u0003\u029e\u014f\u0000\u1be5\u1be6\u0005"+
		"\u0468\u0000\u0000\u1be6\u1be8\u0003\u029e\u014f\u0000\u1be7\u1be5\u0001"+
		"\u0000\u0000\u0000\u1be8\u1be9\u0001\u0000\u0000\u0000\u1be9\u1be7\u0001"+
		"\u0000\u0000\u0000\u1be9\u1bea\u0001\u0000\u0000\u0000\u1bea\u1beb\u0001"+
		"\u0000\u0000\u0000\u1beb\u1bec\u0005\u0467\u0000\u0000\u1bec\u1bfb\u0001"+
		"\u0000\u0000\u0000\u1bed\u1bee\u0005;\u0000\u0000\u1bee\u1bef\u0005\u0466"+
		"\u0000\u0000\u1bef\u1bf0\u0003\u00c4b\u0000\u1bf0\u1bf1\u0005\u0467\u0000"+
		"\u0000\u1bf1\u1bfb\u0001\u0000\u0000\u0000\u1bf2\u1bf3\u0005\u0466\u0000"+
		"\u0000\u1bf3\u1bf4\u0003\u00c4b\u0000\u1bf4\u1bf5\u0005\u0467\u0000\u0000"+
		"\u1bf5\u1bfb\u0001\u0000\u0000\u0000\u1bf6\u1bf7\u0005U\u0000\u0000\u1bf7"+
		"\u1bf8\u0003\u029e\u014f\u0000\u1bf8\u1bf9\u0003F#\u0000\u1bf9\u1bfb\u0001"+
		"\u0000\u0000\u0000\u1bfa\u1bcd\u0001\u0000\u0000\u0000\u1bfa\u1bcf\u0001"+
		"\u0000\u0000\u0000\u1bfa\u1bd0\u0001\u0000\u0000\u0000\u1bfa\u1bd1\u0001"+
		"\u0000\u0000\u0000\u1bfa\u1bd2\u0001\u0000\u0000\u0000\u1bfa\u1bd5\u0001"+
		"\u0000\u0000\u0000\u1bfa\u1bd7\u0001\u0000\u0000\u0000\u1bfa\u1be2\u0001"+
		"\u0000\u0000\u0000\u1bfa\u1bed\u0001\u0000\u0000\u0000\u1bfa\u1bf2\u0001"+
		"\u0000\u0000\u0000\u1bfa\u1bf6\u0001\u0000\u0000\u0000\u1bfb\u1c0d\u0001"+
		"\u0000\u0000\u0000\u1bfc\u1bfd\n\u0003\u0000\u0000\u1bfd\u1bfe\u0003\u02aa"+
		"\u0155\u0000\u1bfe\u1bff\u0003\u02a2\u0151\u0004\u1bff\u1c0c\u0001\u0000"+
		"\u0000\u0000\u1c00\u1c01\n\u0002\u0000\u0000\u1c01\u1c02\u0003\u02ac\u0156"+
		"\u0000\u1c02\u1c03\u0003\u02a2\u0151\u0003\u1c03\u1c0c\u0001\u0000\u0000"+
		"\u0000\u1c04\u1c05\n\u0001\u0000\u0000\u1c05\u1c06\u0003\u02ae\u0157\u0000"+
		"\u1c06\u1c07\u0003\u02a2\u0151\u0002\u1c07\u1c0c\u0001\u0000\u0000\u0000"+
		"\u1c08\u1c09\n\f\u0000\u0000\u1c09\u1c0a\u0005\u001b\u0000\u0000\u1c0a"+
		"\u1c0c\u0003\u022a\u0115\u0000\u1c0b\u1bfc\u0001\u0000\u0000\u0000\u1c0b"+
		"\u1c00\u0001\u0000\u0000\u0000\u1c0b\u1c04\u0001\u0000\u0000\u0000\u1c0b"+
		"\u1c08\u0001\u0000\u0000\u0000\u1c0c\u1c0f\u0001\u0000\u0000\u0000\u1c0d"+
		"\u1c0b\u0001\u0000\u0000\u0000\u1c0d\u1c0e\u0001\u0000\u0000\u0000\u1c0e"+
		"\u02a3\u0001\u0000\u0000\u0000\u1c0f\u1c0d\u0001\u0000\u0000\u0000\u1c10"+
		"\u1c11\u0007\u0083\u0000\u0000\u1c11\u02a5\u0001\u0000\u0000\u0000\u1c12"+
		"\u1c21\u0005\u045d\u0000\u0000\u1c13\u1c21\u0005\u045e\u0000\u0000\u1c14"+
		"\u1c21\u0005\u045f\u0000\u0000\u1c15\u1c16\u0005\u045f\u0000\u0000\u1c16"+
		"\u1c21\u0005\u045d\u0000\u0000\u1c17\u1c18\u0005\u045e\u0000\u0000\u1c18"+
		"\u1c21\u0005\u045d\u0000\u0000\u1c19\u1c1a\u0005\u045f\u0000\u0000\u1c1a"+
		"\u1c21\u0005\u045e\u0000\u0000\u1c1b\u1c1c\u0005\u0460\u0000\u0000\u1c1c"+
		"\u1c21\u0005\u045d\u0000\u0000\u1c1d\u1c1e\u0005\u045f\u0000\u0000\u1c1e"+
		"\u1c1f\u0005\u045d\u0000\u0000\u1c1f\u1c21\u0005\u045e\u0000\u0000\u1c20"+
		"\u1c12\u0001\u0000\u0000\u0000\u1c20\u1c13\u0001\u0000\u0000\u0000\u1c20"+
		"\u1c14\u0001\u0000\u0000\u0000\u1c20\u1c15\u0001\u0000\u0000\u0000\u1c20"+
		"\u1c17\u0001\u0000\u0000\u0000\u1c20\u1c19\u0001\u0000\u0000\u0000\u1c20"+
		"\u1c1b\u0001\u0000\u0000\u0000\u1c20\u1c1d\u0001\u0000\u0000\u0000\u1c21"+
		"\u02a7\u0001\u0000\u0000\u0000\u1c22\u1c2a\u0005\n\u0000\u0000\u1c23\u1c24"+
		"\u0005\u0463\u0000\u0000\u1c24\u1c2a\u0005\u0463\u0000\u0000\u1c25\u1c2a"+
		"\u0005\u00c0\u0000\u0000\u1c26\u1c2a\u0005z\u0000\u0000\u1c27\u1c28\u0005"+
		"\u0462\u0000\u0000\u1c28\u1c2a\u0005\u0462\u0000\u0000\u1c29\u1c22\u0001"+
		"\u0000\u0000\u0000\u1c29\u1c23\u0001\u0000\u0000\u0000\u1c29\u1c25\u0001"+
		"\u0000\u0000\u0000\u1c29\u1c26\u0001\u0000\u0000\u0000\u1c29\u1c27\u0001"+
		"\u0000\u0000\u0000\u1c2a\u02a9\u0001\u0000\u0000\u0000\u1c2b\u1c2c\u0005"+
		"\u045f\u0000\u0000\u1c2c\u1c33\u0005\u045f\u0000\u0000\u1c2d\u1c2e\u0005"+
		"\u045e\u0000\u0000\u1c2e\u1c33\u0005\u045e\u0000\u0000\u1c2f\u1c33\u0005"+
		"\u0463\u0000\u0000\u1c30\u1c33\u0005\u0464\u0000\u0000\u1c31\u1c33\u0005"+
		"\u0462\u0000\u0000\u1c32\u1c2b\u0001\u0000\u0000\u0000\u1c32\u1c2d\u0001"+
		"\u0000\u0000\u0000\u1c32\u1c2f\u0001\u0000\u0000\u0000\u1c32\u1c30\u0001"+
		"\u0000\u0000\u0000\u1c32\u1c31\u0001\u0000\u0000\u0000\u1c33\u02ab\u0001"+
		"\u0000\u0000\u0000\u1c34\u1c35\u0007\u0084\u0000\u0000\u1c35\u02ad\u0001"+
		"\u0000\u0000\u0000\u1c36\u1c37\u0005\u045a\u0000\u0000\u1c37\u1c3c\u0005"+
		"\u045e\u0000\u0000\u1c38\u1c39\u0005\u045a\u0000\u0000\u1c39\u1c3a\u0005"+
		"\u045e\u0000\u0000\u1c3a\u1c3c\u0005\u045e\u0000\u0000\u1c3b\u1c36\u0001"+
		"\u0000\u0000\u0000\u1c3b\u1c38\u0001\u0000\u0000\u0000\u1c3c\u02af\u0001"+
		"\u0000\u0000\u0000\u1c3d\u1c3e\u0007\u0085\u0000\u0000\u1c3e\u02b1\u0001"+
		"\u0000\u0000\u0000\u1c3f\u1c40\u0007\u0086\u0000\u0000\u1c40\u02b3\u0001"+
		"\u0000\u0000\u0000\u1c41\u1c42\u0007\u0087\u0000\u0000\u1c42\u02b5\u0001"+
		"\u0000\u0000\u0000\u1c43\u1c44\u0007\u0088\u0000\u0000\u1c44\u02b7\u0001"+
		"\u0000\u0000\u0000\u1c45\u1c46\u0007\u0089\u0000\u0000\u1c46\u02b9\u0001"+
		"\u0000\u0000\u0000\u1c47\u1c48\u0007\u008a\u0000\u0000\u1c48\u02bb\u0001"+
		"\u0000\u0000\u0000\u1c49\u1c4a\u0007\u008b\u0000\u0000\u1c4a\u02bd\u0001"+
		"\u0000\u0000\u0000\u041a\u02bf\u02c3\u02ca\u02cd\u02d0\u02d2\u02d8\u02db"+
		"\u02de\u02e7\u0311\u031e\u0329\u033a\u033f\u034b\u0366\u036f\u0374\u037a"+
		"\u037f\u0383\u038c\u038f\u0392\u0396\u039d\u03a0\u03a5\u03ad\u03b2\u03b7"+
		"\u03ba\u03bc\u03c8\u03cb\u03cf\u03d2\u03d6\u03d9\u03dd\u03e0\u03e3\u03e7"+
		"\u03ea\u03ee\u03f4\u03fa\u0400\u0407\u040e\u0411\u0415\u041a\u0420\u0429"+
		"\u042e\u0433\u043a\u044b\u0452\u0456\u0460\u0464\u0468\u046c\u0470\u0475"+
		"\u0478\u047b\u047e\u0481\u0487\u048b\u0491\u0496\u0499\u049c\u049e\u04a9"+
		"\u04ad\u04b0\u04be\u04c1\u04c5\u04c8\u04cc\u04cf\u04d3\u04d6\u04da\u04dd"+
		"\u04e0\u04e4\u04e7\u04eb\u04f1\u04fe\u0504\u050f\u0514\u051c\u0524\u0529"+
		"\u052c\u0531\u0539\u053e\u0544\u0549\u054d\u054f\u0552\u0556\u055a\u055d"+
		"\u0561\u0565\u0569\u056f\u0572\u0579\u0581\u0583\u058a\u0590\u0598\u059b"+
		"\u05a2\u05a5\u05a7\u05ad\u05b3\u05c4\u05cb\u05d2\u05de\u05e3\u05e6\u05e9"+
		"\u05f6\u0603\u0608\u0618\u0620\u062a\u0630\u063c\u063f\u0644\u0651\u0658"+
		"\u065f\u0661\u0668\u066c\u066e\u0673\u0676\u067c\u0681\u0683\u0687\u068a"+
		"\u068d\u0693\u0698\u069a\u069f\u06a6\u06a8\u06af\u06b4\u06b8\u06bb\u06c3"+
		"\u06cb\u06cd\u06d5\u06d9\u06dc\u06e2\u06e7\u06ea\u06f0\u06f3\u06f7\u06fa"+
		"\u06fe\u0703\u0708\u070d\u0711\u0715\u0719\u071d\u0721\u0725\u072a\u072f"+
		"\u0734\u073a\u073f\u0744\u0749\u074e\u0753\u0759\u075e\u0763\u0768\u076d"+
		"\u0772\u0777\u077c\u0783\u0788\u078d\u0792\u0796\u079b\u07a3\u07a8\u07ae"+
		"\u07ba\u07c1\u07c3\u07cb\u07d0\u07d3\u07db\u07e1\u07f1\u07fd\u07ff\u0802"+
		"\u080a\u0810\u0816\u0823\u082a\u0833\u0838\u0843\u084c\u0851\u085d\u0864"+
		"\u086d\u0872\u087e\u0885\u088e\u0893\u089a\u08a3\u08a8\u08aa\u08af\u08b7"+
		"\u08c0\u08c4\u08c7\u08cb\u08d0\u08d6\u08dc\u08e1\u08e6\u08eb\u08f0\u08f3"+
		"\u08f8\u08fd\u0907\u090b\u0912\u0917\u091a\u091f\u0922\u0926\u092a\u0932"+
		"\u0945\u0948\u094b\u094f\u0959\u0966\u096d\u0970\u0975\u097c\u097f\u0982"+
		"\u098d\u0990\u0994\u099c\u099f\u09a4\u09ac\u09b2\u09b6\u09ba\u09bf\u09c4"+
		"\u09cb\u09cf\u09da\u09e2\u09e5\u09eb\u09f1\u09f3\u09f8\u09fb\u0a01\u0a07"+
		"\u0a09\u0a0d\u0a10\u0a13\u0a19\u0a1f\u0a22\u0a28\u0a2e\u0a30\u0a35\u0a3d"+
		"\u0a3f\u0a48\u0a4d\u0a55\u0a59\u0a61\u0a6b\u0a70\u0a77\u0a7b\u0a7f\u0a9f"+
		"\u0aa3\u0aaf\u0ab2\u0abb\u0acc\u0ad8\u0adf\u0ae6\u0af5\u0b02\u0b08\u0b0e"+
		"\u0b14\u0b1a\u0b20\u0b28\u0b30\u0b35\u0b3a\u0b41\u0b48\u0b4f\u0b54\u0b57"+
		"\u0b59\u0b67\u0b6e\u0b75\u0b7b\u0b7f\u0b83\u0b8a\u0b8d\u0b92\u0b99\u0ba0"+
		"\u0ba4\u0ba9\u0bb0\u0bbd\u0bc0\u0bc5\u0bca\u0bce\u0bd4\u0bdd\u0be6\u0bef"+
		"\u0bf2\u0bf6\u0bff\u0c03\u0c06\u0c09\u0c0f\u0c12\u0c18\u0c21\u0c24\u0c2f"+
		"\u0c32\u0c37\u0c3a\u0c3f\u0c49\u0c4e\u0c54\u0c56\u0c5c\u0c5e\u0c64\u0c6c"+
		"\u0c71\u0c79\u0c7c\u0c81\u0c84\u0c89\u0c91\u0c99\u0c9f\u0ca7\u0cac\u0cb4"+
		"\u0cb7\u0cbb\u0cbe\u0cc6\u0ccc\u0cd5\u0cd8\u0cdc\u0ce0\u0ce6\u0cea\u0cee"+
		"\u0cf0\u0cf3\u0cf6\u0cf9\u0cff\u0d03\u0d06\u0d09\u0d0c\u0d0f\u0d16\u0d18"+
		"\u0d1c\u0d21\u0d27\u0d2c\u0d33\u0d39\u0d3e\u0d41\u0d47\u0d4b\u0d53\u0d57"+
		"\u0d5a\u0d5d\u0d66\u0d6a\u0d6d\u0d71\u0d75\u0d78\u0d7b\u0d80\u0d86\u0d8a"+
		"\u0d94\u0d9a\u0d9e\u0da4\u0da8\u0dae\u0db1\u0dbd\u0dc1\u0dc5\u0dcd\u0dd1"+
		"\u0dd9\u0ddc\u0de0\u0de3\u0deb\u0df0\u0df3\u0df6\u0dfa\u0dfd\u0e06\u0e0b"+
		"\u0e14\u0e19\u0e20\u0e27\u0e2f\u0e35\u0e3d\u0e40\u0e43\u0e4a\u0e4d\u0e54"+
		"\u0e57\u0e5f\u0e65\u0e70\u0e73\u0e77\u0e81\u0e87\u0e8b\u0e8f\u0e99\u0e9e"+
		"\u0ea0\u0ea4\u0eae\u0eb8\u0ebe\u0ec3\u0ec7\u0eca\u0ecd\u0ed0\u0ed3\u0ed9"+
		"\u0edf\u0ee2\u0ee5\u0ee8\u0eeb\u0eee\u0ef0\u0ef6\u0efc\u0eff\u0f02\u0f05"+
		"\u0f08\u0f0c\u0f12\u0f16\u0f1e\u0f22\u0f25\u0f27\u0f34\u0f37\u0f3e\u0f48"+
		"\u0f4b\u0f50\u0f52\u0f56\u0f5e\u0f64\u0f6d\u0f7a\u0f7e\u0f84\u0f8d\u0f90"+
		"\u0f94\u0f97\u0f9b\u0f9f\u0fa2\u0fa4\u0fac\u0fb8\u0fbe\u0fc0\u0fc6\u0fc8"+
		"\u0fca\u0fd0\u0fd8\u0fe0\u0fe4\u0fe8\u0ff1\u0ff6\u100a\u100f\u1015\u101c"+
		"\u1021\u102a\u102d\u1031\u1035\u1039\u103c\u103f\u1042\u1046\u104a\u104d"+
		"\u1050\u1053\u105a\u105e\u106d\u1071\u107d\u1085\u108f\u1093\u1096\u109c"+
		"\u109f\u10a2\u10ab\u10b4\u10be\u10c2\u10cc\u10d6\u10de\u10e1\u10ea\u10ed"+
		"\u10f1\u10f6\u10fa\u1103\u1106\u1125\u1128\u112b\u1163\u1168\u1184\u1192"+
		"\u1199\u119d\u11a3\u11ab\u11ad\u11b8\u11c2\u11c9\u11cf\u11d7\u11dc\u11e4"+
		"\u11ec\u11f4\u11fc\u1202\u1207\u120c\u1211\u1217\u1219\u1224\u1229\u1230"+
		"\u1232\u1240\u1246\u124b\u1250\u1256\u125d\u1265\u126d\u1272\u1278\u127b"+
		"\u1283\u128a\u1293\u1296\u12a7\u12af\u12b7\u12bb\u12c2\u12c8\u12d0\u12d9"+
		"\u12df\u12e6\u12ed\u12f2\u12f5\u12f7\u12fd\u12ff\u1303\u1305\u130c\u1311"+
		"\u1315\u131b\u1324\u132a\u1331\u1337\u133d\u1342\u1345\u1347\u134d\u134f"+
		"\u1353\u1355\u135c\u135e\u1363\u136a\u1373\u1378\u1381\u1388\u138d\u1390"+
		"\u1392\u1398\u139a\u139d\u13a5\u13aa\u13af\u13b3\u13b9\u13be\u13c2\u13c8"+
		"\u13ca\u13d5\u13d8\u13df\u13e2\u13ee\u13f4\u13fd\u1406\u140b\u1414\u141a"+
		"\u1425\u142b\u1430\u1434\u143a\u143f\u1443\u1446\u1452\u1459\u145e\u1470"+
		"\u1478\u147d\u1483\u148d\u1497\u14a1\u14a7\u14b0\u14b6\u14bd\u14bf\u14c9"+
		"\u14cd\u14d1\u14db\u14e0\u1523\u1535\u153d\u1549\u1550\u1552\u155c\u155f"+
		"\u1567\u156e\u1572\u1579\u157e\u1581\u1584\u158d\u1591\u1595\u15ac\u15b3"+
		"\u15b7\u15be\u15c5\u15c8\u15d8\u15db\u15e5\u15e9\u15ef\u15f2\u15f7\u15fb"+
		"\u1602\u1605\u160b\u1623\u1626\u1632\u1635\u163f\u1647\u164b\u1652\u1655"+
		"\u165e\u1664\u166a\u1674\u1676\u167c\u167f\u1682\u168e\u1691\u1697\u169a"+
		"\u16a2\u16aa\u16b0\u16b4\u16c2\u16ce\u16d5\u16d8\u16df\u16e6\u16eb\u16f8"+
		"\u1703\u1709\u170e\u171b\u171d\u1722\u1726\u1729\u172b\u1732\u1739\u173c"+
		"\u173f\u1745\u1749\u174f\u1755\u1762\u1767\u176f\u1772\u1777\u177c\u1784"+
		"\u1787\u178f\u1793\u17a0\u17a6\u17b2\u17b5\u17be\u17c3\u17c9\u17cf\u17d4"+
		"\u17d6\u17d9\u17dd\u17df\u17e3\u17e9\u17ec\u17ef\u17f6\u17fe\u1802\u1816"+
		"\u181d\u181f\u1826\u1828\u182c\u1831\u183c\u1841\u1847\u184a\u184e\u1853"+
		"\u1856\u185a\u185e\u1860\u1865\u186a\u1877\u187a\u187e\u1881\u1884\u1889"+
		"\u188e\u1893\u1896\u189b\u189e\u18a4\u18a7\u18ab\u18b0\u18b5\u18ba\u18bf"+
		"\u18c2\u18c7\u18cc\u18d1\u18d7\u18dc\u18e1\u18e6\u18e9\u18ee\u18f2\u18f6"+
		"\u18fe\u1905\u1909\u190e\u1913\u1917\u1919\u191c\u192c\u1935\u193d\u1945"+
		"\u194e\u1958\u1960\u1968\u1970\u1978\u1984\u198b\u1995\u199a\u199d\u19a2"+
		"\u19a5\u19a9\u19b8\u19c0\u19c7\u19cc\u19d1\u19f2\u19f6\u19fe\u1a02\u1a0b"+
		"\u1a13\u1a18\u1a20\u1a25\u1a2a\u1a2c\u1a35\u1a3a\u1a42\u1a47\u1a4f\u1a57"+
		"\u1a5a\u1a64\u1a76\u1a79\u1a7c\u1a80\u1a8d\u1a95\u1a99\u1a9e\u1aa3\u1aa9"+
		"\u1aae\u1ab2\u1ab7\u1abc\u1ac1\u1acb\u1ace\u1ad2\u1ad6\u1add\u1ae1\u1afe"+
		"\u1b06\u1b09\u1b0c\u1b0f\u1b12\u1b1d\u1b2b\u1b34\u1b4e\u1b59\u1b60\u1b64"+
		"\u1b6b\u1b73\u1b78\u1b80\u1b86\u1b90\u1b9d\u1ba3\u1ba9\u1bb9\u1bbf\u1bc8"+
		"\u1bca\u1bdd\u1be9\u1bfa\u1c0b\u1c0d\u1c20\u1c29\u1c32\u1c3b";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}